{"version":3,"file":"static/webpack/static\\development\\pages\\hooksAsFunction.js.b27b64ef6a07d8dfdc97.hot-update.js","sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/readOnlyError.js","webpack:///./pages/hooksAsFunction.js"],"sourcesContent":["export default function _readOnlyError(name) {\n  throw new Error(\"\\\"\" + name + \"\\\" is read-only\");\n}","import { useState } from \"react\";\r\nimport { render } from \"react-dom\";\r\n\r\n\r\n\r\nfunction hooksAsFunction() {\r\n\r\n    const [counterValue, incrementCounter] = useState(0)\r\n    // incrementCounter() {\r\n    //     counterValue = counterValue + 1;\r\n    // }\r\n\r\n    incrementCounter = () => {\r\n        counterValue = counterValue + 1;\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div> Only here since this is a functional component - we can use hooks </div>>\r\n            <button onClick={this.incrementCounter}> Count + </button>\r\n            {/* <button onClick={() => incrementCounter(counterValue + 1)}> Count + </button> */}\r\n            <h4> {counterValue} </h4>\r\n        </>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default hooksAsFunction;"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;A","sourceRoot":""}