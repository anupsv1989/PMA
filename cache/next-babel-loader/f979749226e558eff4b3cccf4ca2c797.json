{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport { render } from \"react-dom\";\nimport ObjectsinHooks from \"../containers/objectsinHooks\";\nimport ArraysinHooks from \"../containers/arraysinhooks\";\n\nfunction hooksAsFunction() {\n  const initialVal = 0;\n  const {\n    0: counterValue,\n    1: incrementCounter\n  } = useState(initialVal); //behaves as componentDidMount , DidUpdate & WillUnmount for functional components\n\n  useEffect(() => {\n    document.title = \"Title - \" + counterValue;\n    return () => {//this return statement will act as a componentWillUnmount method.\n    };\n  }, [counterValue]); //this array of counterval is used, to check, the value of previuos state and current state\n  // it renders only if its different. If the value iis same it will not render.\n  // meanwhile, passing an empty [] as parameter it means - compDidMount type only once it will be called\n\n  const incrementBy5 = () => {\n    for (var i = 0; i < 5; i++) {\n      incrementCounter(prevVal => prevVal + 1);\n    } //this is not called when everytime the component is rendered\n\n\n    document.title = \"Title - \" + counterValue;\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", null, \" Only here since this is a functional component - we can use hooks \"), \">\", __jsx(\"button\", {\n    onClick: () => incrementCounter(prevVal => prevVal + 1)\n  }, \"Counter +\"), __jsx(\"button\", {\n    onClick: () => incrementCounter(prevVal => prevVal - 1)\n  }, \"Counter -\"), __jsx(\"button\", {\n    onClick: () => incrementCounter(initialVal)\n  }, \"Counter 0\"), __jsx(\"button\", {\n    onClick: incrementBy5\n  }, \"Counter +5\"), __jsx(\"button\", {\n    onClick: () => incrementCounter(counterValue + 1)\n  }, \"Use Effect Demo\"), __jsx(\"h4\", null, \" \", counterValue, \" \"), __jsx(\"hr\", null), __jsx(ObjectsinHooks, null), __jsx(\"hr\", null), __jsx(ArraysinHooks, null));\n}\n\nexport default hooksAsFunction;","map":null,"metadata":{},"sourceType":"module"}