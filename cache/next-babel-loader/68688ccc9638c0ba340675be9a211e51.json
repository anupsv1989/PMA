{"ast":null,"code":"var _jsxFileName = \"D:\\\\RandDChamber\\\\LogwardAssignment\\\\ProjectManagement\\\\PMA\\\\containers\\\\parentReleaseList.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, useState, version } from \"react\";\nimport { Table, Tag, Form, Input, InputNumber, Popconfirm, DatePicker, Select, Slider } from 'antd';\nimport AddParentRelease from './addParentRelease';\nimport moment from 'moment';\nconst dateFormat = \"DD-MM-YYYY\";\nexport default class ReleaseList extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"EditableCell\", (_ref) => {\n      let {\n        editing,\n        dataIndex,\n        title,\n        inputType,\n        record,\n        index,\n        children\n      } = _ref,\n          restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n      // console.log(\"started 1\", children)\n      console.log(\"started 2\", record); // console.log(\"started 4\", dataIndex)\n      // console.log(\"started 5\", title)\n\n      let inputNode;\n\n      if (dataIndex == \"version\") {} else if (dataIndex == \"startDate\") {} else {\n        inputNode = __jsx(Input, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }\n        });\n      }\n\n      switch (dataIndex) {\n        case \"version\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.version,\n            name: \"version\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"startDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"startDate\",\n            defaultValue: moment(record.startDate, dateFormat),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"endDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"endDate\",\n            defaultValue: moment(record.endDate, dateFormat),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"description\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.description,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"status\":\n          inputNode = __jsx(Select, {\n            style: {\n              width: 120\n            },\n            name: \"status\",\n            onChange: this.handleChange,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 21\n            }\n          }, __jsx(Option, {\n            value: \"inprogress\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 25\n            }\n          }, \"In Progress\"), __jsx(Option, {\n            value: \"unreleased\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 25\n            }\n          }, \"Unreleased\"), __jsx(Option, {\n            value: \"released\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 25\n            }\n          }, \"Released\")); // onChange = { handleChange }\n\n          break;\n\n        case \"progress\":\n          inputNode = __jsx(Slider, {\n            defaultValue: 30,\n            tooltipVisible: true,\n            name: \"progress\",\n            onChange: this.handleSlider,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        default: // code block\n\n      } // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n\n\n      return __jsx(\"td\", _extends({}, restProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }\n      }), editing ? __jsx(Form.Item, {\n        name: dataIndex,\n        style: {\n          margin: 0\n        },\n        rules: [{\n          required: true,\n          message: `Please Input ${title}!`\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }\n      }, inputNode) : children); // }\n    });\n\n    _defineProperty(this, \"handleChange\", value => {\n      console.log(\"Vlaue\", value);\n    });\n\n    _defineProperty(this, \"handleSlider\", value => {\n      console.log(\"sliceer Vlaue\", value);\n    });\n\n    _defineProperty(this, \"isEditing\", record => record.key === this.state.editingKey);\n\n    _defineProperty(this, \"cancel\", () => {\n      this.setState({\n        editingKey: ''\n      });\n    });\n\n    this.state = {\n      editingKey: '',\n      columns: [{\n        title: 'Version No',\n        dataIndex: 'version',\n        key: 'version',\n        render: text => __jsx(\"a\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 37\n          }\n        }, text),\n        editable: true\n      }, {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n        editable: true\n      }, {\n        title: 'Progress',\n        dataIndex: 'progress',\n        key: 'progress',\n        editable: true\n      }, {\n        title: 'Start Date',\n        dataIndex: 'startDate',\n        key: 'startDate',\n        editable: true\n      }, {\n        title: 'Release Date',\n        dataIndex: 'endDate',\n        key: 'endDate',\n        editable: true\n      }, {\n        title: 'Description',\n        dataIndex: 'description',\n        key: 'description',\n        editable: true\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: (text, record) => {\n          const editable = this.isEditing(record);\n          return editable ? __jsx(\"span\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 29\n            }\n          }, __jsx(\"a\", {\n            href: \"javascript:;\",\n            onClick: () => this.save(record),\n            style: {\n              marginRight: 8\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 33\n            }\n          }, \"Save\"), __jsx(Popconfirm, {\n            title: \"Sure to cancel?\",\n            onConfirm: this.cancel,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 33\n            }\n          }, __jsx(\"a\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 37\n            }\n          }, \"Cancel\"))) : __jsx(\"a\", {\n            disabled: this.state.editingKey !== '',\n            onClick: () => this.edit(record),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 33\n            }\n          }, \"Edit\");\n        }\n      }],\n      listDataSrc: [],\n      isEdit: false\n    };\n  }\n\n  componentDidMount() {\n    let chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\n    let getItems = chkItem == null ? [] : chkItem;\n    this.setState({\n      listDataSrc: getItems\n    });\n  }\n\n  save(form, key) {\n    console.log(\"Form submit\", key);\n    console.log(\"Form submit form\", form);\n    form.validateFields((error, row) => {\n      if (error) {\n        return;\n      }\n\n      console.log(\"Form submit\", key);\n      console.log(\"Form submit form\", form);\n      const newData = [...this.state.data];\n      const index = newData.findIndex(item => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, _objectSpread({}, item, {}, row));\n        this.setState({\n          data: newData,\n          editingKey: ''\n        });\n      } else {\n        newData.push(row);\n        this.setState({\n          data: newData,\n          editingKey: ''\n        });\n      }\n    });\n  }\n\n  edit(record) {\n    this.setState({\n      editingKey: record.key\n    });\n  }\n\n  render() {\n    let {\n      listDataSrc\n    } = this.state;\n    const components = {\n      body: {\n        cell: this.EditableCell\n      }\n    };\n    const columns = this.state.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return _objectSpread({}, col, {\n        onCell: record => ({\n          record,\n          inputType: col.dataIndex,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record)\n        })\n      });\n    });\n    return __jsx(React.Fragment, null, __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }\n    }, __jsx(Table, {\n      columns: columns,\n      dataSource: listDataSrc,\n      components: components,\n      rowClassName: \"editable-row\",\n      pagination: {\n        onChange: this.cancel\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }\n    })), __jsx(AddParentRelease, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["D:/RandDChamber/LogwardAssignment/ProjectManagement/PMA/containers/parentReleaseList.js"],"names":["React","Component","useState","version","Table","Tag","Form","Input","InputNumber","Popconfirm","DatePicker","Select","Slider","AddParentRelease","moment","dateFormat","ReleaseList","constructor","props","editing","dataIndex","title","inputType","record","index","children","restProps","console","log","inputNode","startDate","endDate","description","width","handleChange","handleSlider","margin","required","message","value","key","state","editingKey","setState","columns","render","text","editable","isEditing","save","marginRight","cancel","edit","listDataSrc","isEdit","componentDidMount","chkItem","JSON","parse","localStorage","getItem","getItems","form","validateFields","error","row","newData","data","findIndex","item","splice","push","components","body","cell","EditableCell","map","col","onCell","onChange"],"mappings":"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","sourcesContent":["import React, { Component, useState, version } from \"react\";\r\nimport { Table, Tag, Form, Input, InputNumber, Popconfirm, DatePicker, Select, Slider } from 'antd';\r\nimport AddParentRelease from './addParentRelease';\r\nimport moment from 'moment';\r\n\r\nconst dateFormat = \"DD-MM-YYYY\";\r\n\r\n\r\n\r\n\r\nexport default class ReleaseList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            editingKey: '',\r\n            columns: [\r\n                {\r\n                    title: 'Version No',\r\n                    dataIndex: 'version',\r\n                    key: 'version',\r\n                    render: text => <a>{text}</a>,\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Status',\r\n                    dataIndex: 'status',\r\n                    key: 'status',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Progress',\r\n                    dataIndex: 'progress',\r\n                    key: 'progress',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Start Date',\r\n                    dataIndex: 'startDate',\r\n                    key: 'startDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Release Date',\r\n                    dataIndex: 'endDate',\r\n                    key: 'endDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Description',\r\n                    dataIndex: 'description',\r\n                    key: 'description',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Action',\r\n                    key: 'action',\r\n                    render: (text, record) => {\r\n                        const editable = this.isEditing(record);\r\n                        return editable ? (\r\n                            <span>\r\n                                <a\r\n                                    href=\"javascript:;\"\r\n                                    onClick={() => this.save(record)}\r\n                                    style={{\r\n                                        marginRight: 8,\r\n                                    }}\r\n                                >\r\n                                    Save\r\n                            </a>\r\n                                <Popconfirm title=\"Sure to cancel?\" onConfirm={this.cancel}>\r\n                                    <a>Cancel</a>\r\n                                </Popconfirm>\r\n                            </span>\r\n                        ) : (\r\n                                <a disabled={this.state.editingKey !== ''} onClick={() => this.edit(record)}>\r\n                                    Edit\r\n                                </a>\r\n                            );\r\n                    }\r\n                }\r\n            ],\r\n            listDataSrc: [],\r\n            isEdit: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\r\n        let getItems = chkItem == null ? [] : chkItem;\r\n        this.setState({\r\n            listDataSrc: getItems\r\n        })\r\n    }\r\n\r\n    EditableCell = ({\r\n        editing,\r\n        dataIndex,\r\n        title,\r\n        inputType,\r\n        record,\r\n        index,\r\n        children,\r\n        ...restProps\r\n    }) => {\r\n        // console.log(\"started 1\", children)\r\n        console.log(\"started 2\", record)\r\n        // console.log(\"started 4\", dataIndex)\r\n        // console.log(\"started 5\", title)\r\n        let inputNode;\r\n        if (dataIndex == \"version\") {\r\n\r\n        } else if (dataIndex == \"startDate\") {\r\n\r\n        } else {\r\n            inputNode = <Input />\r\n        }\r\n\r\n        switch (dataIndex) {\r\n            case \"version\":\r\n                inputNode = <Input defaultValue={record.version} name=\"version\" />\r\n                break;\r\n            case \"startDate\":\r\n                inputNode = <DatePicker name=\"startDate\" defaultValue={moment(record.startDate, dateFormat)} />\r\n                break;\r\n            case \"endDate\":\r\n                inputNode = <DatePicker name=\"endDate\" defaultValue={moment(record.endDate, dateFormat)} />\r\n                break;\r\n            case \"description\":\r\n                inputNode = <Input defaultValue={record.description} />\r\n                break;\r\n            case \"status\":\r\n                inputNode =\r\n                    <Select style={{ width: 120 }} name=\"status\" onChange={this.handleChange}>\r\n                        <Option value=\"inprogress\">In Progress</Option>\r\n                        <Option value=\"unreleased\">Unreleased</Option>\r\n                        <Option value=\"released\">Released</Option>\r\n                    </Select>\r\n                // onChange = { handleChange }\r\n                break;\r\n            case \"progress\":\r\n                inputNode = <Slider defaultValue={30} tooltipVisible name=\"progress\" onChange={this.handleSlider} />\r\n                break;\r\n            default:\r\n            // code block\r\n        }\r\n\r\n        // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\r\n        return (\r\n            <td {...restProps}>\r\n                {editing ?\r\n                    (\r\n                        <Form.Item\r\n                            name={dataIndex}\r\n                            style={{ margin: 0 }}\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: `Please Input ${title}!`,\r\n                                },\r\n                            ]}\r\n                        >\r\n                            {inputNode}\r\n                        </Form.Item>\r\n\r\n                    )\r\n\r\n                    : (\r\n                        children\r\n                    )}\r\n            </td>\r\n        );\r\n        // }\r\n    };\r\n\r\n    handleChange = (value) => {\r\n        console.log(\"Vlaue\", value)\r\n    }\r\n\r\n    handleSlider = (value) => {\r\n        console.log(\"sliceer Vlaue\", value)\r\n    }\r\n\r\n    isEditing = record => record.key === this.state.editingKey;\r\n\r\n    cancel = () => {\r\n        this.setState({ editingKey: '' });\r\n    };\r\n\r\n    save(form, key) {\r\n        console.log(\"Form submit\", key)\r\n        console.log(\"Form submit form\", form)\r\n        form.validateFields((error, row) => {\r\n            if (error) {\r\n                return;\r\n            }\r\n            console.log(\"Form submit\", key)\r\n            console.log(\"Form submit form\", form)\r\n            const newData = [...this.state.data];\r\n            const index = newData.findIndex(item => key === item.key);\r\n            if (index > -1) {\r\n                const item = newData[index];\r\n                newData.splice(index, 1, {\r\n                    ...item,\r\n                    ...row,\r\n                });\r\n                this.setState({ data: newData, editingKey: '' });\r\n            } else {\r\n                newData.push(row);\r\n                this.setState({ data: newData, editingKey: '' });\r\n            }\r\n        });\r\n    }\r\n\r\n    edit(record) {\r\n        this.setState({ editingKey: record.key });\r\n    }\r\n\r\n    render() {\r\n        let { listDataSrc } = this.state;\r\n\r\n        const components = {\r\n            body: {\r\n                cell: this.EditableCell,\r\n            },\r\n        };\r\n\r\n        const columns = this.state.columns.map(col => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n            return {\r\n                ...col,\r\n                onCell: record => ({\r\n                    record,\r\n                    inputType: col.dataIndex,\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    editing: this.isEditing(record),\r\n                }),\r\n            };\r\n        });\r\n\r\n\r\n        return (\r\n            <>\r\n                <Form>\r\n                    <Table\r\n                        columns={columns}\r\n                        dataSource={listDataSrc}\r\n                        components={components}\r\n                        rowClassName=\"editable-row\"\r\n                        pagination={{\r\n                            onChange: this.cancel,\r\n                        }}\r\n                    />\r\n                </Form>\r\n\r\n\r\n                <AddParentRelease />\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}