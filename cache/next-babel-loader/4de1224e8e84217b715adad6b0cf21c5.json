{"ast":null,"code":"var _jsxFileName = \"D:\\\\RandDChamber\\\\LogwardPlugin\\\\ProjectManagement\\\\PMA\\\\pages\\\\hooksAsFunction.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport { render } from \"react-dom\";\n\nfunction hooksAsFunction() {\n  const {\n    0: counterValue,\n    1: incrementCounter\n  } = useState(0); // incrementCounter() {\n  //     counterValue = counterValue + 1;\n  // }\n\n  incrementCounter = () => {\n    counterValue = counterValue + 1;\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }, \" Only here since this is a functional component - we can use hooks \"), \">\", __jsx(\"button\", {\n    onClick: this.incrementCounter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, \" Count + \"), __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }, \" \", counterValue, \" \"));\n}\n\nexport default hooksAsFunction;","map":{"version":3,"sources":["D:/RandDChamber/LogwardPlugin/ProjectManagement/PMA/pages/hooksAsFunction.js"],"names":["useState","render","hooksAsFunction","counterValue","incrementCounter"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,WAAvB;;AAIA,SAASC,eAAT,GAA2B;AAEvB,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAmCJ,QAAQ,CAAC,CAAD,CAAjD,CAFuB,CAGvB;AACA;AACA;;AAEAI,EAAAA,gBAAgB,GAAG,MAAM;AACrBD,IAAAA,YAAY,GAAGA,YAAY,GAAG,CAA9B;AACH,GAFD;;AAKA,SACI,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EADJ,OAEI;AAAQ,IAAA,OAAO,EAAE,KAAKC,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAMD,YAAN,MAJJ,CADJ;AAUH;;AAED,eAAeD,eAAf","sourcesContent":["import { useState } from \"react\";\r\nimport { render } from \"react-dom\";\r\n\r\n\r\n\r\nfunction hooksAsFunction() {\r\n\r\n    const [counterValue, incrementCounter] = useState(0)\r\n    // incrementCounter() {\r\n    //     counterValue = counterValue + 1;\r\n    // }\r\n\r\n    incrementCounter = () => {\r\n        counterValue = counterValue + 1;\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div> Only here since this is a functional component - we can use hooks </div>>\r\n            <button onClick={this.incrementCounter}> Count + </button>\r\n            {/* <button onClick={() => incrementCounter(counterValue + 1)}> Count + </button> */}\r\n            <h4> {counterValue} </h4>\r\n        </>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default hooksAsFunction;"]},"metadata":{},"sourceType":"module"}