{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Table, Popconfirm, Popover, Row, Col, Button, Tag, Input, Select, Slider, DatePicker, Form, Progress } from \"antd\";\nimport moment from 'moment';\nimport { EllipsisOutlined, EditOutlined } from '@ant-design/icons';\nimport { statusDisplay, progressDisplay, dateFormat } from \"../commons/helpers\";\nexport default class ChildReleaseList extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"isEditing\", record => record.key === this.state.editingKey);\n\n    _defineProperty(this, \"EditableCell\", (_ref) => {\n      let {\n        editing,\n        dataIndex,\n        title,\n        inputType,\n        record,\n        index,\n        children\n      } = _ref,\n          restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n      // console.log(\"started 1\", children)\n      // console.log(\"started 2\", record)\n      // console.log(\"started 4\", dataIndex)\n      // console.log(\"started 5\", title)\n      let inputNode;\n\n      switch (dataIndex) {\n        case \"version\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.version,\n            name: \"version\",\n            onChange: this.handleVersion\n          });\n          break;\n\n        case \"startDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"startDate\",\n            defaultValue: moment(record.startDate, dateFormat),\n            onChange: this.handleStartDate\n          });\n          break;\n\n        case \"endDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"endDate\",\n            defaultValue: moment(record.endDate, dateFormat),\n            onChange: this.handleEndDate\n          });\n          break;\n\n        case \"description\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.description,\n            onChange: this.handleDescription\n          });\n          break;\n\n        case \"status\":\n          inputNode = statusDisplay(this.state.editStatus); // inputNode = this.fetchStatusDisp(record.status);\n\n          break;\n\n        case \"progress\":\n          inputNode = __jsx(Slider, {\n            defaultValue: record.progress ? record.progress : 0,\n            tooltipVisible: true,\n            name: \"progress\",\n            onChange: this.handleSlider\n          });\n          break;\n      } // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n\n\n      return __jsx(\"td\", restProps, editing ? __jsx(Form.Item, {\n        name: dataIndex,\n        style: {\n          margin: 0\n        },\n        rules: [{\n          required: true,\n          message: `Please Input ${title}!`\n        }]\n      }, inputNode) : children); // }\n    });\n\n    _defineProperty(this, \"fetchStatusDisp\", rec => {});\n\n    _defineProperty(this, \"handleChange\", value => {\n      console.log(\"Vlaue\", value);\n      this.setState({\n        editStatus: value\n      });\n    });\n\n    _defineProperty(this, \"handleSlider\", value => {\n      let releaseType = \"IN PROGRESS\";\n\n      if (value == 0) {\n        releaseType = \"IN PROGRESS\";\n      } else if (value == 100) {\n        releaseType = \"RELEASED\";\n      } else {\n        releaseType = \"UNRELEASED\";\n      }\n\n      console.log(\"On hcnafe of progress\", value);\n      this.setState({\n        editProgress: value,\n        editStatus: releaseType\n      });\n    });\n\n    _defineProperty(this, \"handleStartDate\", (date, str) => {\n      console.log(\"sliceer sd str\", str);\n      this.setState({\n        editstartDate: str\n      });\n    });\n\n    _defineProperty(this, \"handleEndDate\", (date, str) => {\n      console.log(\"sliceer ed\", str);\n      this.setState({\n        editEndDate: str\n      });\n    });\n\n    _defineProperty(this, \"handleDescription\", e => {\n      console.log(\"sliceer desc\", e.target.value);\n      this.setState({\n        editDescription: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"cancel\", () => {\n      this.setState({\n        editingKey: ''\n      });\n    });\n\n    this.state = {\n      editStatus: \"IN PROGRESS\",\n      editingKey: '',\n      editProgress: \"\",\n      editstartDate: \"\",\n      editEndDate: \"\",\n      editDescription: \"\",\n      childColumns: [{\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n        editable: true,\n        render: rec => statusDisplay(rec)\n      }, {\n        title: 'Progess',\n        dataIndex: 'progress',\n        key: 'progress',\n        editable: true,\n        render: rec => progressDisplay(rec)\n      }, {\n        title: 'Start Date',\n        dataIndex: 'startDate',\n        key: 'startDate',\n        editable: true\n      }, {\n        title: 'End Date',\n        dataIndex: 'endDate',\n        key: 'endDate',\n        editable: true\n      }, {\n        title: 'Description',\n        dataIndex: 'description',\n        key: 'description',\n        editable: true\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: (text, record) => {\n          const editable = this.isEditing(record);\n          return editable ? __jsx(\"span\", null, __jsx(\"a\", {\n            href: \"javascript:;\",\n            onClick: () => this.save(record),\n            style: {\n              marginRight: 8\n            }\n          }, \"Save\"), __jsx(Popconfirm, {\n            title: \"Sure to cancel?\",\n            onConfirm: this.cancel\n          }, __jsx(\"a\", null, \"Cancel\"))) : __jsx(EditOutlined, {\n            disabled: this.state.editingKey !== '',\n            onClick: () => this.edit(record)\n          });\n        }\n      }]\n    };\n  }\n\n  save(record) {\n    console.log(\"Form submit\", record);\n    console.log(\"Form submit this data\", this.props.thisData);\n    let {\n      editstartDate,\n      editEndDate,\n      editDescription,\n      editStatus,\n      editProgress\n    } = this.state;\n    let temp = this.props.thisData;\n    console.log(\"while save >>>>>>>>>>>>>>\", this.state);\n    temp.childRelease.map(item => {\n      if (item.key == record.key) {\n        item.key = record.key;\n        item.status = editStatus;\n        item.progress = editProgress;\n        item.startDate = editstartDate;\n        item.endDate = editEndDate;\n        item.description = editDescription;\n      }\n    });\n    let arr = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\n    let index = arr.map(x => {\n      return x.key;\n    }).indexOf(temp.key);\n    arr.splice(index, 1);\n    let addData = temp;\n    arr.unshift(addData); // debugger;\n\n    console.log(\"Presnet Obj list form after \", arr);\n    localStorage.setItem('parentReleaseData', JSON.stringify(arr));\n    this.setState({\n      editingKey: \"\",\n      editStatus: \"\",\n      editProgress: \"\",\n      editstartDate: \"\",\n      editEndDate: \"\",\n      editDescription: \"\"\n    });\n    this.props.refreshCallBack();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    console.log(\"NExgt Props\", nextProps);\n    let {\n      dataFromLS\n    } = nextProps;\n    console.log(\"data from lcoal\", dataFromLS);\n\n    if (dataFromLS) {\n      this.setState({\n        listDataSrc: dataFromLS,\n        editingKey: \"\"\n      }, () => {\n        console.log(\"After setting state :\", this.state.listDataSrc);\n      });\n    }\n  }\n\n  edit(record) {\n    this.setState({\n      editingKey: record.key,\n      editStatus: record.status,\n      editProgress: record.progress,\n      editstartDate: record.startDate,\n      editEndDate: record.endDate,\n      editDescription: record.description\n    });\n  }\n\n  render() {\n    const components = {\n      body: {\n        cell: this.EditableCell\n      }\n    };\n    const columns = this.state.childColumns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return _objectSpread({}, col, {\n        onCell: record => ({\n          record,\n          inputType: col.dataIndex,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record)\n        })\n      });\n    });\n    return __jsx(Table, {\n      columns: columns,\n      dataSource: this.props.thisData.childRelease,\n      pagination: false,\n      components: components\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}