{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from \"react\";\nimport { Button } from \"antd\";\nimport HooksAsFunction from \"./hooksAsFunction\";\nexport default class MyHooks extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"incrementCounter\", () => {\n      this.setState(prevVal => {\n        return {\n          conterValue: prevVal.conterValue + 1\n        };\n      });\n    });\n\n    this.state = {\n      conterValue: 0\n    };\n  } //we get a preval from states and which always holds the preveious val\n  //i.e passed as an argumet to get the prev val and count is increment from then.\n  //the same logic but different syntax can be seen in functional hooks component.\n\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(\"div\", null, \"We cannot hooks here as this is a class component.\"), __jsx(Button, {\n      onClick: this.incrementCounter\n    }, \" Counter + \"), __jsx(\"h4\", null, \"Counter Value = \", this.state.conterValue), __jsx(\"hr\", null), __jsx(\"div\", null, \"How and where hooks work ?\"), __jsx(HooksAsFunction, null));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}