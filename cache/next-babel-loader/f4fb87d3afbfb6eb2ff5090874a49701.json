{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\RandDChamber\\\\LogwardAssignment\\\\ProjectManagement\\\\PMA\\\\containers\\\\parentReleaseList.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, useState, version } from \"react\";\nimport { Table, Tag, Form, Input, InputNumber, Popconfirm, DatePicker, Select, Slider } from 'antd';\nimport AddParentRelease from './addParentRelease';\nimport moment from 'moment';\nvar dateFormat = \"DD-MM-YYYY\";\n\nvar ReleaseList = /*#__PURE__*/function (_Component) {\n  _inherits(ReleaseList, _Component);\n\n  var _super = _createSuper(ReleaseList);\n\n  function ReleaseList(props) {\n    var _this;\n\n    _classCallCheck(this, ReleaseList);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"EditableCell\", function (_ref) {\n      var editing = _ref.editing,\n          dataIndex = _ref.dataIndex,\n          title = _ref.title,\n          inputType = _ref.inputType,\n          record = _ref.record,\n          index = _ref.index,\n          children = _ref.children,\n          restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n      // console.log(\"started 1\", children)\n      console.log(\"started 2\", record); // console.log(\"started 4\", dataIndex)\n      // console.log(\"started 5\", title)\n\n      var inputNode;\n\n      if (dataIndex == \"version\") {} else if (dataIndex == \"startDate\") {} else {\n        inputNode = __jsx(Input, {\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }\n        });\n      }\n\n      switch (dataIndex) {\n        case \"version\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.version,\n            name: \"version\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"startDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"startDate\",\n            defaultValue: moment(record.startDate, dateFormat),\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"endDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"endDate\",\n            defaultValue: moment(record.endDate, dateFormat),\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"description\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.description,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"status\":\n          inputNode = __jsx(Select, {\n            style: {\n              width: 120\n            },\n            name: \"status\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 21\n            }\n          }, __jsx(Option, {\n            value: \"inprogress\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 25\n            }\n          }, \"In Progress\"), __jsx(Option, {\n            value: \"unreleased\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 25\n            }\n          }, \"Unreleased\"), __jsx(Option, {\n            value: \"released\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 25\n            }\n          }, \"Released\")); // onChange = { handleChange }\n\n          break;\n\n        case \"progress\":\n          inputNode = __jsx(Slider, {\n            defaultValue: 30,\n            tooltipVisible: true,\n            name: \"progress\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        default: // code block\n\n      } // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n\n\n      return __jsx(\"td\", _extends({}, restProps, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }\n      }), editing ? __jsx(Form.Item, {\n        name: dataIndex,\n        style: {\n          margin: 0\n        },\n        rules: [{\n          required: true,\n          message: \"Please Input \".concat(title, \"!\")\n        }],\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }\n      }, inputNode) : children); // }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isEditing\", function (record) {\n      return record.key === _this.state.editingKey;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"cancel\", function () {\n      _this.setState({\n        editingKey: ''\n      });\n    });\n\n    _this.state = {\n      editingKey: '',\n      columns: [{\n        title: 'Version No',\n        dataIndex: 'version',\n        key: 'version',\n        render: function render(text) {\n          return __jsx(\"a\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 37\n            }\n          }, text);\n        },\n        editable: true\n      }, {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n        editable: true\n      }, {\n        title: 'Progress',\n        dataIndex: 'progress',\n        key: 'progress',\n        editable: true\n      }, {\n        title: 'Start Date',\n        dataIndex: 'startDate',\n        key: 'startDate',\n        editable: true\n      }, {\n        title: 'Release Date',\n        dataIndex: 'endDate',\n        key: 'endDate',\n        editable: true\n      }, {\n        title: 'Description',\n        dataIndex: 'description',\n        key: 'description',\n        editable: true\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: function render(text, record) {\n          var editable = _this.isEditing(record);\n\n          return editable ? __jsx(\"span\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 29\n            }\n          }, __jsx(\"a\", {\n            href: \"javascript:;\",\n            onClick: function onClick() {\n              return _this.save(record);\n            },\n            style: {\n              marginRight: 8\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 33\n            }\n          }, \"Save\"), __jsx(Popconfirm, {\n            title: \"Sure to cancel?\",\n            onConfirm: _this.cancel,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 33\n            }\n          }, __jsx(\"a\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 37\n            }\n          }, \"Cancel\"))) : __jsx(\"a\", {\n            disabled: _this.state.editingKey !== '',\n            onClick: function onClick() {\n              return _this.edit(record);\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 33\n            }\n          }, \"Edit\");\n        }\n      }],\n      listDataSrc: [],\n      isEdit: false\n    };\n    return _this;\n  }\n\n  _createClass(ReleaseList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\n      var getItems = chkItem == null ? [] : chkItem;\n      this.setState({\n        listDataSrc: getItems\n      });\n    }\n  }, {\n    key: \"save\",\n    value: function save(form, key) {\n      var _this2 = this;\n\n      console.log(\"Form submit\", key);\n      console.log(\"Form submit form\", form);\n      form.validateFields(function (error, row) {\n        if (error) {\n          return;\n        }\n\n        console.log(\"Form submit\", key);\n        console.log(\"Form submit form\", form);\n\n        var newData = _toConsumableArray(_this2.state.data);\n\n        var index = newData.findIndex(function (item) {\n          return key === item.key;\n        });\n\n        if (index > -1) {\n          var item = newData[index];\n          newData.splice(index, 1, _objectSpread({}, item, {}, row));\n\n          _this2.setState({\n            data: newData,\n            editingKey: ''\n          });\n        } else {\n          newData.push(row);\n\n          _this2.setState({\n            data: newData,\n            editingKey: ''\n          });\n        }\n      });\n    }\n  }, {\n    key: \"edit\",\n    value: function edit(record) {\n      this.setState({\n        editingKey: record.key\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var listDataSrc = this.state.listDataSrc;\n      var components = {\n        body: {\n          cell: this.EditableCell\n        }\n      };\n      var columns = this.state.columns.map(function (col) {\n        if (!col.editable) {\n          return col;\n        }\n\n        return _objectSpread({}, col, {\n          onCell: function onCell(record) {\n            return {\n              record: record,\n              inputType: col.dataIndex,\n              dataIndex: col.dataIndex,\n              title: col.title,\n              editing: _this3.isEditing(record)\n            };\n          }\n        });\n      });\n      return __jsx(React.Fragment, null, __jsx(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 17\n        }\n      }, __jsx(Table, {\n        columns: columns,\n        dataSource: listDataSrc,\n        components: components,\n        rowClassName: \"editable-row\",\n        pagination: {\n          onChange: this.cancel\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }\n      })), __jsx(AddParentRelease, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return ReleaseList;\n}(Component);\n\nexport { ReleaseList as default };","map":{"version":3,"sources":["D:/RandDChamber/LogwardAssignment/ProjectManagement/PMA/containers/parentReleaseList.js"],"names":["React","Component","useState","version","Table","Tag","Form","Input","InputNumber","Popconfirm","DatePicker","Select","Slider","AddParentRelease","moment","dateFormat","ReleaseList","props","editing","dataIndex","title","inputType","record","index","children","restProps","console","log","inputNode","startDate","endDate","description","width","margin","required","message","key","state","editingKey","setState","columns","render","text","editable","isEditing","save","marginRight","cancel","edit","listDataSrc","isEdit","chkItem","JSON","parse","localStorage","getItem","getItems","form","validateFields","error","row","newData","data","findIndex","item","splice","push","components","body","cell","EditableCell","map","col","onCell","onChange"],"mappings":"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","sourcesContent":["import React, { Component, useState, version } from \"react\";\r\nimport { Table, Tag, Form, Input, InputNumber, Popconfirm, DatePicker, Select, Slider } from 'antd';\r\nimport AddParentRelease from './addParentRelease';\r\nimport moment from 'moment';\r\n\r\nconst dateFormat = \"DD-MM-YYYY\";\r\n\r\n\r\n\r\n\r\nexport default class ReleaseList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            editingKey: '',\r\n            columns: [\r\n                {\r\n                    title: 'Version No',\r\n                    dataIndex: 'version',\r\n                    key: 'version',\r\n                    render: text => <a>{text}</a>,\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Status',\r\n                    dataIndex: 'status',\r\n                    key: 'status',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Progress',\r\n                    dataIndex: 'progress',\r\n                    key: 'progress',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Start Date',\r\n                    dataIndex: 'startDate',\r\n                    key: 'startDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Release Date',\r\n                    dataIndex: 'endDate',\r\n                    key: 'endDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Description',\r\n                    dataIndex: 'description',\r\n                    key: 'description',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Action',\r\n                    key: 'action',\r\n                    render: (text, record) => {\r\n                        const editable = this.isEditing(record);\r\n                        return editable ? (\r\n                            <span>\r\n                                <a\r\n                                    href=\"javascript:;\"\r\n                                    onClick={() => this.save(record)}\r\n                                    style={{\r\n                                        marginRight: 8,\r\n                                    }}\r\n                                >\r\n                                    Save\r\n                            </a>\r\n                                <Popconfirm title=\"Sure to cancel?\" onConfirm={this.cancel}>\r\n                                    <a>Cancel</a>\r\n                                </Popconfirm>\r\n                            </span>\r\n                        ) : (\r\n                                <a disabled={this.state.editingKey !== ''} onClick={() => this.edit(record)}>\r\n                                    Edit\r\n                                </a>\r\n                            );\r\n                    }\r\n                }\r\n            ],\r\n            listDataSrc: [],\r\n            isEdit: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\r\n        let getItems = chkItem == null ? [] : chkItem;\r\n        this.setState({\r\n            listDataSrc: getItems\r\n        })\r\n    }\r\n\r\n    EditableCell = ({\r\n        editing,\r\n        dataIndex,\r\n        title,\r\n        inputType,\r\n        record,\r\n        index,\r\n        children,\r\n        ...restProps\r\n    }) => {\r\n        // console.log(\"started 1\", children)\r\n        console.log(\"started 2\", record)\r\n        // console.log(\"started 4\", dataIndex)\r\n        // console.log(\"started 5\", title)\r\n        let inputNode;\r\n        if (dataIndex == \"version\") {\r\n\r\n        } else if (dataIndex == \"startDate\") {\r\n\r\n        } else {\r\n            inputNode = <Input />\r\n        }\r\n\r\n        switch (dataIndex) {\r\n            case \"version\":\r\n                inputNode = <Input defaultValue={record.version} name=\"version\" />\r\n                break;\r\n            case \"startDate\":\r\n                inputNode = <DatePicker name=\"startDate\" defaultValue={moment(record.startDate, dateFormat)} />\r\n                break;\r\n            case \"endDate\":\r\n                inputNode = <DatePicker name=\"endDate\" defaultValue={moment(record.endDate, dateFormat)} />\r\n                break;\r\n            case \"description\":\r\n                inputNode = <Input defaultValue={record.description} />\r\n                break;\r\n            case \"status\":\r\n                inputNode =\r\n                    <Select style={{ width: 120 }} name=\"status\">\r\n                        <Option value=\"inprogress\">In Progress</Option>\r\n                        <Option value=\"unreleased\">Unreleased</Option>\r\n                        <Option value=\"released\">Released</Option>\r\n                    </Select>\r\n                // onChange = { handleChange }\r\n                break;\r\n            case \"progress\":\r\n                inputNode = <Slider defaultValue={30} tooltipVisible name=\"progress\" />\r\n                break;\r\n            default:\r\n            // code block\r\n        }\r\n\r\n        // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\r\n        return (\r\n            <td {...restProps}>\r\n                {editing ?\r\n                    (\r\n                        <Form.Item\r\n                            name={dataIndex}\r\n                            style={{ margin: 0 }}\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: `Please Input ${title}!`,\r\n                                },\r\n                            ]}\r\n                        >\r\n                            {inputNode}\r\n                        </Form.Item>\r\n\r\n                    )\r\n\r\n                    : (\r\n                        children\r\n                    )}\r\n            </td>\r\n        );\r\n        // }\r\n    };\r\n\r\n    isEditing = record => record.key === this.state.editingKey;\r\n\r\n    cancel = () => {\r\n        this.setState({ editingKey: '' });\r\n    };\r\n\r\n    save(form, key) {\r\n        console.log(\"Form submit\", key)\r\n        console.log(\"Form submit form\", form)\r\n        form.validateFields((error, row) => {\r\n            if (error) {\r\n                return;\r\n            }\r\n            console.log(\"Form submit\", key)\r\n            console.log(\"Form submit form\", form)\r\n            const newData = [...this.state.data];\r\n            const index = newData.findIndex(item => key === item.key);\r\n            if (index > -1) {\r\n                const item = newData[index];\r\n                newData.splice(index, 1, {\r\n                    ...item,\r\n                    ...row,\r\n                });\r\n                this.setState({ data: newData, editingKey: '' });\r\n            } else {\r\n                newData.push(row);\r\n                this.setState({ data: newData, editingKey: '' });\r\n            }\r\n        });\r\n    }\r\n\r\n    edit(record) {\r\n        this.setState({ editingKey: record.key });\r\n    }\r\n\r\n    render() {\r\n        let { listDataSrc } = this.state;\r\n\r\n        const components = {\r\n            body: {\r\n                cell: this.EditableCell,\r\n            },\r\n        };\r\n\r\n        const columns = this.state.columns.map(col => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n            return {\r\n                ...col,\r\n                onCell: record => ({\r\n                    record,\r\n                    inputType: col.dataIndex,\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    editing: this.isEditing(record),\r\n                }),\r\n            };\r\n        });\r\n\r\n\r\n        return (\r\n            <>\r\n                <Form>\r\n                    <Table\r\n                        columns={columns}\r\n                        dataSource={listDataSrc}\r\n                        components={components}\r\n                        rowClassName=\"editable-row\"\r\n                        pagination={{\r\n                            onChange: this.cancel,\r\n                        }}\r\n                    />\r\n                </Form>\r\n\r\n\r\n                <AddParentRelease />\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}