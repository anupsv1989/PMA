{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\RandDChamber\\\\LogwardAssignment\\\\ProjectManagement\\\\PMA\\\\containers\\\\parentReleaseList.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, useState, version } from \"react\";\nimport { Table, Tag, Form, Input, InputNumber, Popconfirm, DatePicker, Select, Slider } from 'antd';\nimport AddParentRelease from './addParentRelease';\nimport moment from 'moment';\nvar dateFormat = \"DD-MM-YYYY\";\n\nvar ReleaseList = /*#__PURE__*/function (_Component) {\n  _inherits(ReleaseList, _Component);\n\n  var _super = _createSuper(ReleaseList);\n\n  function ReleaseList(props) {\n    var _this;\n\n    _classCallCheck(this, ReleaseList);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"EditableCell\", function (_ref) {\n      var editing = _ref.editing,\n          dataIndex = _ref.dataIndex,\n          title = _ref.title,\n          inputType = _ref.inputType,\n          record = _ref.record,\n          index = _ref.index,\n          children = _ref.children,\n          restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n      // console.log(\"started 1\", children)\n      console.log(\"started 2\", record); // console.log(\"started 4\", dataIndex)\n      // console.log(\"started 5\", title)\n\n      var inputNode;\n\n      if (record) {\n        _this.setStateofCurrentRow(record);\n      }\n\n      switch (dataIndex) {\n        case \"version\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.version,\n            name: \"version\",\n            onChange: _this.handleVersion,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"startDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"startDate\",\n            defaultValue: moment(record.startDate, dateFormat),\n            onChange: _this.handleStartDate,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"endDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"endDate\",\n            defaultValue: moment(record.endDate, dateFormat),\n            onChange: _this.handleEndDate,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"description\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.description,\n            onChange: _this.handleDescription,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"status\":\n          inputNode = __jsx(Select, {\n            style: {\n              width: 120\n            },\n            name: \"status\",\n            onChange: _this.handleChange,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 21\n            }\n          }, __jsx(Option, {\n            value: \"inprogress\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 25\n            }\n          }, \"In Progress\"), __jsx(Option, {\n            value: \"unreleased\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 25\n            }\n          }, \"Unreleased\"), __jsx(Option, {\n            value: \"released\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 25\n            }\n          }, \"Released\")); // onChange = { handleChange }\n\n          break;\n\n        case \"progress\":\n          inputNode = __jsx(Slider, {\n            defaultValue: 30,\n            tooltipVisible: true,\n            name: \"progress\",\n            onChange: _this.handleSlider,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        default: // code block\n\n      } // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n\n\n      return __jsx(\"td\", _extends({}, restProps, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }\n      }), editing ? __jsx(Form.Item, {\n        name: dataIndex,\n        style: {\n          margin: 0\n        },\n        rules: [{\n          required: true,\n          message: \"Please Input \".concat(title, \"!\")\n        }],\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 25\n        }\n      }, inputNode) : children); // }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (value) {\n      console.log(\"Vlaue\", value);\n\n      _this.setState({\n        editStatus: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setStateofCurrentRow\", function (record) {\n      _this.setState({\n        editVersion: record.version,\n        editStatus: record.status,\n        editProgress: record.progress,\n        editstartDate: record.startDate,\n        editEndDate: record.endDate,\n        editDescription: record.description\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSlider\", function (value) {\n      console.log(\"slider Vlaue\", value);\n\n      _this.setState({\n        editProgress: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStartDate\", function (date, str) {\n      console.log(\"sliceer sd str\", str);\n\n      _this.setState({\n        editstartDate: str\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEndDate\", function (date, str) {\n      console.log(\"sliceer ed\", str);\n\n      _this.setState({\n        editEndDate: str\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDescription\", function (e) {\n      console.log(\"sliceer desc\", e.target.value);\n\n      _this.setState({\n        editDescription: e.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleVersion\", function (e) {\n      console.log(\"sliceer vers\", e.target.value);\n\n      _this.setState({\n        editVersion: e.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isEditing\", function (record) {\n      return record.key === _this.state.editingKey;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"cancel\", function () {\n      _this.setState({\n        editingKey: ''\n      });\n    });\n\n    _this.state = {\n      editingKey: '',\n      editVersion: \"\",\n      editStatus: \"\",\n      editProgress: \"\",\n      editstartDate: \"\",\n      editEndDate: \"\",\n      editDescription: \"\",\n      columns: [{\n        title: 'Version No',\n        dataIndex: 'version',\n        key: 'version',\n        render: function render(text) {\n          return __jsx(\"a\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 37\n            }\n          }, text);\n        },\n        editable: true\n      }, {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n        editable: true\n      }, {\n        title: 'Progress',\n        dataIndex: 'progress',\n        key: 'progress',\n        editable: true\n      }, {\n        title: 'Start Date',\n        dataIndex: 'startDate',\n        key: 'startDate',\n        editable: true\n      }, {\n        title: 'Release Date',\n        dataIndex: 'endDate',\n        key: 'endDate',\n        editable: true\n      }, {\n        title: 'Description',\n        dataIndex: 'description',\n        key: 'description',\n        editable: true\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: function render(text, record) {\n          var editable = _this.isEditing(record);\n\n          return editable ? __jsx(\"span\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 29\n            }\n          }, __jsx(\"a\", {\n            href: \"javascript:;\",\n            onClick: function onClick() {\n              return _this.save(record);\n            },\n            style: {\n              marginRight: 8\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 33\n            }\n          }, \"Save\"), __jsx(Popconfirm, {\n            title: \"Sure to cancel?\",\n            onConfirm: _this.cancel,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 33\n            }\n          }, __jsx(\"a\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 37\n            }\n          }, \"Cancel\"))) : __jsx(\"a\", {\n            disabled: _this.state.editingKey !== '',\n            onClick: function onClick() {\n              return _this.edit(record);\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 33\n            }\n          }, \"Edit\");\n        }\n      }],\n      listDataSrc: [],\n      isEdit: false\n    };\n    return _this;\n  }\n\n  _createClass(ReleaseList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\n      var getItems = chkItem == null ? [] : chkItem;\n      this.setState({\n        listDataSrc: getItems\n      });\n    }\n  }, {\n    key: \"save\",\n    value: function save(record) {\n      console.log(\"Form submit\", record);\n      var _this$state = this.state,\n          editVersion = _this$state.editVersion,\n          editstartDate = _this$state.editstartDate,\n          editEndDate = _this$state.editEndDate,\n          editDescription = _this$state.editDescription,\n          editStatus = _this$state.editStatus,\n          editProgress = _this$state.editProgress,\n          listDataSrc = _this$state.listDataSrc; // let arr = this.state.localPRItems;\n\n      var prObj = {\n        key: record.key,\n        version: editVersion,\n        status: editStatus,\n        progress: editProgress,\n        startDate: editstartDate,\n        endDate: editEndDate,\n        description: editDescription\n      };\n      console.log(\"Presnet Obj\", prObj);\n      console.log(\"Presnet Obj list form before\", listDataSrc);\n      listDataSrc.map(function (item) {\n        if (item.key == record.key) {\n          item.key = record.key;\n          item.version = editVersion;\n          item.status = editStatus;\n          item.progress = editProgress;\n          item.startDate = editstartDate;\n          item.endDate = editEndDate;\n          item.description = editDescription;\n        }\n      });\n      console.log(\"Presnet Obj list form after \", listDataSrc);\n      localStorage.setItem('parentReleaseData', JSON.stringify(listDataSrc)); // form.validateFields((error, row) => {\n      //     if (error) {\n      //         return;\n      //     }\n      //     console.log(\"Form submit\", key)\n      //     console.log(\"Form submit form\", form)\n      //     const newData = [...this.state.data];\n      //     const index = newData.findIndex(item => key === item.key);\n      //     if (index > -1) {\n      //         const item = newData[index];\n      //         newData.splice(index, 1, {\n      //             ...item,\n      //             ...row,\n      //         });\n      //         this.setState({ data: newData, editingKey: '' });\n      //     } else {\n      //         newData.push(row);\n      //         this.setState({ data: newData, editingKey: '' });\n      //     }\n      // });\n    }\n  }, {\n    key: \"edit\",\n    value: function edit(record) {\n      this.setState({\n        editingKey: record.key\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var listDataSrc = this.state.listDataSrc;\n      var components = {\n        body: {\n          cell: this.EditableCell\n        }\n      };\n      var columns = this.state.columns.map(function (col) {\n        if (!col.editable) {\n          return col;\n        }\n\n        return _objectSpread({}, col, {\n          onCell: function onCell(record) {\n            return {\n              record: record,\n              inputType: col.dataIndex,\n              dataIndex: col.dataIndex,\n              title: col.title,\n              editing: _this2.isEditing(record)\n            };\n          }\n        });\n      });\n      return __jsx(React.Fragment, null, __jsx(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 17\n        }\n      }, __jsx(Table, {\n        columns: columns,\n        dataSource: listDataSrc,\n        components: components,\n        rowClassName: \"editable-row\",\n        pagination: {\n          onChange: this.cancel\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 21\n        }\n      })), __jsx(AddParentRelease, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return ReleaseList;\n}(Component);\n\nexport { ReleaseList as default };","map":{"version":3,"sources":["D:/RandDChamber/LogwardAssignment/ProjectManagement/PMA/containers/parentReleaseList.js"],"names":["React","Component","useState","version","Table","Tag","Form","Input","InputNumber","Popconfirm","DatePicker","Select","Slider","AddParentRelease","moment","dateFormat","ReleaseList","props","editing","dataIndex","title","inputType","record","index","children","restProps","console","log","inputNode","setStateofCurrentRow","handleVersion","startDate","handleStartDate","endDate","handleEndDate","description","handleDescription","width","handleChange","handleSlider","margin","required","message","value","setState","editStatus","editVersion","status","editProgress","progress","editstartDate","editEndDate","editDescription","date","str","e","target","key","state","editingKey","columns","render","text","editable","isEditing","save","marginRight","cancel","edit","listDataSrc","isEdit","chkItem","JSON","parse","localStorage","getItem","getItems","prObj","map","item","setItem","stringify","components","body","cell","EditableCell","col","onCell","onChange"],"mappings":"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","sourcesContent":["import React, { Component, useState, version } from \"react\";\r\nimport { Table, Tag, Form, Input, InputNumber, Popconfirm, DatePicker, Select, Slider } from 'antd';\r\nimport AddParentRelease from './addParentRelease';\r\nimport moment from 'moment';\r\n\r\nconst dateFormat = \"DD-MM-YYYY\";\r\n\r\n\r\n\r\n\r\nexport default class ReleaseList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            editingKey: '',\r\n            editVersion: \"\",\r\n            editStatus: \"\",\r\n            editProgress: \"\",\r\n            editstartDate: \"\",\r\n            editEndDate: \"\",\r\n            editDescription: \"\",\r\n            columns: [\r\n                {\r\n                    title: 'Version No',\r\n                    dataIndex: 'version',\r\n                    key: 'version',\r\n                    render: text => <a>{text}</a>,\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Status',\r\n                    dataIndex: 'status',\r\n                    key: 'status',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Progress',\r\n                    dataIndex: 'progress',\r\n                    key: 'progress',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Start Date',\r\n                    dataIndex: 'startDate',\r\n                    key: 'startDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Release Date',\r\n                    dataIndex: 'endDate',\r\n                    key: 'endDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Description',\r\n                    dataIndex: 'description',\r\n                    key: 'description',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Action',\r\n                    key: 'action',\r\n                    render: (text, record) => {\r\n                        const editable = this.isEditing(record);\r\n                        return editable ? (\r\n                            <span>\r\n                                <a\r\n                                    href=\"javascript:;\"\r\n                                    onClick={() => this.save(record)}\r\n                                    style={{\r\n                                        marginRight: 8,\r\n                                    }}\r\n                                >\r\n                                    Save\r\n                            </a>\r\n                                <Popconfirm title=\"Sure to cancel?\" onConfirm={this.cancel}>\r\n                                    <a>Cancel</a>\r\n                                </Popconfirm>\r\n                            </span>\r\n                        ) : (\r\n                                <a disabled={this.state.editingKey !== ''} onClick={() => this.edit(record)}>\r\n                                    Edit\r\n                                </a>\r\n                            );\r\n                    }\r\n                }\r\n            ],\r\n            listDataSrc: [],\r\n            isEdit: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\r\n        let getItems = chkItem == null ? [] : chkItem;\r\n        this.setState({\r\n            listDataSrc: getItems\r\n        })\r\n    }\r\n\r\n    EditableCell = ({\r\n        editing,\r\n        dataIndex,\r\n        title,\r\n        inputType,\r\n        record,\r\n        index,\r\n        children,\r\n        ...restProps\r\n    }) => {\r\n        // console.log(\"started 1\", children)\r\n        console.log(\"started 2\", record)\r\n        // console.log(\"started 4\", dataIndex)\r\n        // console.log(\"started 5\", title)\r\n        let inputNode;\r\n\r\n        if (record) {\r\n            this.setStateofCurrentRow(record);\r\n        }\r\n\r\n\r\n        switch (dataIndex) {\r\n            case \"version\":\r\n                inputNode = <Input defaultValue={record.version} name=\"version\" onChange={this.handleVersion} />\r\n                break;\r\n            case \"startDate\":\r\n                inputNode = <DatePicker name=\"startDate\" defaultValue={moment(record.startDate, dateFormat)} onChange={this.handleStartDate} />\r\n                break;\r\n            case \"endDate\":\r\n                inputNode = <DatePicker name=\"endDate\" defaultValue={moment(record.endDate, dateFormat)} onChange={this.handleEndDate} />\r\n                break;\r\n            case \"description\":\r\n                inputNode = <Input defaultValue={record.description} onChange={this.handleDescription} />\r\n                break;\r\n            case \"status\":\r\n                inputNode =\r\n                    <Select style={{ width: 120 }} name=\"status\" onChange={this.handleChange}>\r\n                        <Option value=\"inprogress\">In Progress</Option>\r\n                        <Option value=\"unreleased\">Unreleased</Option>\r\n                        <Option value=\"released\">Released</Option>\r\n                    </Select>\r\n                // onChange = { handleChange }\r\n                break;\r\n            case \"progress\":\r\n                inputNode = <Slider defaultValue={30} tooltipVisible name=\"progress\" onChange={this.handleSlider} />\r\n                break;\r\n            default:\r\n            // code block\r\n        }\r\n\r\n        // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\r\n        return (\r\n            <td {...restProps}>\r\n                {editing ?\r\n                    (\r\n                        <Form.Item\r\n                            name={dataIndex}\r\n                            style={{ margin: 0 }}\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: `Please Input ${title}!`,\r\n                                },\r\n                            ]}\r\n                        >\r\n                            {inputNode}\r\n                        </Form.Item>\r\n\r\n                    )\r\n\r\n                    : (\r\n                        children\r\n                    )}\r\n            </td>\r\n        );\r\n        // }\r\n    };\r\n\r\n    handleChange = (value) => {\r\n        console.log(\"Vlaue\", value)\r\n        this.setState({\r\n            editStatus: value\r\n        })\r\n    }\r\n\r\n    setStateofCurrentRow = (record) => {\r\n        this.setState({\r\n            editVersion: record.version,\r\n            editStatus: record.status,\r\n            editProgress: record.progress,\r\n            editstartDate: record.startDate,\r\n            editEndDate: record.endDate,\r\n            editDescription: record.description\r\n        })\r\n    }\r\n\r\n    handleSlider = (value) => {\r\n        console.log(\"slider Vlaue\", value);\r\n        this.setState({\r\n            editProgress: value\r\n        })\r\n    }\r\n    handleStartDate = (date, str) => {\r\n        console.log(\"sliceer sd str\", str)\r\n        this.setState({\r\n            editstartDate: str\r\n        })\r\n    }\r\n    handleEndDate = (date, str) => {\r\n        console.log(\"sliceer ed\", str)\r\n        this.setState({\r\n            editEndDate: str\r\n        })\r\n    }\r\n    handleDescription = (e) => {\r\n        console.log(\"sliceer desc\", e.target.value)\r\n        this.setState({\r\n            editDescription: e.target.value\r\n        })\r\n    }\r\n    handleVersion = (e) => {\r\n        console.log(\"sliceer vers\", e.target.value)\r\n        this.setState({\r\n            editVersion: e.target.value\r\n        })\r\n    }\r\n\r\n    isEditing = record => record.key === this.state.editingKey;\r\n\r\n    cancel = () => {\r\n        this.setState({ editingKey: '' });\r\n    };\r\n\r\n    save(record) {\r\n        console.log(\"Form submit\", record)\r\n        let { editVersion, editstartDate, editEndDate, editDescription, editStatus, editProgress, listDataSrc } = this.state;\r\n\r\n        // let arr = this.state.localPRItems;\r\n        let prObj = {\r\n            key: record.key,\r\n            version: editVersion,\r\n            status: editStatus,\r\n            progress: editProgress,\r\n            startDate: editstartDate,\r\n            endDate: editEndDate,\r\n            description: editDescription\r\n        }\r\n\r\n        console.log(\"Presnet Obj\", prObj)\r\n        console.log(\"Presnet Obj list form before\", listDataSrc)\r\n\r\n        listDataSrc.map(item => {\r\n            if (item.key == record.key) {\r\n                item.key = record.key;\r\n                item.version = editVersion;\r\n                item.status = editStatus;\r\n                item.progress = editProgress;\r\n                item.startDate = editstartDate;\r\n                item.endDate = editEndDate;\r\n                item.description = editDescription;\r\n            }\r\n        })\r\n        console.log(\"Presnet Obj list form after \", listDataSrc)\r\n        localStorage.setItem('parentReleaseData', JSON.stringify(listDataSrc))\r\n\r\n        // form.validateFields((error, row) => {\r\n        //     if (error) {\r\n        //         return;\r\n        //     }\r\n        //     console.log(\"Form submit\", key)\r\n        //     console.log(\"Form submit form\", form)\r\n        //     const newData = [...this.state.data];\r\n        //     const index = newData.findIndex(item => key === item.key);\r\n        //     if (index > -1) {\r\n        //         const item = newData[index];\r\n        //         newData.splice(index, 1, {\r\n        //             ...item,\r\n        //             ...row,\r\n        //         });\r\n        //         this.setState({ data: newData, editingKey: '' });\r\n        //     } else {\r\n        //         newData.push(row);\r\n        //         this.setState({ data: newData, editingKey: '' });\r\n        //     }\r\n        // });\r\n    }\r\n\r\n    edit(record) {\r\n        this.setState({ editingKey: record.key });\r\n    }\r\n\r\n    render() {\r\n        let { listDataSrc } = this.state;\r\n\r\n        const components = {\r\n            body: {\r\n                cell: this.EditableCell,\r\n            },\r\n        };\r\n\r\n        const columns = this.state.columns.map(col => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n            return {\r\n                ...col,\r\n                onCell: record => ({\r\n                    record,\r\n                    inputType: col.dataIndex,\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    editing: this.isEditing(record),\r\n                }),\r\n            };\r\n        });\r\n\r\n\r\n        return (\r\n            <>\r\n                <Form>\r\n                    <Table\r\n                        columns={columns}\r\n                        dataSource={listDataSrc}\r\n                        components={components}\r\n                        rowClassName=\"editable-row\"\r\n                        pagination={{\r\n                            onChange: this.cancel,\r\n                        }}\r\n                    />\r\n                </Form>\r\n\r\n\r\n                <AddParentRelease />\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}