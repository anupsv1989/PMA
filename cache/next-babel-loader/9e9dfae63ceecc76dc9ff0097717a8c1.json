{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Component } from \"react\";\nimport { Button } from \"antd\";\nimport HooksAsFunction from \"./hooksAsFunction\";\n\nvar MyHooks = /*#__PURE__*/function (_Component) {\n  _inherits(MyHooks, _Component);\n\n  var _super = _createSuper(MyHooks);\n\n  function MyHooks(props) {\n    var _this;\n\n    _classCallCheck(this, MyHooks);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"incrementCounter\", function () {\n      _this.setState(function (prevVal) {\n        return {\n          conterValue: prevVal.conterValue + 1\n        };\n      });\n    });\n\n    _this.state = {\n      conterValue: 0\n    };\n    return _this;\n  } //we get a preval from states and which always holds the preveious val\n  //i.e passed as an argumet to get the prev val and count is increment from then.\n  //the same logic but different syntax can be seen in functional hooks component.\n\n\n  _createClass(MyHooks, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(React.Fragment, null, __jsx(\"div\", null, \"We cannot hooks here as this is a class component.\"), __jsx(Button, {\n        onClick: this.incrementCounter\n      }, \" Counter + \"), __jsx(\"h4\", null, \"Counter Value = \", this.state.conterValue), __jsx(\"hr\", null), __jsx(\"div\", null, \"How and where hooks work ?\"), __jsx(HooksAsFunction, null));\n    }\n  }]);\n\n  return MyHooks;\n}(Component);\n\nexport { MyHooks as default };","map":null,"metadata":{},"sourceType":"module"}