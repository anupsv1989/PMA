{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchUser),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(onFetchItem),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\n// import { delay } from \"redux-saga\";\nimport { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\n\nfunction fetchUser(action) {\n  return _regeneratorRuntime.wrap(function fetchUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return put({\n            type: \"USER_FETCH_SUCCEEDED\",\n            user: user\n          });\n\n        case 3:\n          _context.next = 9;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 9;\n          return put({\n            type: \"USER_FETCH_FAILED\",\n            message: _context.t0.message\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 5]]);\n}\n\nfunction onFetchItem() {\n  var res;\n  return _regeneratorRuntime.wrap(function onFetchItem$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          // yield delay(4000);\n          console.log(\"Inside sAga\"); // yield put({ type: \"DELETE_ITEM_SUCCESS\", value: 1 });\n\n          res = localStorage.getItem(\"parentReleaseData\");\n          _context2.next = 4;\n          return put({\n            type: \"FETCH_ITEM_SUCCESS\",\n            result: res\n          });\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // export function* watchAgeUp() {\n//     yield takeLatest(\"AGE_UP\", ageUpAsync);\n// }\n\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery(\"USER_FETCH_REQUESTED\", fetchUser);\n\n        case 2:\n          _context3.next = 4;\n          return takeEvery(\"FETCH_ITEM\", onFetchItem);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":null,"metadata":{},"sourceType":"module"}