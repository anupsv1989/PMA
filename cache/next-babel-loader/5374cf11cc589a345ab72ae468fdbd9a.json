{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\RandDChamber\\\\LogwardAssignment\\\\ProjectManagement\\\\PMA\\\\containers\\\\ChildReleaseList.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { Table, Popconfirm, Popover, Row, Col, Button, Tag, Input, Select, Slider, DatePicker, Form, Progress } from \"antd\";\nimport { connect } from \"react-redux\";\nimport actions from \"../redux/action\";\nimport moment from 'moment';\nimport { EllipsisOutlined, EditOutlined } from '@ant-design/icons';\nimport { statusDisplay, progressDisplay, dateFormat } from \"../commons/helpers\";\nvar onFetchItem = actions.onFetchItem;\n\nvar ChildReleaseList = /*#__PURE__*/function (_Component) {\n  _inherits(ChildReleaseList, _Component);\n\n  var _super = _createSuper(ChildReleaseList);\n\n  function ChildReleaseList(props) {\n    var _this;\n\n    _classCallCheck(this, ChildReleaseList);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"isEditing\", function (record) {\n      return record.key === _this.state.editingKey;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"EditableCell\", function (_ref) {\n      var editing = _ref.editing,\n          dataIndex = _ref.dataIndex,\n          title = _ref.title,\n          inputType = _ref.inputType,\n          record = _ref.record,\n          index = _ref.index,\n          children = _ref.children,\n          restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n      // console.log(\"started 1\", children)\n      // console.log(\"started 2\", record)\n      // console.log(\"started 4\", dataIndex)\n      // console.log(\"started 5\", title)\n      var inputNode;\n\n      switch (dataIndex) {\n        case \"version\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.version,\n            name: \"version\",\n            onChange: _this.handleVersion,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"startDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"startDate\",\n            defaultValue: moment(record.startDate, dateFormat),\n            onChange: _this.handleStartDate,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"endDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"endDate\",\n            defaultValue: moment(record.endDate, dateFormat),\n            onChange: _this.handleEndDate,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"description\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.description,\n            onChange: _this.handleDescription,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"status\":\n          inputNode = statusDisplay(_this.state.editStatus); // inputNode = this.fetchStatusDisp(record.status);\n\n          break;\n\n        case \"progress\":\n          inputNode = __jsx(Slider, {\n            defaultValue: record.progress ? record.progress : 0,\n            tooltipVisible: true,\n            name: \"progress\",\n            onChange: _this.handleSlider,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 29\n            }\n          });\n          break;\n      } // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n\n\n      return __jsx(\"td\", _extends({}, restProps, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }\n      }), editing ? __jsx(Form.Item, {\n        name: dataIndex,\n        style: {\n          margin: 0\n        },\n        rules: [{\n          required: true,\n          message: \"Please Input \".concat(title, \"!\")\n        }],\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }\n      }, inputNode) : children); // }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchStatusDisp\", function (rec) {});\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (value) {\n      console.log(\"Vlaue\", value);\n\n      _this.setState({\n        editStatus: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSlider\", function (value) {\n      var releaseType = \"IN PROGRESS\";\n\n      if (value == 0) {\n        releaseType = \"IN PROGRESS\";\n      } else if (value == 100) {\n        releaseType = \"RELEASED\";\n      } else {\n        releaseType = \"UNRELEASED\";\n      }\n\n      _this.setState({\n        editProgress: value,\n        editStatus: releaseType\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStartDate\", function (date, str) {\n      console.log(\"sliceer sd str\", str);\n\n      _this.setState({\n        editstartDate: str\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEndDate\", function (date, str) {\n      console.log(\"sliceer ed\", str);\n\n      _this.setState({\n        editEndDate: str\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDescription\", function (e) {\n      console.log(\"sliceer desc\", e.target.value);\n\n      _this.setState({\n        editDescription: e.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"cancel\", function () {\n      _this.setState({\n        editingKey: ''\n      });\n    });\n\n    _this.state = {\n      editStatus: \"IN PROGRESS\",\n      editingKey: '',\n      editProgress: \"\",\n      editstartDate: \"\",\n      editEndDate: \"\",\n      editDescription: \"\",\n      childColumns: [{\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n        editable: true,\n        render: function render(rec) {\n          return statusDisplay(rec);\n        }\n      }, {\n        title: 'Progess',\n        dataIndex: 'progress',\n        key: 'progress',\n        editable: true,\n        render: function render(rec) {\n          return progressDisplay(rec);\n        }\n      }, {\n        title: 'Start Date',\n        dataIndex: 'startDate',\n        key: 'startDate',\n        editable: true\n      }, {\n        title: 'End Date',\n        dataIndex: 'endDate',\n        key: 'endDate',\n        editable: true\n      }, {\n        title: 'Description',\n        dataIndex: 'description',\n        key: 'description',\n        editable: true\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: function render(text, record) {\n          var editable = _this.isEditing(record);\n\n          return editable ? __jsx(\"span\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }\n          }, __jsx(\"a\", {\n            href: \"javascript:;\",\n            onClick: function onClick() {\n              return _this.save(record);\n            },\n            style: {\n              marginRight: 8\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 33\n            }\n          }, \"Save\"), __jsx(Popconfirm, {\n            title: \"Sure to cancel?\",\n            onConfirm: _this.cancel,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 33\n            }\n          }, __jsx(\"a\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 37\n            }\n          }, \"Cancel\"))) : __jsx(EditOutlined, {\n            disabled: _this.state.editingKey !== '',\n            onClick: function onClick() {\n              return _this.edit(record);\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 33\n            }\n          });\n        }\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(ChildReleaseList, [{\n    key: \"save\",\n    value: function save(record) {\n      console.log(\"Form submit\", record);\n      console.log(\"Form submit this data\", this.props.thisData);\n      var _this$state = this.state,\n          editstartDate = _this$state.editstartDate,\n          editEndDate = _this$state.editEndDate,\n          editDescription = _this$state.editDescription,\n          editStatus = _this$state.editStatus,\n          editProgress = _this$state.editProgress;\n      var temp = this.props.thisData;\n      temp.childRelease.map(function (item) {\n        if (item.key == record.key) {\n          item.key = record.key;\n          item.status = editStatus != \"\" ? editStatus : item.status;\n          item.progress = editProgress != \"\" ? editProgress : item.progress;\n          item.startDate = editstartDate != \"\" ? editstartDate : item.startDate;\n          item.endDate = editEndDate != \"\" ? editEndDate : item.endDate;\n          item.description = editDescription != \"\" ? editDescription : item.description;\n        }\n      });\n      var arr = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\n      var index = arr.map(function (x) {\n        return x.key;\n      }).indexOf(temp.key);\n      arr.splice(index, 1);\n      var addData = temp;\n      arr.unshift(addData); // debugger;\n\n      console.log(\"Presnet Obj list form after \", arr);\n      localStorage.setItem('parentReleaseData', JSON.stringify(arr));\n      this.setState({\n        editStatus: \"\",\n        editProgress: \"\",\n        editstartDate: \"\",\n        editEndDate: \"\",\n        editDescription: \"\"\n      });\n      this.props.onFetchItem();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      console.log(\"NExgt Props\", nextProps);\n      var dataFromLS = nextProps.dataFromLS;\n      console.log(\"data from lcoal\", dataFromLS);\n\n      if (dataFromLS) {\n        this.setState({\n          listDataSrc: dataFromLS,\n          editingKey: \"\"\n        }, function () {\n          console.log(\"After setting state :\", _this2.state.listDataSrc);\n        });\n      }\n    }\n  }, {\n    key: \"edit\",\n    value: function edit(record) {\n      this.setState({\n        editingKey: record.key,\n        editStatus: record.status\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var components = {\n        body: {\n          cell: this.EditableCell\n        }\n      };\n      var columns = this.state.childColumns.map(function (col) {\n        if (!col.editable) {\n          return col;\n        }\n\n        return _objectSpread({}, col, {\n          onCell: function onCell(record) {\n            return {\n              record: record,\n              inputType: col.dataIndex,\n              dataIndex: col.dataIndex,\n              title: col.title,\n              editing: _this3.isEditing(record)\n            };\n          }\n        });\n      });\n      return __jsx(Table, {\n        columns: columns,\n        dataSource: this.props.thisData.childRelease,\n        pagination: false,\n        components: components,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }\n      });\n    }\n  }]);\n\n  return ChildReleaseList;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    dataFromLS: state.dataFromLS\n  };\n};\n\nexport default connect(mapStateToProps, {\n  onFetchItem: onFetchItem\n})(ChildReleaseList);","map":{"version":3,"sources":["D:/RandDChamber/LogwardAssignment/ProjectManagement/PMA/containers/ChildReleaseList.js"],"names":["React","Component","Table","Popconfirm","Popover","Row","Col","Button","Tag","Input","Select","Slider","DatePicker","Form","Progress","connect","actions","moment","EllipsisOutlined","EditOutlined","statusDisplay","progressDisplay","dateFormat","onFetchItem","ChildReleaseList","props","record","key","state","editingKey","editing","dataIndex","title","inputType","index","children","restProps","inputNode","version","handleVersion","startDate","handleStartDate","endDate","handleEndDate","description","handleDescription","editStatus","progress","handleSlider","margin","required","message","rec","value","console","log","setState","releaseType","editProgress","date","str","editstartDate","editEndDate","e","target","editDescription","childColumns","editable","render","text","isEditing","save","marginRight","cancel","edit","thisData","temp","childRelease","map","item","status","arr","JSON","parse","localStorage","getItem","x","indexOf","splice","addData","unshift","setItem","stringify","nextProps","dataFromLS","listDataSrc","components","body","cell","EditableCell","columns","col","onCell","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n    Table, Popconfirm, Popover, Row, Col, Button, Tag,\r\n    Input, Select, Slider, DatePicker, Form, Progress\r\n} from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"../redux/action\";\r\nimport moment from 'moment';\r\nimport { EllipsisOutlined, EditOutlined } from '@ant-design/icons';\r\nimport { statusDisplay, progressDisplay, dateFormat } from \"../commons/helpers\";\r\nconst { onFetchItem } = actions;\r\n\r\nclass ChildReleaseList extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            editStatus: \"IN PROGRESS\",\r\n            editingKey: '',\r\n            editProgress: \"\",\r\n            editstartDate: \"\",\r\n            editEndDate: \"\",\r\n            editDescription: \"\",\r\n            childColumns: [\r\n\r\n                {\r\n                    title: 'Status',\r\n                    dataIndex: 'status',\r\n                    key: 'status',\r\n                    editable: true,\r\n                    render: (rec) => statusDisplay(rec)\r\n                },\r\n                {\r\n                    title: 'Progess',\r\n                    dataIndex: 'progress',\r\n                    key: 'progress',\r\n                    editable: true,\r\n                    render: (rec) => progressDisplay(rec)\r\n                },\r\n                {\r\n                    title: 'Start Date',\r\n                    dataIndex: 'startDate',\r\n                    key: 'startDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'End Date',\r\n                    dataIndex: 'endDate',\r\n                    key: 'endDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Description',\r\n                    dataIndex: 'description',\r\n                    key: 'description',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Action',\r\n                    key: 'action',\r\n                    render: (text, record) => {\r\n                        const editable = this.isEditing(record);\r\n\r\n                        return editable ? (\r\n                            <span>\r\n                                <a\r\n                                    href=\"javascript:;\"\r\n                                    onClick={() => this.save(record)}\r\n                                    style={{\r\n                                        marginRight: 8,\r\n                                    }}\r\n                                >\r\n                                    Save\r\n                            </a>\r\n                                <Popconfirm title=\"Sure to cancel?\" onConfirm={this.cancel} >\r\n                                    <a>Cancel</a>\r\n                                </Popconfirm>\r\n                            </span>\r\n                        ) : (\r\n                                <EditOutlined disabled={this.state.editingKey !== ''} onClick={() => this.edit(record)} />\r\n                            );\r\n                    }\r\n                }\r\n            ],\r\n        }\r\n    }\r\n\r\n\r\n\r\n    isEditing = record => record.key === this.state.editingKey;\r\n\r\n    EditableCell = ({\r\n        editing,\r\n        dataIndex,\r\n        title,\r\n        inputType,\r\n        record,\r\n        index,\r\n        children,\r\n        ...restProps\r\n    }) => {\r\n        // console.log(\"started 1\", children)\r\n        // console.log(\"started 2\", record)\r\n        // console.log(\"started 4\", dataIndex)\r\n        // console.log(\"started 5\", title)\r\n        let inputNode;\r\n\r\n\r\n\r\n        switch (dataIndex) {\r\n            case \"version\":\r\n                inputNode = <Input defaultValue={record.version} name=\"version\" onChange={this.handleVersion} />\r\n                break;\r\n            case \"startDate\":\r\n                inputNode = <DatePicker name=\"startDate\" defaultValue={moment(record.startDate, dateFormat)} onChange={this.handleStartDate} />\r\n                break;\r\n            case \"endDate\":\r\n                inputNode = <DatePicker name=\"endDate\" defaultValue={moment(record.endDate, dateFormat)} onChange={this.handleEndDate} />\r\n                break;\r\n            case \"description\":\r\n                inputNode = <Input defaultValue={record.description} onChange={this.handleDescription} />\r\n                break;\r\n            case \"status\":\r\n                inputNode = statusDisplay(this.state.editStatus)\r\n                // inputNode = this.fetchStatusDisp(record.status);\r\n\r\n                break;\r\n            case \"progress\":\r\n                inputNode = <Slider defaultValue={record.progress ? record.progress : 0} tooltipVisible name=\"progress\" onChange={this.handleSlider} />\r\n                break;\r\n        }\r\n\r\n        // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\r\n        return (\r\n            <td {...restProps}>\r\n                {editing ?\r\n                    (\r\n                        <Form.Item\r\n                            name={dataIndex}\r\n                            style={{ margin: 0 }}\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: `Please Input ${title}!`,\r\n                                },\r\n                            ]}\r\n                        >\r\n                            {inputNode}\r\n                        </Form.Item>\r\n\r\n                    )\r\n\r\n                    : (\r\n                        children\r\n                    )}\r\n            </td>\r\n        );\r\n        // }\r\n    };\r\n\r\n    fetchStatusDisp = (rec) => {\r\n\r\n\r\n    }\r\n\r\n    handleChange = (value) => {\r\n        console.log(\"Vlaue\", value)\r\n        this.setState({\r\n            editStatus: value\r\n        })\r\n    }\r\n\r\n    handleSlider = (value) => {\r\n        let releaseType = \"IN PROGRESS\"\r\n        if (value == 0) {\r\n            releaseType = \"IN PROGRESS\"\r\n        } else if (value == 100) {\r\n            releaseType = \"RELEASED\"\r\n        } else {\r\n            releaseType = \"UNRELEASED\"\r\n        }\r\n        this.setState({\r\n            editProgress: value,\r\n            editStatus: releaseType\r\n        })\r\n    }\r\n    handleStartDate = (date, str) => {\r\n        console.log(\"sliceer sd str\", str)\r\n        this.setState({\r\n            editstartDate: str\r\n        })\r\n    }\r\n    handleEndDate = (date, str) => {\r\n        console.log(\"sliceer ed\", str)\r\n        this.setState({\r\n            editEndDate: str\r\n        })\r\n    }\r\n    handleDescription = (e) => {\r\n        console.log(\"sliceer desc\", e.target.value)\r\n        this.setState({\r\n            editDescription: e.target.value\r\n        })\r\n    }\r\n\r\n    save(record) {\r\n        console.log(\"Form submit\", record)\r\n        console.log(\"Form submit this data\", this.props.thisData)\r\n        let { editstartDate, editEndDate, editDescription, editStatus, editProgress } = this.state;\r\n        let temp = this.props.thisData;\r\n        temp.childRelease.map(item => {\r\n            if (item.key == record.key) {\r\n                item.key = record.key;\r\n                item.status = editStatus != \"\" ? editStatus : item.status;\r\n                item.progress = editProgress != \"\" ? editProgress : item.progress;\r\n                item.startDate = editstartDate != \"\" ? editstartDate : item.startDate;\r\n                item.endDate = editEndDate != \"\" ? editEndDate : item.endDate;\r\n                item.description = editDescription != \"\" ? editDescription : item.description;\r\n            }\r\n        })\r\n\r\n        let arr = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\r\n\r\n        let index = arr.map(x => {\r\n            return x.key;\r\n        }).indexOf(temp.key);\r\n        arr.splice(index, 1);\r\n        let addData = temp;\r\n        arr.unshift(addData);\r\n\r\n        // debugger;\r\n        console.log(\"Presnet Obj list form after \", arr)\r\n        localStorage.setItem('parentReleaseData', JSON.stringify(arr));\r\n        this.setState({\r\n            editStatus: \"\",\r\n            editProgress: \"\",\r\n            editstartDate: \"\",\r\n            editEndDate: \"\",\r\n            editDescription: \"\",\r\n        })\r\n        this.props.onFetchItem();\r\n    }\r\n\r\n\r\n\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        console.log(\"NExgt Props\", nextProps);\r\n        let { dataFromLS } = nextProps\r\n        console.log(\"data from lcoal\", dataFromLS);\r\n\r\n        if (dataFromLS) {\r\n            this.setState({\r\n                listDataSrc: dataFromLS,\r\n                editingKey: \"\"\r\n            }, () => {\r\n                console.log(\"After setting state :\", this.state.listDataSrc)\r\n            })\r\n        }\r\n    }\r\n\r\n    cancel = () => {\r\n        this.setState({ editingKey: '' });\r\n    };\r\n\r\n    edit(record) {\r\n        this.setState({\r\n            editingKey: record.key,\r\n            editStatus: record.status\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const components = {\r\n            body: {\r\n                cell: this.EditableCell,\r\n            },\r\n        };\r\n\r\n        const columns = this.state.childColumns.map(col => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n            return {\r\n                ...col,\r\n                onCell: record => ({\r\n                    record,\r\n                    inputType: col.dataIndex,\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    editing: this.isEditing(record),\r\n                }),\r\n            };\r\n        });\r\n\r\n        return (\r\n\r\n            <Table\r\n                columns={columns}\r\n                dataSource={this.props.thisData.childRelease}\r\n                pagination={false}\r\n                components={components}\r\n            />\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        dataFromLS: state.dataFromLS\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps, { onFetchItem }\r\n)(ChildReleaseList);\r\n"]},"metadata":{},"sourceType":"module"}