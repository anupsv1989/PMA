{"ast":null,"code":"// import { delay } from \"redux-saga\";\nimport { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\n\nfunction* fetchUser(action) {\n  try {\n    // const user = yield call(Api.fetchUser, action.payload.userId);\n    yield put({\n      type: \"USER_FETCH_SUCCEEDED\",\n      user: user\n    });\n  } catch (e) {\n    yield put({\n      type: \"USER_FETCH_FAILED\",\n      message: e.message\n    });\n  }\n}\n\nfunction* onFetchItem() {\n  // yield delay(4000);\n  console.log(\"Inside sAga\"); // yield put({ type: \"DELETE_ITEM_SUCCESS\", value: 1 });\n\n  let res = localStorage.getItem(\"parentReleaseData\");\n  yield put({\n    type: \"FETCH_ITEM_SUCCESS\",\n    result: res\n  });\n} // export function* watchAgeUp() {\n//     yield takeLatest(\"AGE_UP\", ageUpAsync);\n// }\n\n\nexport default function* rootSaga() {\n  yield takeEvery(\"USER_FETCH_REQUESTED\", fetchUser);\n  yield takeEvery(\"FETCH_ITEM\", onFetchItem);\n}","map":null,"metadata":{},"sourceType":"module"}