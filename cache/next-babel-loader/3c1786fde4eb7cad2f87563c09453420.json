{"ast":null,"code":"var _jsxFileName = \"D:\\\\RandDChamber\\\\LogwardAssignment\\\\ProjectManagement\\\\PMA\\\\containers\\\\parentReleaseList.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, useState, version } from \"react\";\nimport { Table, Tag, Form, Input, InputNumber, Popconfirm, Row, Col, Dropdown, Progress, DatePicker, Select, Slider, Popover, Button, Modal, Badge } from 'antd';\nimport AddParentRelease from './addParentRelease';\nimport moment from 'moment';\nimport AddChildRelease from \"./addChildRelease\";\nimport ChildReleaseList from \"./ChildReleaseList\";\nimport actions from \"../redux/action\";\nimport { connect } from \"react-redux\";\nimport { MenuOutlined } from '@ant-design/icons';\nconst dateFormat = \"DD-MM-YYYY\";\nconst {\n  onFetchItem\n} = actions;\n\nclass ReleaseList extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"statusDisplay\", rec => {\n      switch (rec) {\n        case \"UNRELEASED\":\n          return __jsx(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 21\n            }\n          }, __jsx(Tag, {\n            color: \"magenta\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 25\n            }\n          }, rec));\n          break;\n\n        case \"RELEASED\":\n          return __jsx(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 21\n            }\n          }, __jsx(Tag, {\n            color: \"green\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 25\n            }\n          }, rec));\n\n        case \"IN PROGRESS\":\n          return __jsx(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 21\n            }\n          }, __jsx(Tag, {\n            color: \"blue\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 25\n            }\n          }, rec));\n      }\n    });\n\n    _defineProperty(this, \"addChildItem\", rec => {\n      console.log(\"children \", rec);\n      this.setState({\n        modalVisible: true,\n        currentRecord: rec\n      });\n    });\n\n    _defineProperty(this, \"deleteItem\", rec => {\n      let arr = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\n      console.log(\"Presnet Obj list form before \", arr);\n      let index = arr.map(x => {\n        return x.key;\n      }).indexOf(rec.key);\n      arr.splice(index, 1);\n      console.log(\"Presnet Obj list form after \", arr);\n      localStorage.setItem('parentReleaseData', JSON.stringify(arr));\n      this.props.onFetchItem();\n    });\n\n    _defineProperty(this, \"EditableCell\", (_ref) => {\n      let {\n        editing,\n        dataIndex,\n        title,\n        inputType,\n        record,\n        index,\n        children\n      } = _ref,\n          restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n      // console.log(\"started 1\", children)\n      // console.log(\"started 2\", record)\n      // console.log(\"started 4\", dataIndex)\n      // console.log(\"started 5\", title)\n      let inputNode;\n\n      switch (dataIndex) {\n        case \"version\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.version,\n            name: \"version\",\n            onChange: this.handleVersion,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"startDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"startDate\",\n            defaultValue: moment(record.startDate, dateFormat),\n            onChange: this.handleStartDate,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"endDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"endDate\",\n            defaultValue: moment(record.endDate, dateFormat),\n            onChange: this.handleEndDate,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"description\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.description,\n            onChange: this.handleDescription,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"status\":\n          inputNode = __jsx(Select, {\n            style: {\n              width: 120\n            },\n            name: \"status\",\n            defaultValue: record.status,\n            onChange: this.handleChange,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 21\n            }\n          }, __jsx(Option, {\n            value: \"IN PROGRESS\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 25\n            }\n          }, \"In Progress\"), __jsx(Option, {\n            value: \"UNRELEASED\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 25\n            }\n          }, \"Unreleased\"), __jsx(Option, {\n            value: \"RELEASED\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 25\n            }\n          }, \"Released\")); // onChange = { handleChange }\n\n          break;\n\n        case \"progress\":\n          inputNode = __jsx(Slider, {\n            defaultValue: 30,\n            tooltipVisible: true,\n            name: \"progress\",\n            onChange: this.handleSlider,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 29\n            }\n          });\n          break;\n      } // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n\n\n      return __jsx(\"td\", _extends({}, restProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }\n      }), editing ? __jsx(Form.Item, {\n        name: dataIndex,\n        style: {\n          margin: 0\n        },\n        rules: [{\n          required: true,\n          message: `Please Input ${title}!`\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 25\n        }\n      }, inputNode) : children); // }\n    });\n\n    _defineProperty(this, \"handleChange\", value => {\n      console.log(\"Vlaue\", value);\n      this.setState({\n        editStatus: value\n      });\n    });\n\n    _defineProperty(this, \"handleSlider\", value => {\n      console.log(\"slider Vlaue\", value);\n      this.setState({\n        editProgress: value\n      });\n    });\n\n    _defineProperty(this, \"handleStartDate\", (date, str) => {\n      console.log(\"sliceer sd str\", str);\n      this.setState({\n        editstartDate: str\n      });\n    });\n\n    _defineProperty(this, \"handleEndDate\", (date, str) => {\n      console.log(\"sliceer ed\", str);\n      this.setState({\n        editEndDate: str\n      });\n    });\n\n    _defineProperty(this, \"handleDescription\", e => {\n      console.log(\"sliceer desc\", e.target.value);\n      this.setState({\n        editDescription: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleVersion\", e => {\n      console.log(\"sliceer vers\", e.target.value);\n      this.setState({\n        editVersion: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"isEditing\", record => record.key === this.state.editingKey);\n\n    _defineProperty(this, \"cancel\", () => {\n      this.setState({\n        editingKey: ''\n      });\n    });\n\n    _defineProperty(this, \"handleCancel\", () => {\n      this.setState({\n        modalVisible: false\n      });\n    });\n\n    _defineProperty(this, \"handleOk\", () => {\n      this.setState({\n        modalVisible: false\n      });\n    });\n\n    let _this = this;\n\n    this.state = {\n      editingKey: '',\n      editVersion: \"\",\n      editStatus: \"\",\n      editProgress: \"\",\n      editstartDate: \"\",\n      editEndDate: \"\",\n      editDescription: \"\",\n      modalVisible: false,\n      currentRecord: {},\n      columns: [{\n        title: 'Version No',\n        dataIndex: 'version',\n        key: 'version',\n        render: text => __jsx(\"a\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 37\n          }\n        }, text),\n        editable: true\n      }, {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n        editable: true,\n        render: rec => this.statusDisplay(rec)\n      }, {\n        title: 'Progress',\n        dataIndex: 'progress',\n        key: 'progress',\n        editable: true,\n        render: rec => __jsx(Progress, {\n          strokeColor: {\n            '0%': '#108ee9',\n            '100%': '#87d068'\n          },\n          percent: rec,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }\n        })\n      }, {\n        title: 'Start Date',\n        dataIndex: 'startDate',\n        key: 'startDate',\n        editable: true\n      }, {\n        title: 'Release Date',\n        dataIndex: 'endDate',\n        key: 'endDate',\n        editable: true\n      }, {\n        title: 'Description',\n        dataIndex: 'description',\n        key: 'description',\n        editable: true\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: (text, record) => {\n          const editable = this.isEditing(record);\n\n          const Content = __jsx(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 29\n            }\n          }, __jsx(Row, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 33\n            }\n          }, __jsx(Col, {\n            span: 8,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 37\n            }\n          }, __jsx(\"a\", {\n            disabled: this.state.editingKey !== '',\n            onClick: () => this.edit(record),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 51\n            }\n          }, \"Edit\")), __jsx(Col, {\n            span: 8,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 37\n            }\n          }, __jsx(\"a\", {\n            disabled: this.state.editingKey !== '',\n            onClick: () => this.addChildItem(record),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 51\n            }\n          }, \"Add\")), __jsx(Col, {\n            span: 8,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 37\n            }\n          }, __jsx(\"a\", {\n            disabled: this.state.editingKey !== '',\n            onClick: () => this.deleteItem(record),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 51\n            }\n          }, \"Delete\"))));\n\n          return editable ? __jsx(\"span\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 29\n            }\n          }, __jsx(\"a\", {\n            href: \"javascript:;\",\n            onClick: () => this.save(record),\n            style: {\n              marginRight: 8\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 33\n            }\n          }, \"Save\"), __jsx(Popconfirm, {\n            title: \"Sure to cancel?\",\n            onConfirm: this.cancel,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 33\n            }\n          }, __jsx(\"a\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 37\n            }\n          }, \"Cancel\"))) : __jsx(Popover, {\n            content: Content,\n            title: \"Actions\",\n            trigger: \"hover\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 33\n            }\n          }, __jsx(MenuOutlined, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 37\n            }\n          }));\n        }\n      }],\n      listDataSrc: [],\n      isEdit: false\n    };\n  }\n\n  componentDidMount() {\n    // let chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\n    // let getItems = chkItem == null ? [] : chkItem;\n    // this.setState({\n    //     listDataSrc: getItems\n    // })\n    this.props.onFetchItem();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    console.log(\"NExgt Props\", nextProps);\n    let {\n      dataFromLS\n    } = nextProps;\n    console.log(\"data from lcoal\", dataFromLS);\n\n    if (dataFromLS) {\n      this.setState({\n        listDataSrc: dataFromLS\n      });\n    }\n  }\n\n  shouldComponentUpdate() {\n    return true;\n  }\n\n  save(record) {\n    console.log(\"Form submit\", record);\n    let {\n      editVersion,\n      editstartDate,\n      editEndDate,\n      editDescription,\n      editStatus,\n      editProgress,\n      listDataSrc\n    } = this.state;\n    console.log(\"Presnet Obj list form before\", listDataSrc);\n    listDataSrc.map(item => {\n      if (item.key == record.key) {\n        item.key = record.key;\n        item.childRelease = item.childRelease;\n        item.version = editVersion != \"\" ? editVersion : item.version;\n        item.status = editStatus != \"\" ? editStatus : item.status;\n        item.progress = editProgress != \"\" ? editProgress : item.progress;\n        item.startDate = editstartDate != \"\" ? editstartDate : item.startDate;\n        item.endDate = editEndDate != \"\" ? editEndDate : item.endDate;\n        item.description = editDescription != \"\" ? editDescription : item.description;\n      }\n    });\n    console.log(\"Presnet Obj list form after \", listDataSrc);\n    localStorage.setItem('parentReleaseData', JSON.stringify(listDataSrc));\n    this.setState({\n      editStatus: \"\",\n      editProgress: \"\",\n      editstartDate: \"\",\n      editVersion: \"\",\n      editEndDate: \"\",\n      editDescription: \"\"\n    });\n    this.props.onFetchItem();\n  }\n\n  edit(record) {\n    this.setState({\n      editingKey: record.key\n    });\n  }\n\n  render() {\n    console.log(\"data back from redux ++++ \", this.props.dataFromLS);\n    let {\n      listDataSrc\n    } = this.state;\n    const components = {\n      body: {\n        cell: this.EditableCell\n      }\n    };\n    const columns = this.state.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return _objectSpread({}, col, {\n        onCell: record => ({\n          record,\n          inputType: col.dataIndex,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record)\n        })\n      });\n    });\n    return __jsx(React.Fragment, null, __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 17\n      }\n    }, __jsx(Table, {\n      columns: columns,\n      dataSource: listDataSrc,\n      components: components,\n      expandable: {\n        expandedRowRender: record => __jsx(ChildReleaseList, {\n          thisData: record,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 58\n          }\n        })\n      },\n      rowClassName: \"editable-row\",\n      pagination: {\n        onChange: this.cancel\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 21\n      }\n    })), __jsx(AddParentRelease, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 17\n      }\n    })), __jsx(Modal, {\n      title: \"Basic Modal\",\n      visible: this.state.modalVisible,\n      onOk: this.handleOk,\n      closable: true,\n      className: \"modal-Layout\",\n      onCancel: this.handleCancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 17\n      }\n    }, __jsx(AddChildRelease, {\n      thisData: this.state.currentRecord,\n      closeModal: this.handleOk,\n      dbData: listDataSrc,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    dataFromLS: state.dataFromLS\n  };\n};\n\nexport default connect(mapStateToProps, {\n  onFetchItem\n})(ReleaseList);","map":{"version":3,"sources":["D:/RandDChamber/LogwardAssignment/ProjectManagement/PMA/containers/parentReleaseList.js"],"names":["React","Component","useState","version","Table","Tag","Form","Input","InputNumber","Popconfirm","Row","Col","Dropdown","Progress","DatePicker","Select","Slider","Popover","Button","Modal","Badge","AddParentRelease","moment","AddChildRelease","ChildReleaseList","actions","connect","MenuOutlined","dateFormat","onFetchItem","ReleaseList","constructor","props","rec","console","log","setState","modalVisible","currentRecord","arr","JSON","parse","localStorage","getItem","index","map","x","key","indexOf","splice","setItem","stringify","editing","dataIndex","title","inputType","record","children","restProps","inputNode","handleVersion","startDate","handleStartDate","endDate","handleEndDate","description","handleDescription","width","status","handleChange","handleSlider","margin","required","message","value","editStatus","editProgress","date","str","editstartDate","editEndDate","e","target","editDescription","editVersion","state","editingKey","_this","columns","render","text","editable","statusDisplay","isEditing","Content","edit","addChildItem","deleteItem","save","marginRight","cancel","listDataSrc","isEdit","componentDidMount","componentWillReceiveProps","nextProps","dataFromLS","shouldComponentUpdate","item","childRelease","progress","components","body","cell","EditableCell","col","onCell","expandedRowRender","onChange","handleOk","handleCancel","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component, useState, version } from \"react\";\r\nimport {\r\n    Table, Tag, Form, Input, InputNumber, Popconfirm, Row, Col, Dropdown,\r\n    Progress, DatePicker, Select, Slider, Popover, Button, Modal, Badge\r\n} from 'antd';\r\nimport AddParentRelease from './addParentRelease';\r\nimport moment from 'moment';\r\nimport AddChildRelease from \"./addChildRelease\";\r\nimport ChildReleaseList from \"./ChildReleaseList\";\r\nimport actions from \"../redux/action\";\r\nimport { connect } from \"react-redux\";\r\nimport { MenuOutlined } from '@ant-design/icons';\r\n\r\n\r\n\r\nconst dateFormat = \"DD-MM-YYYY\";\r\n\r\nconst { onFetchItem } = actions;\r\n\r\nclass ReleaseList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let _this = this;\r\n        this.state = {\r\n            editingKey: '',\r\n            editVersion: \"\",\r\n            editStatus: \"\",\r\n            editProgress: \"\",\r\n            editstartDate: \"\",\r\n            editEndDate: \"\",\r\n            editDescription: \"\",\r\n            modalVisible: false,\r\n            currentRecord: {},\r\n            columns: [\r\n                {\r\n                    title: 'Version No',\r\n                    dataIndex: 'version',\r\n                    key: 'version',\r\n                    render: text => <a>{text}</a>,\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Status',\r\n                    dataIndex: 'status',\r\n                    key: 'status',\r\n                    editable: true,\r\n                    render: (rec) => this.statusDisplay(rec)\r\n                },\r\n                {\r\n                    title: 'Progress',\r\n                    dataIndex: 'progress',\r\n                    key: 'progress',\r\n                    editable: true,\r\n                    render: (rec) => (\r\n                        <Progress\r\n                            strokeColor={{\r\n                                '0%': '#108ee9',\r\n                                '100%': '#87d068',\r\n                            }}\r\n                            percent={rec}\r\n                        />\r\n                    ),\r\n                },\r\n                {\r\n                    title: 'Start Date',\r\n                    dataIndex: 'startDate',\r\n                    key: 'startDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Release Date',\r\n                    dataIndex: 'endDate',\r\n                    key: 'endDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Description',\r\n                    dataIndex: 'description',\r\n                    key: 'description',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Action',\r\n                    key: 'action',\r\n                    render: (text, record) => {\r\n                        const editable = this.isEditing(record);\r\n                        const Content = (\r\n                            <div>\r\n                                <Row>\r\n                                    <Col span={8}><a disabled={this.state.editingKey !== ''} onClick={() => this.edit(record)}>Edit</a></Col>\r\n                                    <Col span={8}><a disabled={this.state.editingKey !== ''} onClick={() => this.addChildItem(record)}>Add</a></Col>\r\n                                    <Col span={8}><a disabled={this.state.editingKey !== ''} onClick={() => this.deleteItem(record)}>Delete</a></Col>\r\n                                </Row>\r\n                            </div>\r\n                        );\r\n                        return editable ? (\r\n                            <span>\r\n                                <a\r\n                                    href=\"javascript:;\"\r\n                                    onClick={() => this.save(record)}\r\n                                    style={{\r\n                                        marginRight: 8,\r\n                                    }}\r\n                                >\r\n                                    Save\r\n                            </a>\r\n                                <Popconfirm title=\"Sure to cancel?\" onConfirm={this.cancel}>\r\n                                    <a>Cancel</a>\r\n                                </Popconfirm>\r\n                            </span>\r\n                        ) : (\r\n                                <Popover content={Content} title=\"Actions\" trigger=\"hover\">\r\n                                    {/* <Button>Hover me</Button> */}\r\n                                    <MenuOutlined />\r\n                                </Popover>\r\n                            );\r\n                    }\r\n                }\r\n            ],\r\n\r\n            listDataSrc: [],\r\n            isEdit: false\r\n        }\r\n    }\r\n\r\n    statusDisplay = (rec) => {\r\n\r\n        switch (rec) {\r\n            case \"UNRELEASED\":\r\n                return (\r\n                    <div>\r\n                        <Tag color=\"magenta\">{rec}</Tag>\r\n                    </div>\r\n                )\r\n                break;\r\n            case \"RELEASED\":\r\n                return (\r\n                    <div>\r\n                        <Tag color=\"green\">{rec}</Tag>\r\n                    </div>\r\n                )\r\n            case \"IN PROGRESS\":\r\n                return (\r\n                    <div>\r\n                        <Tag color=\"blue\">{rec}</Tag>\r\n                    </div>\r\n                )\r\n        }\r\n\r\n    }\r\n\r\n    addChildItem = (rec) => {\r\n        console.log(\"children \", rec)\r\n        this.setState({\r\n            modalVisible: true,\r\n            currentRecord: rec\r\n        })\r\n    }\r\n\r\n    deleteItem = (rec) => {\r\n\r\n        let arr = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\r\n\r\n        console.log(\"Presnet Obj list form before \", arr)\r\n        let index = arr.map(x => {\r\n            return x.key;\r\n        }).indexOf(rec.key);\r\n        arr.splice(index, 1);\r\n\r\n\r\n        console.log(\"Presnet Obj list form after \", arr)\r\n        localStorage.setItem('parentReleaseData', JSON.stringify(arr));\r\n        this.props.onFetchItem();\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        // let chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\r\n        // let getItems = chkItem == null ? [] : chkItem;\r\n        // this.setState({\r\n        //     listDataSrc: getItems\r\n        // })\r\n        this.props.onFetchItem();\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        console.log(\"NExgt Props\", nextProps);\r\n        let { dataFromLS } = nextProps\r\n        console.log(\"data from lcoal\", dataFromLS);\r\n\r\n        if (dataFromLS) {\r\n            this.setState({\r\n                listDataSrc: dataFromLS\r\n            })\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return true;\r\n    }\r\n\r\n\r\n    EditableCell = ({\r\n        editing,\r\n        dataIndex,\r\n        title,\r\n        inputType,\r\n        record,\r\n        index,\r\n        children,\r\n        ...restProps\r\n    }) => {\r\n        // console.log(\"started 1\", children)\r\n        // console.log(\"started 2\", record)\r\n        // console.log(\"started 4\", dataIndex)\r\n        // console.log(\"started 5\", title)\r\n        let inputNode;\r\n\r\n\r\n        switch (dataIndex) {\r\n            case \"version\":\r\n                inputNode = <Input defaultValue={record.version} name=\"version\" onChange={this.handleVersion} />\r\n                break;\r\n            case \"startDate\":\r\n                inputNode = <DatePicker name=\"startDate\" defaultValue={moment(record.startDate, dateFormat)} onChange={this.handleStartDate} />\r\n                break;\r\n            case \"endDate\":\r\n                inputNode = <DatePicker name=\"endDate\" defaultValue={moment(record.endDate, dateFormat)} onChange={this.handleEndDate} />\r\n                break;\r\n            case \"description\":\r\n                inputNode = <Input defaultValue={record.description} onChange={this.handleDescription} />\r\n                break;\r\n            case \"status\":\r\n                inputNode =\r\n                    <Select style={{ width: 120 }} name=\"status\" defaultValue={record.status} onChange={this.handleChange}>\r\n                        <Option value=\"IN PROGRESS\">In Progress</Option>\r\n                        <Option value=\"UNRELEASED\">Unreleased</Option>\r\n                        <Option value=\"RELEASED\">Released</Option>\r\n                    </Select>\r\n                // onChange = { handleChange }\r\n                break;\r\n            case \"progress\":\r\n                inputNode = <Slider defaultValue={30} tooltipVisible name=\"progress\" onChange={this.handleSlider} />\r\n                break;\r\n\r\n        }\r\n\r\n        // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\r\n        return (\r\n            <td {...restProps}>\r\n                {editing ?\r\n                    (\r\n                        <Form.Item\r\n                            name={dataIndex}\r\n                            style={{ margin: 0 }}\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: `Please Input ${title}!`,\r\n                                },\r\n                            ]}\r\n                        >\r\n                            {inputNode}\r\n                        </Form.Item>\r\n\r\n                    )\r\n\r\n                    : (\r\n                        children\r\n                    )}\r\n            </td>\r\n        );\r\n        // }\r\n    };\r\n\r\n    handleChange = (value) => {\r\n        console.log(\"Vlaue\", value)\r\n        this.setState({\r\n            editStatus: value\r\n        })\r\n    }\r\n\r\n    handleSlider = (value) => {\r\n        console.log(\"slider Vlaue\", value);\r\n        this.setState({\r\n            editProgress: value\r\n        })\r\n    }\r\n    handleStartDate = (date, str) => {\r\n        console.log(\"sliceer sd str\", str)\r\n        this.setState({\r\n            editstartDate: str\r\n        })\r\n    }\r\n    handleEndDate = (date, str) => {\r\n        console.log(\"sliceer ed\", str)\r\n        this.setState({\r\n            editEndDate: str\r\n        })\r\n    }\r\n    handleDescription = (e) => {\r\n        console.log(\"sliceer desc\", e.target.value)\r\n        this.setState({\r\n            editDescription: e.target.value\r\n        })\r\n    }\r\n    handleVersion = (e) => {\r\n        console.log(\"sliceer vers\", e.target.value)\r\n        this.setState({\r\n            editVersion: e.target.value\r\n        })\r\n    }\r\n\r\n    isEditing = record => record.key === this.state.editingKey;\r\n\r\n    cancel = () => {\r\n        this.setState({ editingKey: '' });\r\n    };\r\n\r\n    save(record) {\r\n        console.log(\"Form submit\", record)\r\n        let { editVersion, editstartDate, editEndDate, editDescription, editStatus, editProgress, listDataSrc } = this.state;\r\n\r\n        console.log(\"Presnet Obj list form before\", listDataSrc)\r\n\r\n\r\n        listDataSrc.map(item => {\r\n            if (item.key == record.key) {\r\n                item.key = record.key;\r\n                item.childRelease = item.childRelease;\r\n                item.version = editVersion != \"\" ? editVersion : item.version;\r\n                item.status = editStatus != \"\" ? editStatus : item.status;\r\n                item.progress = editProgress != \"\" ? editProgress : item.progress;\r\n                item.startDate = editstartDate != \"\" ? editstartDate : item.startDate;\r\n                item.endDate = editEndDate != \"\" ? editEndDate : item.endDate;\r\n                item.description = editDescription != \"\" ? editDescription : item.description;\r\n            }\r\n        })\r\n        console.log(\"Presnet Obj list form after \", listDataSrc)\r\n        localStorage.setItem('parentReleaseData', JSON.stringify(listDataSrc));\r\n        this.setState({\r\n            editStatus: \"\",\r\n            editProgress: \"\",\r\n            editstartDate: \"\",\r\n            editVersion: \"\",\r\n            editEndDate: \"\",\r\n            editDescription: \"\",\r\n        })\r\n        this.props.onFetchItem();\r\n\r\n    }\r\n\r\n    edit(record) {\r\n        this.setState({ editingKey: record.key });\r\n    }\r\n\r\n    handleCancel = () => {\r\n        this.setState({\r\n            modalVisible: false\r\n        })\r\n    }\r\n\r\n    handleOk = () => {\r\n        this.setState({\r\n            modalVisible: false\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        console.log(\"data back from redux ++++ \", this.props.dataFromLS)\r\n\r\n        let { listDataSrc } = this.state;\r\n\r\n        const components = {\r\n            body: {\r\n                cell: this.EditableCell,\r\n            },\r\n        };\r\n\r\n        const columns = this.state.columns.map(col => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n            return {\r\n                ...col,\r\n                onCell: record => ({\r\n                    record,\r\n                    inputType: col.dataIndex,\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    editing: this.isEditing(record),\r\n                }),\r\n            };\r\n        });\r\n\r\n\r\n\r\n        return (\r\n            <>\r\n                <Form>\r\n                    <Table\r\n                        columns={columns}\r\n                        dataSource={listDataSrc}\r\n                        components={components}\r\n                        expandable={{\r\n                            expandedRowRender: record => <ChildReleaseList thisData={record} />,\r\n                        }}\r\n                        rowClassName=\"editable-row\"\r\n                        pagination={{\r\n                            onChange: this.cancel,\r\n                        }}\r\n                    />\r\n                </Form>\r\n                <AddParentRelease {...this.props} />\r\n                <Modal\r\n                    title=\"Basic Modal\"\r\n                    visible={this.state.modalVisible}\r\n                    onOk={this.handleOk}\r\n                    closable\r\n                    className=\"modal-Layout\"\r\n                    onCancel={this.handleCancel}\r\n                >\r\n                    <AddChildRelease thisData={this.state.currentRecord} closeModal={this.handleOk} dbData={listDataSrc} />\r\n                </Modal>\r\n\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        dataFromLS: state.dataFromLS\r\n    };\r\n};\r\n\r\n\r\nexport default connect(\r\n    mapStateToProps, { onFetchItem }\r\n)(ReleaseList);\r\n"]},"metadata":{},"sourceType":"module"}