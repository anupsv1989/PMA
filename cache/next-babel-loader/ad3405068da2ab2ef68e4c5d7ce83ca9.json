{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\RandDChamber\\\\LogwardAssignment\\\\ProjectManagement\\\\PMA\\\\containers\\\\parentReleaseList.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, useState, version } from \"react\";\nimport { Table, Tag, Form, Input, InputNumber, Popconfirm, Row, Col, Dropdown, Progress, DatePicker, Select, Slider, Popover, Button, Modal, Badge } from 'antd';\nimport AddParentRelease from './addParentRelease';\nimport moment from 'moment';\nimport AddChildRelease from \"./addChildRelease\";\nimport ChildReleaseList from \"./ChildReleaseList\";\nimport actions from \"../redux/action\";\nimport { connect } from \"react-redux\";\nimport { MenuOutlined } from '@ant-design/icons';\nimport { statusDisplay, progressDisplay, dateFormat } from \"../commons/helpers\";\nvar onFetchItem = actions.onFetchItem;\n\nvar ReleaseList = /*#__PURE__*/function (_Component) {\n  _inherits(ReleaseList, _Component);\n\n  var _super = _createSuper(ReleaseList);\n\n  function ReleaseList(props) {\n    var _this2;\n\n    _classCallCheck(this, ReleaseList);\n\n    _this2 = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this2), \"addChildItem\", function (rec) {\n      _this2.setState({\n        modalVisible: true,\n        currentRecord: rec\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"deleteItem\", function (rec) {\n      var arr = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\n      console.log(\"Presnet Obj list form before \", arr);\n      var index = arr.map(function (x) {\n        return x.key;\n      }).indexOf(rec.key);\n      arr.splice(index, 1);\n      console.log(\"Presnet Obj list form after \", arr);\n      localStorage.setItem('parentReleaseData', JSON.stringify(arr));\n\n      _this2.props.onFetchItem();\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"EditableCell\", function (_ref) {\n      var editing = _ref.editing,\n          dataIndex = _ref.dataIndex,\n          title = _ref.title,\n          inputType = _ref.inputType,\n          record = _ref.record,\n          index = _ref.index,\n          children = _ref.children,\n          restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n      var inputNode;\n\n      switch (dataIndex) {\n        case \"version\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.version,\n            name: \"version\",\n            onChange: function onChange(e) {\n              return _this2.handleVersionDesc(e, \"editVersion\");\n            },\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"startDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"startDate\",\n            defaultValue: moment(record.startDate, dateFormat),\n            onChange: _this2.handleStartDate,\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"endDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"endDate\",\n            defaultValue: moment(record.endDate, dateFormat),\n            onChange: _this2.handleEndDate,\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"description\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.description,\n            onChange: function onChange(e) {\n              return _this2.handleVersionDesc(e, \"editDescription\");\n            },\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"status\":\n          inputNode = __jsx(Select, {\n            style: {\n              width: 120\n            },\n            name: \"status\",\n            defaultValue: record.status,\n            onChange: function onChange(e) {\n              return _this2.handleSelectSlider(e, \"editStatus\");\n            },\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 21\n            }\n          }, __jsx(Option, {\n            value: \"IN PROGRESS\",\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 25\n            }\n          }, \"In Progress\"), __jsx(Option, {\n            value: \"UNRELEASED\",\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 25\n            }\n          }, \"Unreleased\"), __jsx(Option, {\n            value: \"RELEASED\",\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 25\n            }\n          }, \"Released\"));\n          break;\n\n        case \"progress\":\n          inputNode = __jsx(Slider, {\n            defaultValue: 0,\n            tooltipVisible: true,\n            name: \"progress\",\n            onChange: function onChange(e) {\n              return _this2.handleSelectSlider(e, \"editProgress\");\n            },\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 29\n            }\n          });\n          break;\n      }\n\n      return __jsx(\"td\", _extends({}, restProps, {\n        __self: _assertThisInitialized(_this2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }\n      }), editing ? __jsx(Form.Item, {\n        name: dataIndex,\n        style: {\n          margin: 0\n        },\n        rules: [{\n          required: true,\n          message: \"Please Input \".concat(title, \"!\")\n        }],\n        __self: _assertThisInitialized(_this2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 25\n        }\n      }, inputNode) : children);\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"handleSelectSlider\", function (value, type) {\n      _this2.setState(_defineProperty({}, type, value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"handleVersionDesc\", function (e, type) {\n      _this2.setState(_defineProperty({}, type, e.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"handleStartDate\", function (date, str) {\n      _this2.setState({\n        editstartDate: str\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"handleEndDate\", function (date, str) {\n      _this2.setState({\n        editEndDate: str\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"isEditing\", function (record) {\n      return record.key === _this2.state.editingKey;\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"cancel\", function () {\n      _this2.setState({\n        editingKey: ''\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"handleCancel\", function () {\n      _this2.setState({\n        modalVisible: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"handleOk\", function () {\n      _this2.setState({\n        modalVisible: false\n      });\n    });\n\n    var _this = _assertThisInitialized(_this2);\n\n    _this2.state = {\n      editingKey: '',\n      editVersion: \"\",\n      editStatus: \"\",\n      editProgress: \"\",\n      editstartDate: \"\",\n      editEndDate: \"\",\n      editDescription: \"\",\n      modalVisible: false,\n      currentRecord: {},\n      columns: [{\n        title: 'Version No',\n        dataIndex: 'version',\n        key: 'version',\n        render: function render(text) {\n          return __jsx(\"a\", {\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 37\n            }\n          }, text);\n        },\n        editable: true\n      }, {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n        editable: true,\n        render: function render(rec) {\n          return statusDisplay(rec);\n        }\n      }, {\n        title: 'Progress',\n        dataIndex: 'progress',\n        key: 'progress',\n        editable: true,\n        render: function render(rec) {\n          return progressDisplay(rec);\n        }\n      }, {\n        title: 'Start Date',\n        dataIndex: 'startDate',\n        key: 'startDate',\n        editable: true\n      }, {\n        title: 'Release Date',\n        dataIndex: 'endDate',\n        key: 'endDate',\n        editable: true\n      }, {\n        title: 'Description',\n        dataIndex: 'description',\n        key: 'description',\n        editable: true\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: function render(text, record) {\n          var editable = _this2.isEditing(record);\n\n          var Content = __jsx(\"div\", {\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 29\n            }\n          }, __jsx(Row, {\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 33\n            }\n          }, __jsx(Col, {\n            span: 6,\n            style: {\n              border: \"1px solid blue\",\n              marginRight: \"2px\"\n            },\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 37\n            }\n          }, __jsx(\"a\", {\n            disabled: _this2.state.editingKey !== '',\n            onClick: function onClick() {\n              return _this2.edit(record);\n            },\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 108\n            }\n          }, \"Edit\")), __jsx(Col, {\n            span: 6,\n            style: {\n              border: \"1px solid blue\"\n            },\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 37\n            }\n          }, __jsx(\"a\", {\n            disabled: _this2.state.editingKey !== '',\n            onClick: function onClick() {\n              return _this2.addChildItem(record);\n            },\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 88\n            }\n          }, \"Add\")), __jsx(Col, {\n            span: 6,\n            style: {\n              border: \"1px solid blue\"\n            },\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 37\n            }\n          }, __jsx(\"a\", {\n            disabled: _this2.state.editingKey !== '',\n            onClick: function onClick() {\n              return _this2.deleteItem(record);\n            },\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 88\n            }\n          }, \"Delete\"))));\n\n          return editable ? __jsx(\"span\", {\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 29\n            }\n          }, __jsx(\"a\", {\n            href: \"javascript:;\",\n            onClick: function onClick() {\n              return _this2.save(record);\n            },\n            style: {\n              marginRight: 8\n            },\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 33\n            }\n          }, \"Save\"), __jsx(Popconfirm, {\n            title: \"Sure to cancel?\",\n            onConfirm: _this2.cancel,\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 33\n            }\n          }, __jsx(\"a\", {\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 37\n            }\n          }, \"Cancel\"))) : __jsx(Popover, {\n            content: Content,\n            title: \"Actions\",\n            trigger: \"hover\",\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 33\n            }\n          }, __jsx(MenuOutlined, {\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 37\n            }\n          }));\n        }\n      }],\n      listDataSrc: [],\n      isEdit: false\n    };\n    return _this2;\n  }\n\n  _createClass(ReleaseList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // let chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\n      // let getItems = chkItem == null ? [] : chkItem;\n      // this.setState({\n      //     listDataSrc: getItems\n      // })\n      this.props.onFetchItem();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this3 = this;\n\n      console.log(\"NExgt Props\", nextProps);\n      var dataFromLS = nextProps.dataFromLS;\n      console.log(\"data from lcoal\", dataFromLS);\n\n      if (dataFromLS) {\n        this.setState({\n          listDataSrc: dataFromLS,\n          editingKey: \"\"\n        }, function () {\n          console.log(\"After setting state :\", _this3.state.listDataSrc);\n        });\n      }\n    }\n  }, {\n    key: \"save\",\n    value: function save(record) {\n      console.log(\"Form submit\", record);\n      var _this$state = this.state,\n          editVersion = _this$state.editVersion,\n          editstartDate = _this$state.editstartDate,\n          editEndDate = _this$state.editEndDate,\n          editDescription = _this$state.editDescription,\n          editStatus = _this$state.editStatus,\n          editProgress = _this$state.editProgress,\n          listDataSrc = _this$state.listDataSrc;\n      console.log(\"Presnet Obj list form before\", listDataSrc);\n      listDataSrc.map(function (item) {\n        if (item.key == record.key) {\n          item.key = record.key;\n          item.childRelease = item.childRelease;\n          item.version = editVersion != \"\" ? editVersion : item.version;\n          item.status = editStatus != \"\" ? editStatus : item.status;\n          item.progress = editProgress != \"\" ? editProgress : item.progress;\n          item.startDate = editstartDate != \"\" ? editstartDate : item.startDate;\n          item.endDate = editEndDate != \"\" ? editEndDate : item.endDate;\n          item.description = editDescription != \"\" ? editDescription : item.description;\n        }\n      });\n      console.log(\"Presnet Obj list form after \", listDataSrc);\n      localStorage.setItem('parentReleaseData', JSON.stringify(listDataSrc));\n      this.setState({\n        editStatus: \"\",\n        editProgress: \"\",\n        editstartDate: \"\",\n        editVersion: \"\",\n        editEndDate: \"\",\n        editDescription: \"\"\n      });\n      this.props.onFetchItem();\n    }\n  }, {\n    key: \"edit\",\n    value: function edit(record) {\n      this.setState({\n        editingKey: record.key\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      console.log(\"data back from redux ++++ \", this.props.dataFromLS);\n      var listDataSrc = this.state.listDataSrc;\n      var components = {\n        body: {\n          cell: this.EditableCell\n        }\n      };\n      var columns = this.state.columns.map(function (col) {\n        if (!col.editable) {\n          return col;\n        }\n\n        return _objectSpread({}, col, {\n          onCell: function onCell(record) {\n            return {\n              record: record,\n              inputType: col.dataIndex,\n              dataIndex: col.dataIndex,\n              title: col.title,\n              editing: _this4.isEditing(record)\n            };\n          }\n        });\n      });\n      console.log(\"After setting state in render:\", this.state.listDataSrc);\n      return __jsx(React.Fragment, null, __jsx(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 17\n        }\n      }, __jsx(Table, {\n        columns: columns,\n        dataSource: this.props.dataFromLS,\n        components: components,\n        expandable: {\n          expandedRowRender: function expandedRowRender(record) {\n            return __jsx(ChildReleaseList, {\n              thisData: record,\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 58\n              }\n            });\n          }\n        },\n        rowClassName: \"editable-row\",\n        pagination: {\n          onChange: this.cancel\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 21\n        }\n      })), __jsx(AddParentRelease, _extends({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 17\n        }\n      })), __jsx(Modal, {\n        title: \"Add Batch Release\",\n        visible: this.state.modalVisible,\n        onOk: this.handleOk,\n        closable: true,\n        className: \"modal-Layout\",\n        onCancel: this.handleCancel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 17\n        }\n      }, __jsx(AddChildRelease, {\n        thisData: this.state.currentRecord,\n        closeModal: this.handleOk,\n        dbData: listDataSrc,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return ReleaseList;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    dataFromLS: state.dataFromLS\n  };\n};\n\nexport default connect(mapStateToProps, {\n  onFetchItem: onFetchItem\n})(ReleaseList);","map":{"version":3,"sources":["D:/RandDChamber/LogwardAssignment/ProjectManagement/PMA/containers/parentReleaseList.js"],"names":["React","Component","useState","version","Table","Tag","Form","Input","InputNumber","Popconfirm","Row","Col","Dropdown","Progress","DatePicker","Select","Slider","Popover","Button","Modal","Badge","AddParentRelease","moment","AddChildRelease","ChildReleaseList","actions","connect","MenuOutlined","statusDisplay","progressDisplay","dateFormat","onFetchItem","ReleaseList","props","rec","setState","modalVisible","currentRecord","arr","JSON","parse","localStorage","getItem","console","log","index","map","x","key","indexOf","splice","setItem","stringify","editing","dataIndex","title","inputType","record","children","restProps","inputNode","e","handleVersionDesc","startDate","handleStartDate","endDate","handleEndDate","description","width","status","handleSelectSlider","margin","required","message","value","type","target","date","str","editstartDate","editEndDate","state","editingKey","_this","editVersion","editStatus","editProgress","editDescription","columns","render","text","editable","isEditing","Content","border","marginRight","edit","addChildItem","deleteItem","save","cancel","listDataSrc","isEdit","nextProps","dataFromLS","item","childRelease","progress","components","body","cell","EditableCell","col","onCell","expandedRowRender","onChange","handleOk","handleCancel","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component, useState, version } from \"react\";\r\nimport {\r\n    Table, Tag, Form, Input, InputNumber, Popconfirm, Row, Col, Dropdown,\r\n    Progress, DatePicker, Select, Slider, Popover, Button, Modal, Badge\r\n} from 'antd';\r\nimport AddParentRelease from './addParentRelease';\r\nimport moment from 'moment';\r\nimport AddChildRelease from \"./addChildRelease\";\r\nimport ChildReleaseList from \"./ChildReleaseList\";\r\nimport actions from \"../redux/action\";\r\nimport { connect } from \"react-redux\";\r\nimport { MenuOutlined } from '@ant-design/icons';\r\nimport { statusDisplay, progressDisplay, dateFormat } from \"../commons/helpers\";\r\n\r\n\r\nconst { onFetchItem } = actions;\r\n\r\n\r\n\r\nclass ReleaseList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let _this = this;\r\n        this.state = {\r\n            editingKey: '',\r\n            editVersion: \"\",\r\n            editStatus: \"\",\r\n            editProgress: \"\",\r\n            editstartDate: \"\",\r\n            editEndDate: \"\",\r\n            editDescription: \"\",\r\n            modalVisible: false,\r\n            currentRecord: {},\r\n            columns: [\r\n                {\r\n                    title: 'Version No',\r\n                    dataIndex: 'version',\r\n                    key: 'version',\r\n                    render: text => <a>{text}</a>,\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Status',\r\n                    dataIndex: 'status',\r\n                    key: 'status',\r\n                    editable: true,\r\n                    render: (rec) => statusDisplay(rec)\r\n                },\r\n                {\r\n                    title: 'Progress',\r\n                    dataIndex: 'progress',\r\n                    key: 'progress',\r\n                    editable: true,\r\n                    render: (rec) => progressDisplay(rec)\r\n                },\r\n                {\r\n                    title: 'Start Date',\r\n                    dataIndex: 'startDate',\r\n                    key: 'startDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Release Date',\r\n                    dataIndex: 'endDate',\r\n                    key: 'endDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Description',\r\n                    dataIndex: 'description',\r\n                    key: 'description',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Action',\r\n                    key: 'action',\r\n                    render: (text, record) => {\r\n                        const editable = this.isEditing(record);\r\n                        const Content = (\r\n                            <div>\r\n                                <Row>\r\n                                    <Col span={6} style={{ border: \"1px solid blue\", marginRight: \"2px\" }}><a disabled={this.state.editingKey !== ''} onClick={() => this.edit(record)}>Edit</a></Col>\r\n                                    <Col span={6} style={{ border: \"1px solid blue\" }}><a disabled={this.state.editingKey !== ''} onClick={() => this.addChildItem(record)}>Add</a></Col>\r\n                                    <Col span={6} style={{ border: \"1px solid blue\" }}><a disabled={this.state.editingKey !== ''} onClick={() => this.deleteItem(record)}>Delete</a></Col>\r\n                                </Row>\r\n                            </div>\r\n                        );\r\n                        return editable ? (\r\n                            <span>\r\n                                <a\r\n                                    href=\"javascript:;\"\r\n                                    onClick={() => this.save(record)}\r\n                                    style={{\r\n                                        marginRight: 8,\r\n                                    }}\r\n                                >\r\n                                    Save\r\n                            </a>\r\n                                <Popconfirm title=\"Sure to cancel?\" onConfirm={this.cancel}>\r\n                                    <a>Cancel</a>\r\n                                </Popconfirm>\r\n                            </span>\r\n                        ) : (\r\n                                <Popover content={Content} title=\"Actions\" trigger=\"hover\">\r\n                                    <MenuOutlined />\r\n                                </Popover>\r\n                            );\r\n                    }\r\n                }\r\n            ],\r\n\r\n            listDataSrc: [],\r\n            isEdit: false\r\n        }\r\n    }\r\n\r\n\r\n    addChildItem = (rec) => {\r\n        this.setState({\r\n            modalVisible: true,\r\n            currentRecord: rec\r\n        })\r\n    }\r\n\r\n    deleteItem = (rec) => {\r\n\r\n        let arr = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\r\n\r\n        console.log(\"Presnet Obj list form before \", arr)\r\n        let index = arr.map(x => {\r\n            return x.key;\r\n        }).indexOf(rec.key);\r\n        arr.splice(index, 1);\r\n\r\n\r\n        console.log(\"Presnet Obj list form after \", arr)\r\n        localStorage.setItem('parentReleaseData', JSON.stringify(arr));\r\n        this.props.onFetchItem();\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        // let chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\r\n        // let getItems = chkItem == null ? [] : chkItem;\r\n        // this.setState({\r\n        //     listDataSrc: getItems\r\n        // })\r\n        this.props.onFetchItem();\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        console.log(\"NExgt Props\", nextProps);\r\n        let { dataFromLS } = nextProps\r\n        console.log(\"data from lcoal\", dataFromLS);\r\n\r\n        if (dataFromLS) {\r\n            this.setState({\r\n                listDataSrc: dataFromLS,\r\n                editingKey: \"\"\r\n            }, () => {\r\n                console.log(\"After setting state :\", this.state.listDataSrc)\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    EditableCell = ({\r\n        editing,\r\n        dataIndex,\r\n        title,\r\n        inputType,\r\n        record,\r\n        index,\r\n        children,\r\n        ...restProps\r\n    }) => {\r\n        let inputNode;\r\n\r\n\r\n        switch (dataIndex) {\r\n            case \"version\":\r\n                inputNode = <Input defaultValue={record.version} name=\"version\" onChange={(e) => this.handleVersionDesc(e, \"editVersion\")} />\r\n                break;\r\n            case \"startDate\":\r\n                inputNode = <DatePicker name=\"startDate\" defaultValue={moment(record.startDate, dateFormat)} onChange={this.handleStartDate} />\r\n                break;\r\n            case \"endDate\":\r\n                inputNode = <DatePicker name=\"endDate\" defaultValue={moment(record.endDate, dateFormat)} onChange={this.handleEndDate} />\r\n                break;\r\n            case \"description\":\r\n                inputNode = <Input defaultValue={record.description} onChange={(e) => this.handleVersionDesc(e, \"editDescription\")} />\r\n                break;\r\n            case \"status\":\r\n                inputNode =\r\n                    <Select style={{ width: 120 }} name=\"status\" defaultValue={record.status} onChange={(e) => this.handleSelectSlider(e, \"editStatus\")}>\r\n                        <Option value=\"IN PROGRESS\">In Progress</Option>\r\n                        <Option value=\"UNRELEASED\">Unreleased</Option>\r\n                        <Option value=\"RELEASED\">Released</Option>\r\n                    </Select>\r\n                break;\r\n            case \"progress\":\r\n                inputNode = <Slider defaultValue={0} tooltipVisible name=\"progress\" onChange={(e) => this.handleSelectSlider(e, \"editProgress\")} />\r\n                break;\r\n\r\n        }\r\n\r\n\r\n        return (\r\n            <td {...restProps}>\r\n                {editing ?\r\n                    (\r\n                        <Form.Item\r\n                            name={dataIndex}\r\n                            style={{ margin: 0 }}\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: `Please Input ${title}!`,\r\n                                },\r\n                            ]}\r\n                        >\r\n                            {inputNode}\r\n                        </Form.Item>\r\n\r\n                    )\r\n\r\n                    : (\r\n                        children\r\n                    )}\r\n            </td>\r\n        );\r\n\r\n    };\r\n\r\n\r\n    handleSelectSlider = (value, type) => {\r\n        this.setState({\r\n            [type]: value\r\n        })\r\n    }\r\n\r\n    handleVersionDesc = (e, type) => {\r\n        this.setState({\r\n            [type]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleStartDate = (date, str) => {\r\n        this.setState({\r\n            editstartDate: str\r\n        })\r\n    }\r\n    handleEndDate = (date, str) => {\r\n        this.setState({\r\n            editEndDate: str\r\n        })\r\n    }\r\n\r\n\r\n    isEditing = record => record.key === this.state.editingKey;\r\n\r\n    cancel = () => {\r\n        this.setState({ editingKey: '' });\r\n    };\r\n\r\n    save(record) {\r\n        console.log(\"Form submit\", record)\r\n        let { editVersion, editstartDate, editEndDate, editDescription, editStatus, editProgress, listDataSrc } = this.state;\r\n\r\n        console.log(\"Presnet Obj list form before\", listDataSrc)\r\n\r\n\r\n        listDataSrc.map(item => {\r\n            if (item.key == record.key) {\r\n                item.key = record.key;\r\n                item.childRelease = item.childRelease;\r\n                item.version = editVersion != \"\" ? editVersion : item.version;\r\n                item.status = editStatus != \"\" ? editStatus : item.status;\r\n                item.progress = editProgress != \"\" ? editProgress : item.progress;\r\n                item.startDate = editstartDate != \"\" ? editstartDate : item.startDate;\r\n                item.endDate = editEndDate != \"\" ? editEndDate : item.endDate;\r\n                item.description = editDescription != \"\" ? editDescription : item.description;\r\n            }\r\n        })\r\n        console.log(\"Presnet Obj list form after \", listDataSrc)\r\n        localStorage.setItem('parentReleaseData', JSON.stringify(listDataSrc));\r\n        this.setState({\r\n            editStatus: \"\",\r\n            editProgress: \"\",\r\n            editstartDate: \"\",\r\n            editVersion: \"\",\r\n            editEndDate: \"\",\r\n            editDescription: \"\",\r\n        })\r\n        this.props.onFetchItem();\r\n\r\n    }\r\n\r\n    edit(record) {\r\n        this.setState({\r\n            editingKey: record.key,\r\n        });\r\n    }\r\n\r\n    handleCancel = () => {\r\n        this.setState({\r\n            modalVisible: false\r\n        })\r\n    }\r\n\r\n    handleOk = () => {\r\n        this.setState({\r\n            modalVisible: false\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        console.log(\"data back from redux ++++ \", this.props.dataFromLS)\r\n\r\n        let { listDataSrc } = this.state;\r\n\r\n        const components = {\r\n            body: {\r\n                cell: this.EditableCell,\r\n            },\r\n        };\r\n\r\n        const columns = this.state.columns.map(col => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n            return {\r\n                ...col,\r\n                onCell: record => ({\r\n                    record,\r\n                    inputType: col.dataIndex,\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    editing: this.isEditing(record),\r\n                }),\r\n            };\r\n        });\r\n\r\n        console.log(\"After setting state in render:\", this.state.listDataSrc)\r\n\r\n        return (\r\n            <>\r\n                <Form>\r\n                    <Table\r\n                        columns={columns}\r\n                        dataSource={this.props.dataFromLS}\r\n                        components={components}\r\n                        expandable={{\r\n                            expandedRowRender: record => <ChildReleaseList thisData={record} />,\r\n                        }}\r\n                        rowClassName=\"editable-row\"\r\n                        pagination={{\r\n                            onChange: this.cancel,\r\n                        }}\r\n                    />\r\n                </Form>\r\n                <AddParentRelease {...this.props} />\r\n                <Modal\r\n                    title=\"Add Batch Release\"\r\n                    visible={this.state.modalVisible}\r\n                    onOk={this.handleOk}\r\n                    closable\r\n                    className=\"modal-Layout\"\r\n                    onCancel={this.handleCancel}\r\n                >\r\n                    <AddChildRelease thisData={this.state.currentRecord} closeModal={this.handleOk} dbData={listDataSrc} />\r\n                </Modal>\r\n\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        dataFromLS: state.dataFromLS\r\n    };\r\n};\r\n\r\n\r\nexport default connect(\r\n    mapStateToProps, { onFetchItem }\r\n)(ReleaseList);\r\n"]},"metadata":{},"sourceType":"module"}