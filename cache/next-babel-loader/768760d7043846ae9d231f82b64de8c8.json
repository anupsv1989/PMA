{"ast":null,"code":"var _jsxFileName = \"D:\\\\RandDChamber\\\\LogwardPlugin\\\\ProjectManagement\\\\PMA\\\\pages\\\\hooksAsFunction.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport { render } from \"react-dom\";\n\nfunction hooksAsFunction() {\n  var _useState = useState(0),\n      counterValue = _useState[0],\n      incrementCounter = _useState[1]; // incrementCounter() {\n  //     counterValue = counterValue + 1;\n  // }\n\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, \" Only here since this is a functional component - we can use hooks \"), \">\", __jsx(Button, {\n    onClick: function onClick() {\n      return incrementCounter(counterValue + 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, \" Count + \"), __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }, \" \", counterValue, \" \"));\n}\n\nexport default hooksAsFunction;","map":{"version":3,"sources":["D:/RandDChamber/LogwardPlugin/ProjectManagement/PMA/pages/hooksAsFunction.js"],"names":["useState","render","hooksAsFunction","counterValue","incrementCounter"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,WAAvB;;AAIA,SAASC,eAAT,GAA2B;AAAA,kBAEkBF,QAAQ,CAAC,CAAD,CAF1B;AAAA,MAEhBG,YAFgB;AAAA,MAEFC,gBAFE,iBAGvB;AACA;AACA;;;AAEA,SACI,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EADJ,OAEI,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMA,gBAAgB,CAACD,YAAY,GAAG,CAAhB,CAAtB;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAMA,YAAN,MAHJ,CADJ;AASH;;AAED,eAAeD,eAAf","sourcesContent":["import { useState } from \"react\";\r\nimport { render } from \"react-dom\";\r\n\r\n\r\n\r\nfunction hooksAsFunction() {\r\n\r\n    const [counterValue, incrementCounter] = useState(0)\r\n    // incrementCounter() {\r\n    //     counterValue = counterValue + 1;\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <div> Only here since this is a functional component - we can use hooks </div>>\r\n            <Button onClick={() => incrementCounter(counterValue + 1)} > Count + </Button>\r\n            <h4> {counterValue} </h4>\r\n        </>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default hooksAsFunction;"]},"metadata":{},"sourceType":"module"}