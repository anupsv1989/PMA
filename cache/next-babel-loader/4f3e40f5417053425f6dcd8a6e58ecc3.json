{"ast":null,"code":"var _jsxFileName = \"D:\\\\RandDChamber\\\\LogwardAssignment\\\\ProjectManagement\\\\PMA\\\\containers\\\\ChildReleaseList.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Table, Popconfirm, Popover, Row, Col, Button, Tag, Input, Select, Slider, DatePicker, Form, Progress } from \"antd\";\nimport { connect } from \"react-redux\";\nimport actions from \"../redux/action\";\nimport moment from 'moment';\nimport { EllipsisOutlined, EditOutlined } from '@ant-design/icons';\nimport { statusDisplay, progressDisplay, dateFormat } from \"../commons/helpers\";\nconst {\n  onFetchItem\n} = actions;\n\nclass ChildReleaseList extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"isEditing\", record => record.key === this.state.editingKey);\n\n    _defineProperty(this, \"EditableCell\", (_ref) => {\n      let {\n        editing,\n        dataIndex,\n        title,\n        inputType,\n        record,\n        index,\n        children\n      } = _ref,\n          restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n      // console.log(\"started 1\", children)\n      // console.log(\"started 2\", record)\n      // console.log(\"started 4\", dataIndex)\n      // console.log(\"started 5\", title)\n      let inputNode;\n\n      switch (dataIndex) {\n        case \"version\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.version,\n            name: \"version\",\n            onChange: this.handleVersion,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"startDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"startDate\",\n            defaultValue: moment(record.startDate, dateFormat),\n            onChange: this.handleStartDate,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"endDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"endDate\",\n            defaultValue: moment(record.endDate, dateFormat),\n            onChange: this.handleEndDate,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"description\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.description,\n            onChange: this.handleDescription,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"status\":\n          inputNode = statusDisplay(this.state.releaseType); // inputNode =\n          //     <Select style={{ width: 120 }} name=\"status\" onChange={this.handleChange} defaultValue={record.status}>\n          //         <Option value=\"IN PROGRESS\">In Progress</Option>\n          //         <Option value=\"UNRELEASED\">Unreleased</Option>\n          //         <Option value=\"RELEASED\">Released</Option>\n          //     </Select>\n          // onChange = { handleChange }\n\n          break;\n\n        case \"progress\":\n          inputNode = __jsx(Slider, {\n            defaultValue: 0,\n            tooltipVisible: true,\n            name: \"progress\",\n            onChange: this.handleSlider,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 29\n            }\n          });\n          break;\n      } // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n\n\n      return __jsx(\"td\", _extends({}, restProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }\n      }), editing ? __jsx(Form.Item, {\n        name: dataIndex,\n        style: {\n          margin: 0\n        },\n        rules: [{\n          required: true,\n          message: `Please Input ${title}!`\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }\n      }, inputNode) : children); // }\n    });\n\n    _defineProperty(this, \"handleChange\", value => {\n      console.log(\"Vlaue\", value);\n      this.setState({\n        editStatus: value\n      });\n    });\n\n    _defineProperty(this, \"handleSlider\", value => {\n      console.log(\"slider Vlaue\", value);\n      let releaseType = \"IN PROGRESS\";\n\n      if (value == 0) {\n        releaseType = \"IN PROGRESS\";\n      } else if (value == 100) {\n        releaseType = \"RELEASED\";\n      } else {\n        releaseType = \"UNRELEASED\";\n      }\n\n      this.setState({\n        editProgress: value,\n        releaseType: releaseType\n      });\n    });\n\n    _defineProperty(this, \"handleStartDate\", (date, str) => {\n      console.log(\"sliceer sd str\", str);\n      this.setState({\n        editstartDate: str\n      });\n    });\n\n    _defineProperty(this, \"handleEndDate\", (date, str) => {\n      console.log(\"sliceer ed\", str);\n      this.setState({\n        editEndDate: str\n      });\n    });\n\n    _defineProperty(this, \"handleDescription\", e => {\n      console.log(\"sliceer desc\", e.target.value);\n      this.setState({\n        editDescription: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"cancel\", () => {\n      this.setState({\n        editingKey: ''\n      });\n    });\n\n    this.state = {\n      releaseType: \"IN PROGRESS\",\n      editingKey: '',\n      editStatus: \"\",\n      editProgress: \"\",\n      editstartDate: \"\",\n      editEndDate: \"\",\n      editDescription: \"\",\n      childColumns: [{\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n        editable: true,\n        render: rec => statusDisplay(rec)\n      }, {\n        title: 'Progess',\n        dataIndex: 'progress',\n        key: 'progress',\n        editable: true,\n        render: rec => progressDisplay(rec)\n      }, {\n        title: 'Start Date',\n        dataIndex: 'startDate',\n        key: 'startDate',\n        editable: true\n      }, {\n        title: 'End Date',\n        dataIndex: 'endDate',\n        key: 'endDate',\n        editable: true\n      }, {\n        title: 'Description',\n        dataIndex: 'description',\n        key: 'description',\n        editable: true\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: (text, record) => {\n          const editable = this.isEditing(record);\n          return editable ? __jsx(\"span\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 29\n            }\n          }, __jsx(\"a\", {\n            href: \"javascript:;\",\n            onClick: () => this.save(record),\n            style: {\n              marginRight: 8\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 33\n            }\n          }, \"Save\"), __jsx(Popconfirm, {\n            title: \"Sure to cancel?\",\n            onConfirm: this.cancel,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 33\n            }\n          }, __jsx(\"a\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 37\n            }\n          }, \"Cancel\"))) : __jsx(EditOutlined, {\n            disabled: this.state.editingKey !== '',\n            onClick: () => this.edit(record),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 33\n            }\n          });\n        }\n      }]\n    };\n  }\n\n  save(record) {\n    console.log(\"Form submit\", record);\n    console.log(\"Form submit this data\", this.props.thisData);\n    let {\n      editstartDate,\n      editEndDate,\n      editDescription,\n      editStatus,\n      editProgress\n    } = this.state;\n    let temp = this.props.thisData;\n    temp.childRelease.map(item => {\n      if (item.key == record.key) {\n        item.key = record.key;\n        item.status = editStatus != \"\" ? editStatus : item.status;\n        item.progress = editProgress != \"\" ? editProgress : item.progress;\n        item.startDate = editstartDate != \"\" ? editstartDate : item.startDate;\n        item.endDate = editEndDate != \"\" ? editEndDate : item.endDate;\n        item.description = editDescription != \"\" ? editDescription : item.description;\n      }\n    });\n    let arr = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\n    let index = arr.map(x => {\n      return x.key;\n    }).indexOf(temp.key);\n    arr.splice(index, 1);\n    let addData = temp;\n    arr.unshift(addData); // debugger;\n\n    console.log(\"Presnet Obj list form after \", arr);\n    localStorage.setItem('parentReleaseData', JSON.stringify(arr));\n    this.setState({\n      editStatus: \"\",\n      editProgress: \"\",\n      editstartDate: \"\",\n      editEndDate: \"\",\n      editDescription: \"\"\n    });\n    this.props.onFetchItem();\n  }\n\n  edit(record) {\n    this.setState({\n      editingKey: record.key\n    });\n  }\n\n  render() {\n    const components = {\n      body: {\n        cell: this.EditableCell\n      }\n    };\n    const columns = this.state.childColumns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return _objectSpread({}, col, {\n        onCell: record => ({\n          record,\n          inputType: col.dataIndex,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record)\n        })\n      });\n    });\n    return __jsx(Table, {\n      columns: columns,\n      dataSource: this.props.thisData.childRelease,\n      pagination: false,\n      components: components,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    dataFromLS: state.dataFromLS\n  };\n};\n\nexport default connect(mapStateToProps, {\n  onFetchItem\n})(ChildReleaseList);","map":{"version":3,"sources":["D:/RandDChamber/LogwardAssignment/ProjectManagement/PMA/containers/ChildReleaseList.js"],"names":["React","Component","Table","Popconfirm","Popover","Row","Col","Button","Tag","Input","Select","Slider","DatePicker","Form","Progress","connect","actions","moment","EllipsisOutlined","EditOutlined","statusDisplay","progressDisplay","dateFormat","onFetchItem","ChildReleaseList","constructor","props","record","key","state","editingKey","editing","dataIndex","title","inputType","index","children","restProps","inputNode","version","handleVersion","startDate","handleStartDate","endDate","handleEndDate","description","handleDescription","releaseType","handleSlider","margin","required","message","value","console","log","setState","editStatus","editProgress","date","str","editstartDate","editEndDate","e","target","editDescription","childColumns","editable","render","rec","text","isEditing","save","marginRight","cancel","edit","thisData","temp","childRelease","map","item","status","progress","arr","JSON","parse","localStorage","getItem","x","indexOf","splice","addData","unshift","setItem","stringify","components","body","cell","EditableCell","columns","col","onCell","mapStateToProps","dataFromLS"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n    Table, Popconfirm, Popover, Row, Col, Button, Tag,\r\n    Input, Select, Slider, DatePicker, Form, Progress\r\n} from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"../redux/action\";\r\nimport moment from 'moment';\r\nimport { EllipsisOutlined, EditOutlined } from '@ant-design/icons';\r\nimport { statusDisplay, progressDisplay, dateFormat } from \"../commons/helpers\";\r\nconst { onFetchItem } = actions;\r\n\r\nclass ChildReleaseList extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            releaseType: \"IN PROGRESS\",\r\n            editingKey: '',\r\n            editStatus: \"\",\r\n            editProgress: \"\",\r\n            editstartDate: \"\",\r\n            editEndDate: \"\",\r\n            editDescription: \"\",\r\n            childColumns: [\r\n\r\n                {\r\n                    title: 'Status',\r\n                    dataIndex: 'status',\r\n                    key: 'status',\r\n                    editable: true,\r\n                    render: (rec) => statusDisplay(rec)\r\n                },\r\n                {\r\n                    title: 'Progess',\r\n                    dataIndex: 'progress',\r\n                    key: 'progress',\r\n                    editable: true,\r\n                    render: (rec) => progressDisplay(rec)\r\n                },\r\n                {\r\n                    title: 'Start Date',\r\n                    dataIndex: 'startDate',\r\n                    key: 'startDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'End Date',\r\n                    dataIndex: 'endDate',\r\n                    key: 'endDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Description',\r\n                    dataIndex: 'description',\r\n                    key: 'description',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Action',\r\n                    key: 'action',\r\n                    render: (text, record) => {\r\n                        const editable = this.isEditing(record);\r\n\r\n                        return editable ? (\r\n                            <span>\r\n                                <a\r\n                                    href=\"javascript:;\"\r\n                                    onClick={() => this.save(record)}\r\n                                    style={{\r\n                                        marginRight: 8,\r\n                                    }}\r\n                                >\r\n                                    Save\r\n                            </a>\r\n                                <Popconfirm title=\"Sure to cancel?\" onConfirm={this.cancel} >\r\n                                    <a>Cancel</a>\r\n                                </Popconfirm>\r\n                            </span>\r\n                        ) : (\r\n                                <EditOutlined disabled={this.state.editingKey !== ''} onClick={() => this.edit(record)} />\r\n                            );\r\n                    }\r\n                }\r\n            ],\r\n        }\r\n    }\r\n\r\n\r\n    isEditing = record => record.key === this.state.editingKey;\r\n\r\n    EditableCell = ({\r\n        editing,\r\n        dataIndex,\r\n        title,\r\n        inputType,\r\n        record,\r\n        index,\r\n        children,\r\n        ...restProps\r\n    }) => {\r\n        // console.log(\"started 1\", children)\r\n        // console.log(\"started 2\", record)\r\n        // console.log(\"started 4\", dataIndex)\r\n        // console.log(\"started 5\", title)\r\n        let inputNode;\r\n\r\n\r\n        switch (dataIndex) {\r\n            case \"version\":\r\n                inputNode = <Input defaultValue={record.version} name=\"version\" onChange={this.handleVersion} />\r\n                break;\r\n            case \"startDate\":\r\n                inputNode = <DatePicker name=\"startDate\" defaultValue={moment(record.startDate, dateFormat)} onChange={this.handleStartDate} />\r\n                break;\r\n            case \"endDate\":\r\n                inputNode = <DatePicker name=\"endDate\" defaultValue={moment(record.endDate, dateFormat)} onChange={this.handleEndDate} />\r\n                break;\r\n            case \"description\":\r\n                inputNode = <Input defaultValue={record.description} onChange={this.handleDescription} />\r\n                break;\r\n            case \"status\":\r\n                inputNode = statusDisplay(this.state.releaseType)\r\n                // inputNode =\r\n                //     <Select style={{ width: 120 }} name=\"status\" onChange={this.handleChange} defaultValue={record.status}>\r\n                //         <Option value=\"IN PROGRESS\">In Progress</Option>\r\n                //         <Option value=\"UNRELEASED\">Unreleased</Option>\r\n                //         <Option value=\"RELEASED\">Released</Option>\r\n                //     </Select>\r\n                // onChange = { handleChange }\r\n                break;\r\n            case \"progress\":\r\n                inputNode = <Slider defaultValue={0} tooltipVisible name=\"progress\" onChange={this.handleSlider} />\r\n                break;\r\n        }\r\n\r\n        // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\r\n        return (\r\n            <td {...restProps}>\r\n                {editing ?\r\n                    (\r\n                        <Form.Item\r\n                            name={dataIndex}\r\n                            style={{ margin: 0 }}\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: `Please Input ${title}!`,\r\n                                },\r\n                            ]}\r\n                        >\r\n                            {inputNode}\r\n                        </Form.Item>\r\n\r\n                    )\r\n\r\n                    : (\r\n                        children\r\n                    )}\r\n            </td>\r\n        );\r\n        // }\r\n    };\r\n\r\n    handleChange = (value) => {\r\n        console.log(\"Vlaue\", value)\r\n        this.setState({\r\n            editStatus: value\r\n        })\r\n    }\r\n\r\n    handleSlider = (value) => {\r\n        console.log(\"slider Vlaue\", value);\r\n        let releaseType = \"IN PROGRESS\"\r\n        if (value == 0) {\r\n            releaseType = \"IN PROGRESS\"\r\n        } else if (value == 100) {\r\n            releaseType = \"RELEASED\"\r\n        } else {\r\n            releaseType = \"UNRELEASED\"\r\n        }\r\n        this.setState({\r\n            editProgress: value,\r\n            releaseType: releaseType\r\n        })\r\n    }\r\n    handleStartDate = (date, str) => {\r\n        console.log(\"sliceer sd str\", str)\r\n        this.setState({\r\n            editstartDate: str\r\n        })\r\n    }\r\n    handleEndDate = (date, str) => {\r\n        console.log(\"sliceer ed\", str)\r\n        this.setState({\r\n            editEndDate: str\r\n        })\r\n    }\r\n    handleDescription = (e) => {\r\n        console.log(\"sliceer desc\", e.target.value)\r\n        this.setState({\r\n            editDescription: e.target.value\r\n        })\r\n    }\r\n\r\n    save(record) {\r\n        console.log(\"Form submit\", record)\r\n        console.log(\"Form submit this data\", this.props.thisData)\r\n        let { editstartDate, editEndDate, editDescription, editStatus, editProgress } = this.state;\r\n        let temp = this.props.thisData;\r\n        temp.childRelease.map(item => {\r\n            if (item.key == record.key) {\r\n                item.key = record.key;\r\n                item.status = editStatus != \"\" ? editStatus : item.status;\r\n                item.progress = editProgress != \"\" ? editProgress : item.progress;\r\n                item.startDate = editstartDate != \"\" ? editstartDate : item.startDate;\r\n                item.endDate = editEndDate != \"\" ? editEndDate : item.endDate;\r\n                item.description = editDescription != \"\" ? editDescription : item.description;\r\n            }\r\n        })\r\n\r\n        let arr = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\r\n\r\n        let index = arr.map(x => {\r\n            return x.key;\r\n        }).indexOf(temp.key);\r\n        arr.splice(index, 1);\r\n        let addData = temp;\r\n        arr.unshift(addData);\r\n\r\n        // debugger;\r\n        console.log(\"Presnet Obj list form after \", arr)\r\n        localStorage.setItem('parentReleaseData', JSON.stringify(arr));\r\n        this.setState({\r\n            editStatus: \"\",\r\n            editProgress: \"\",\r\n            editstartDate: \"\",\r\n            editEndDate: \"\",\r\n            editDescription: \"\",\r\n        })\r\n        this.props.onFetchItem();\r\n    }\r\n\r\n\r\n\r\n    cancel = () => {\r\n        this.setState({ editingKey: '' });\r\n    };\r\n\r\n    edit(record) {\r\n        this.setState({ editingKey: record.key });\r\n    }\r\n\r\n    render() {\r\n\r\n        const components = {\r\n            body: {\r\n                cell: this.EditableCell,\r\n            },\r\n        };\r\n\r\n        const columns = this.state.childColumns.map(col => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n            return {\r\n                ...col,\r\n                onCell: record => ({\r\n                    record,\r\n                    inputType: col.dataIndex,\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    editing: this.isEditing(record),\r\n                }),\r\n            };\r\n        });\r\n\r\n        return (\r\n\r\n            <Table\r\n                columns={columns}\r\n                dataSource={this.props.thisData.childRelease}\r\n                pagination={false}\r\n                components={components}\r\n            />\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        dataFromLS: state.dataFromLS\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps, { onFetchItem }\r\n)(ChildReleaseList);\r\n"]},"metadata":{},"sourceType":"module"}