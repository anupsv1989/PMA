{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchUser),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\n\nfunction fetchUser(action) {\n  var user;\n  return _regeneratorRuntime.wrap(function fetchUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(Api.fetchUser, action.payload.userId);\n\n        case 3:\n          user = _context.sent;\n          _context.next = 6;\n          return put({\n            type: \"USER_FETCH_SUCCEEDED\",\n            user: user\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: \"USER_FETCH_FAILED\",\n            message: _context.t0.message\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(\"USER_FETCH_REQUESTED\", fetchUser);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["D:/RandDChamber/LogwardAssignment/ProjectManagement/PMA/redux/saga.js"],"names":["fetchUser","rootSaga","call","put","takeEvery","takeLatest","action","Api","payload","userId","user","type","message"],"mappings":";;oDAEUA,S;qDASeC,Q;;AAXzB,SAASC,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,QAAiD,oBAAjD;;AAEA,SAAUL,SAAV,CAAoBM,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEqB,iBAAMJ,IAAI,CAACK,GAAG,CAACP,SAAL,EAAgBM,MAAM,CAACE,OAAP,CAAeC,MAA/B,CAAV;;AAFrB;AAEcC,UAAAA,IAFd;AAAA;AAGQ,iBAAMP,GAAG,CAAC;AAAEQ,YAAAA,IAAI,EAAE,sBAAR;AAAgCD,YAAAA,IAAI,EAAEA;AAAtC,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKQ,iBAAMP,GAAG,CAAC;AAAEQ,YAAAA,IAAI,EAAE,mBAAR;AAA6BC,YAAAA,OAAO,EAAE,YAAEA;AAAxC,WAAD,CAAT;;AALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,eAAe,SAAUX,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMG,SAAS,CAAC,sBAAD,EAAyBJ,SAAzB,CAAf;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\r\n\r\nfunction* fetchUser(action) {\r\n    try {\r\n        const user = yield call(Api.fetchUser, action.payload.userId);\r\n        yield put({ type: \"USER_FETCH_SUCCEEDED\", user: user });\r\n    } catch (e) {\r\n        yield put({ type: \"USER_FETCH_FAILED\", message: e.message });\r\n    }\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield takeEvery(\"USER_FETCH_REQUESTED\", fetchUser);\r\n}"]},"metadata":{},"sourceType":"module"}