{"ast":null,"code":"var _jsxFileName = \"D:\\\\RandDChamber\\\\LogwardPlugin\\\\ProjectManagement\\\\PMA\\\\pages\\\\hooksAsFunction.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport { render } from \"react-dom\";\nimport ObjectsinHooks from \"../containers/objectsinHooks\";\nimport ArraysinHooks from \"../containers/arraysinhooks\";\n\nfunction hooksAsFunction() {\n  const initialVal = 0;\n  const {\n    0: counterValue,\n    1: incrementCounter\n  } = useState(initialVal);\n  useEffect(() => {\n    document.title = \"Title - \" + counterValue;\n  });\n\n  const incrementBy5 = () => {\n    for (var i = 0; i < 5; i++) {\n      incrementCounter(prevVal => prevVal + 1);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, \" Only here since this is a functional component - we can use hooks \"), \">\", __jsx(\"button\", {\n    onClick: () => incrementCounter(prevVal => prevVal + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, \"Counter +\"), __jsx(\"button\", {\n    onClick: () => incrementCounter(prevVal => prevVal - 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, \"Counter -\"), __jsx(\"button\", {\n    onClick: () => incrementCounter(initialVal),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, \"Counter 0\"), __jsx(\"button\", {\n    onClick: incrementBy5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, \"Counter +5\"), __jsx(\"button\", {\n    onClick: () => incrementCounter(counterValue + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, \"Use Effect Demo\"), __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, \" \", counterValue, \" \"), __jsx(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }), __jsx(ObjectsinHooks, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }), __jsx(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }), __jsx(ArraysinHooks, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default hooksAsFunction;","map":{"version":3,"sources":["D:/RandDChamber/LogwardPlugin/ProjectManagement/PMA/pages/hooksAsFunction.js"],"names":["useState","useEffect","render","ObjectsinHooks","ArraysinHooks","hooksAsFunction","initialVal","counterValue","incrementCounter","document","title","incrementBy5","i","prevVal"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,aAAP,MAA0B,6BAA1B;;AAGA,SAASC,eAAT,GAA2B;AAEvB,QAAMC,UAAU,GAAG,CAAnB;AACA,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAmCR,QAAQ,CAACM,UAAD,CAAjD;AAGAL,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,QAAQ,CAACC,KAAT,GAAiB,aAAaH,YAA9B;AACH,GAFQ,CAAT;;AAIA,QAAMI,YAAY,GAAG,MAAM;AAEvB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBJ,MAAAA,gBAAgB,CAACK,OAAO,IAAIA,OAAO,GAAG,CAAtB,CAAhB;AACH;AAEJ,GAND;;AASA,SACI,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EADJ,OAGI;AAAQ,IAAA,OAAO,EAAE,MAAML,gBAAgB,CAACK,OAAO,IAAIA,OAAO,GAAG,CAAtB,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHJ,EAII;AAAQ,IAAA,OAAO,EAAE,MAAML,gBAAgB,CAACK,OAAO,IAAIA,OAAO,GAAG,CAAtB,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJJ,EAKI;AAAQ,IAAA,OAAO,EAAE,MAAML,gBAAgB,CAACF,UAAD,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALJ,EAOI;AAAQ,IAAA,OAAO,EAAEK,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPJ,EASI;AAAQ,IAAA,OAAO,EAAE,MAAMH,gBAAgB,CAACD,YAAY,GAAG,CAAhB,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBATJ,EAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAMA,YAAN,MAXJ,EAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbJ,EAcI,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdJ,EAeI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfJ,EAgBI,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBJ,CADJ;AAsBH;;AAED,eAAeF,eAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport ObjectsinHooks from \"../containers/objectsinHooks\"\r\nimport ArraysinHooks from \"../containers/arraysinhooks\";\r\n\r\n\r\nfunction hooksAsFunction() {\r\n\r\n    const initialVal = 0;\r\n    const [counterValue, incrementCounter] = useState(initialVal)\r\n\r\n\r\n    useEffect(() => {\r\n        document.title = \"Title - \" + counterValue\r\n    })\r\n\r\n    const incrementBy5 = () => {\r\n\r\n        for (var i = 0; i < 5; i++) {\r\n            incrementCounter(prevVal => prevVal + 1)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div> Only here since this is a functional component - we can use hooks </div>>\r\n\r\n            <button onClick={() => incrementCounter(prevVal => prevVal + 1)}>Counter +</button>\r\n            <button onClick={() => incrementCounter(prevVal => prevVal - 1)}>Counter -</button>\r\n            <button onClick={() => incrementCounter(initialVal)}>Counter 0</button>\r\n\r\n            <button onClick={incrementBy5}>Counter +5</button>\r\n\r\n            <button onClick={() => incrementCounter(counterValue + 1)}>Use Effect Demo</button>\r\n\r\n            <h4> {counterValue} </h4>\r\n\r\n            <hr />\r\n            <ObjectsinHooks />\r\n            <hr />\r\n            <ArraysinHooks />\r\n        </>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default hooksAsFunction;"]},"metadata":{},"sourceType":"module"}