{"ast":null,"code":"var _jsxFileName = \"D:\\\\RandDChamber\\\\LogwardAssignment\\\\ProjectManagement\\\\PMA\\\\containers\\\\parentReleaseList.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, useState, version } from \"react\";\nimport { Table, Tag, Form, Input, InputNumber, Popconfirm, Row, Col, Dropdown, Progress, DatePicker, Select, Slider, Popover, Button, Modal, Badge } from 'antd';\nimport AddParentRelease from './addParentRelease';\nimport moment from 'moment';\nimport AddChildRelease from \"./addChildRelease\";\nconst dateFormat = \"DD-MM-YYYY\";\nexport default class ReleaseList extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"addChildItem\", rec => {\n      console.log(\"children \", rec);\n      this.setState({\n        modalVisible: true,\n        currentRecord: rec\n      });\n    });\n\n    _defineProperty(this, \"deleteItem\", rec => {});\n\n    _defineProperty(this, \"EditableCell\", (_ref) => {\n      let {\n        editing,\n        dataIndex,\n        title,\n        inputType,\n        record,\n        index,\n        children\n      } = _ref,\n          restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n      // console.log(\"started 1\", children)\n      // console.log(\"started 2\", record)\n      // console.log(\"started 4\", dataIndex)\n      // console.log(\"started 5\", title)\n      let inputNode;\n\n      switch (dataIndex) {\n        case \"version\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.version,\n            name: \"version\",\n            onChange: this.handleVersion,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"startDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"startDate\",\n            defaultValue: moment(record.startDate, dateFormat),\n            onChange: this.handleStartDate,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"endDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"endDate\",\n            defaultValue: moment(record.endDate, dateFormat),\n            onChange: this.handleEndDate,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"description\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.description,\n            onChange: this.handleDescription,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"status\":\n          inputNode = __jsx(Select, {\n            style: {\n              width: 120\n            },\n            name: \"status\",\n            onChange: this.handleChange,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 21\n            }\n          }, __jsx(Option, {\n            value: \"IN PROGRESS\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 25\n            }\n          }, \"In Progress\"), __jsx(Option, {\n            value: \"UNRELEASED\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 25\n            }\n          }, \"Unreleased\"), __jsx(Option, {\n            value: \"RELEASED\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 25\n            }\n          }, \"Released\")); // onChange = { handleChange }\n\n          break;\n\n        case \"progress\":\n          inputNode = __jsx(Slider, {\n            defaultValue: 30,\n            tooltipVisible: true,\n            name: \"progress\",\n            onChange: this.handleSlider,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        default: // code block\n\n      } // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n\n\n      return __jsx(\"td\", _extends({}, restProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }\n      }), editing ? __jsx(Form.Item, {\n        name: dataIndex,\n        style: {\n          margin: 0\n        },\n        rules: [{\n          required: true,\n          message: `Please Input ${title}!`\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 25\n        }\n      }, inputNode) : children); // }\n    });\n\n    _defineProperty(this, \"handleChange\", value => {\n      console.log(\"Vlaue\", value);\n      this.setState({\n        editStatus: value\n      });\n    });\n\n    _defineProperty(this, \"handleSlider\", value => {\n      console.log(\"slider Vlaue\", value);\n      this.setState({\n        editProgress: value\n      });\n    });\n\n    _defineProperty(this, \"handleStartDate\", (date, str) => {\n      console.log(\"sliceer sd str\", str);\n      this.setState({\n        editstartDate: str\n      });\n    });\n\n    _defineProperty(this, \"handleEndDate\", (date, str) => {\n      console.log(\"sliceer ed\", str);\n      this.setState({\n        editEndDate: str\n      });\n    });\n\n    _defineProperty(this, \"handleDescription\", e => {\n      console.log(\"sliceer desc\", e.target.value);\n      this.setState({\n        editDescription: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleVersion\", e => {\n      console.log(\"sliceer vers\", e.target.value);\n      this.setState({\n        editVersion: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"isEditing\", record => record.key === this.state.editingKey);\n\n    _defineProperty(this, \"cancel\", () => {\n      this.setState({\n        editingKey: ''\n      });\n    });\n\n    _defineProperty(this, \"handleCancel\", () => {\n      this.setState({\n        modalVisible: false\n      });\n    });\n\n    _defineProperty(this, \"handleOk\", () => {\n      this.setState({\n        modalVisible: false\n      });\n    });\n\n    let _this = this;\n\n    this.state = {\n      editingKey: '',\n      editVersion: \"\",\n      editStatus: \"\",\n      editProgress: \"\",\n      editstartDate: \"\",\n      editEndDate: \"\",\n      editDescription: \"\",\n      modalVisible: false,\n      currentRecord: {},\n      columns: [{\n        title: 'Version No',\n        dataIndex: 'version',\n        key: 'version',\n        render: text => __jsx(\"a\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 37\n          }\n        }, text),\n        editable: true\n      }, {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n        editable: true\n      }, {\n        title: 'Progress',\n        dataIndex: 'progress',\n        key: 'progress',\n        editable: true,\n        render: rec => __jsx(Progress, {\n          strokeColor: {\n            '0%': '#108ee9',\n            '100%': '#87d068'\n          },\n          percent: rec,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }\n        })\n      }, {\n        title: 'Start Date',\n        dataIndex: 'startDate',\n        key: 'startDate',\n        editable: true\n      }, {\n        title: 'Release Date',\n        dataIndex: 'endDate',\n        key: 'endDate',\n        editable: true\n      }, {\n        title: 'Description',\n        dataIndex: 'description',\n        key: 'description',\n        editable: true\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: (text, record) => {\n          const editable = this.isEditing(record);\n\n          const Content = __jsx(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 29\n            }\n          }, __jsx(Row, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 33\n            }\n          }, __jsx(Col, {\n            span: 8,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 37\n            }\n          }, __jsx(\"a\", {\n            disabled: this.state.editingKey !== '',\n            onClick: () => this.edit(record),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 51\n            }\n          }, \"Edit\")), __jsx(Col, {\n            span: 8,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 37\n            }\n          }, __jsx(\"a\", {\n            disabled: this.state.editingKey !== '',\n            onClick: () => this.addChildItem(record),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 51\n            }\n          }, \"Add\")), __jsx(Col, {\n            span: 8,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 37\n            }\n          }, __jsx(\"a\", {\n            disabled: this.state.editingKey !== '',\n            onClick: () => this.deleteItem(record),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 51\n            }\n          }, \"Delete\"))));\n\n          return editable ? __jsx(\"span\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 29\n            }\n          }, __jsx(\"a\", {\n            href: \"javascript:;\",\n            onClick: () => this.save(record),\n            style: {\n              marginRight: 8\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 33\n            }\n          }, \"Save\"), __jsx(Popconfirm, {\n            title: \"Sure to cancel?\",\n            onConfirm: this.cancel,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 33\n            }\n          }, __jsx(\"a\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 37\n            }\n          }, \"Cancel\"))) : __jsx(Popover, {\n            content: Content,\n            title: \"Title\",\n            trigger: \"hover\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 33\n            }\n          }, __jsx(Button, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 37\n            }\n          }, \"Hover me\"));\n        }\n      }],\n      childColumns: [{\n        title: 'Description',\n        dataIndex: 'description',\n        key: 'description',\n        editable: true\n      }, {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n        editable: true\n      }],\n      listDataSrc: [],\n      isEdit: false\n    };\n  }\n\n  componentDidMount() {\n    let chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\n    let getItems = chkItem == null ? [] : chkItem;\n    this.setState({\n      listDataSrc: getItems\n    });\n  }\n\n  save(record) {\n    console.log(\"Form submit\", record);\n    let {\n      editVersion,\n      editstartDate,\n      editEndDate,\n      editDescription,\n      editStatus,\n      editProgress,\n      listDataSrc\n    } = this.state; // let arr = this.state.localPRItems;\n\n    let prObj = {\n      key: record.key,\n      version: editVersion,\n      status: editStatus,\n      progress: editProgress,\n      startDate: editstartDate,\n      endDate: editEndDate,\n      description: editDescription\n    };\n    console.log(\"Presnet Obj\", prObj);\n    console.log(\"Presnet Obj list form before\", listDataSrc);\n    listDataSrc.map(item => {\n      if (item.key == record.key) {\n        item.key = record.key;\n        item.childRelease = [];\n        item.version = editVersion != \"\" ? editVersion : item.version;\n        item.status = editStatus != \"\" ? editStatus : item.status;\n        item.progress = editProgress != \"\" ? editProgress : item.progress;\n        item.startDate = editstartDate != \"\" ? editstartDate : item.startDate;\n        item.endDate = editEndDate != \"\" ? editEndDate : item.endDate;\n        item.description = editDescription != \"\" ? editDescription : item.description;\n      }\n    });\n    console.log(\"Presnet Obj list form after \", listDataSrc);\n    localStorage.setItem('parentReleaseData', JSON.stringify(listDataSrc)); // form.validateFields((error, row) => {\n    //     if (error) {\n    //         return;\n    //     }\n    //     console.log(\"Form submit\", key)\n    //     console.log(\"Form submit form\", form)\n    //     const newData = [...this.state.data];\n    //     const index = newData.findIndex(item => key === item.key);\n    //     if (index > -1) {\n    //         const item = newData[index];\n    //         newData.splice(index, 1, {\n    //             ...item,\n    //             ...row,\n    //         });\n    //         this.setState({ data: newData, editingKey: '' });\n    //     } else {\n    //         newData.push(row);\n    //         this.setState({ data: newData, editingKey: '' });\n    //     }\n    // });\n  }\n\n  edit(record) {\n    this.setState({\n      editingKey: record.key\n    });\n  }\n\n  render() {\n    let {\n      listDataSrc\n    } = this.state;\n    const components = {\n      body: {\n        cell: this.EditableCell\n      }\n    };\n    const columns = this.state.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return _objectSpread({}, col, {\n        onCell: record => ({\n          record,\n          inputType: col.dataIndex,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record)\n        })\n      });\n    });\n    const expandedRowRender = {};\n    return __jsx(React.Fragment, null, __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 17\n      }\n    }, __jsx(Table, {\n      columns: columns,\n      dataSource: listDataSrc,\n      components: components,\n      expandable: {\n        expandedRowRender: record => {\n          console.log(\"Recrod of main table\", record);\n        }\n      },\n      rowClassName: \"editable-row\",\n      pagination: {\n        onChange: this.cancel\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 21\n      }\n    })), __jsx(AddParentRelease, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 17\n      }\n    }), __jsx(Modal, {\n      title: \"Basic Modal\",\n      visible: this.state.modalVisible,\n      onOk: this.handleOk,\n      closable: true,\n      className: \"modal-Layout\",\n      onCancel: this.handleCancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 17\n      }\n    }, __jsx(AddChildRelease, {\n      thisData: this.state.currentRecord,\n      closeModal: this.handleOk,\n      dbData: listDataSrc,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["D:/RandDChamber/LogwardAssignment/ProjectManagement/PMA/containers/parentReleaseList.js"],"names":["React","Component","useState","version","Table","Tag","Form","Input","InputNumber","Popconfirm","Row","Col","Dropdown","Progress","DatePicker","Select","Slider","Popover","Button","Modal","Badge","AddParentRelease","moment","AddChildRelease","dateFormat","ReleaseList","constructor","props","rec","console","log","setState","modalVisible","currentRecord","editing","dataIndex","title","inputType","record","index","children","restProps","inputNode","handleVersion","startDate","handleStartDate","endDate","handleEndDate","description","handleDescription","width","handleChange","handleSlider","margin","required","message","value","editStatus","editProgress","date","str","editstartDate","editEndDate","e","target","editDescription","editVersion","key","state","editingKey","_this","columns","render","text","editable","isEditing","Content","edit","addChildItem","deleteItem","save","marginRight","cancel","childColumns","listDataSrc","isEdit","componentDidMount","chkItem","JSON","parse","localStorage","getItem","getItems","prObj","status","progress","map","item","childRelease","setItem","stringify","components","body","cell","EditableCell","col","onCell","expandedRowRender","onChange","handleOk","handleCancel"],"mappings":"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","sourcesContent":["import React, { Component, useState, version } from \"react\";\r\nimport {\r\n    Table, Tag, Form, Input, InputNumber, Popconfirm, Row, Col, Dropdown,\r\n    Progress, DatePicker, Select, Slider, Popover, Button, Modal, Badge\r\n} from 'antd';\r\nimport AddParentRelease from './addParentRelease';\r\nimport moment from 'moment';\r\nimport AddChildRelease from \"./addChildRelease\";\r\n\r\nconst dateFormat = \"DD-MM-YYYY\";\r\n\r\n\r\n\r\nexport default class ReleaseList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let _this = this;\r\n        this.state = {\r\n            editingKey: '',\r\n            editVersion: \"\",\r\n            editStatus: \"\",\r\n            editProgress: \"\",\r\n            editstartDate: \"\",\r\n            editEndDate: \"\",\r\n            editDescription: \"\",\r\n            modalVisible: false,\r\n            currentRecord: {},\r\n            columns: [\r\n                {\r\n                    title: 'Version No',\r\n                    dataIndex: 'version',\r\n                    key: 'version',\r\n                    render: text => <a>{text}</a>,\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Status',\r\n                    dataIndex: 'status',\r\n                    key: 'status',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Progress',\r\n                    dataIndex: 'progress',\r\n                    key: 'progress',\r\n                    editable: true,\r\n                    render: (rec) => (\r\n                        <Progress\r\n                            strokeColor={{\r\n                                '0%': '#108ee9',\r\n                                '100%': '#87d068',\r\n                            }}\r\n                            percent={rec}\r\n                        />\r\n                    ),\r\n                },\r\n                {\r\n                    title: 'Start Date',\r\n                    dataIndex: 'startDate',\r\n                    key: 'startDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Release Date',\r\n                    dataIndex: 'endDate',\r\n                    key: 'endDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Description',\r\n                    dataIndex: 'description',\r\n                    key: 'description',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Action',\r\n                    key: 'action',\r\n                    render: (text, record) => {\r\n                        const editable = this.isEditing(record);\r\n                        const Content = (\r\n                            <div>\r\n                                <Row>\r\n                                    <Col span={8}><a disabled={this.state.editingKey !== ''} onClick={() => this.edit(record)}>Edit</a></Col>\r\n                                    <Col span={8}><a disabled={this.state.editingKey !== ''} onClick={() => this.addChildItem(record)}>Add</a></Col>\r\n                                    <Col span={8}><a disabled={this.state.editingKey !== ''} onClick={() => this.deleteItem(record)}>Delete</a></Col>\r\n                                </Row>\r\n                            </div>\r\n                        );\r\n                        return editable ? (\r\n                            <span>\r\n                                <a\r\n                                    href=\"javascript:;\"\r\n                                    onClick={() => this.save(record)}\r\n                                    style={{\r\n                                        marginRight: 8,\r\n                                    }}\r\n                                >\r\n                                    Save\r\n                            </a>\r\n                                <Popconfirm title=\"Sure to cancel?\" onConfirm={this.cancel}>\r\n                                    <a>Cancel</a>\r\n                                </Popconfirm>\r\n                            </span>\r\n                        ) : (\r\n                                <Popover content={Content} title=\"Title\" trigger=\"hover\">\r\n                                    <Button>Hover me</Button>\r\n                                </Popover>\r\n                            );\r\n                    }\r\n                }\r\n            ],\r\n            childColumns: [\r\n                {\r\n                    title: 'Description',\r\n                    dataIndex: 'description',\r\n                    key: 'description',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Status',\r\n                    dataIndex: 'status',\r\n                    key: 'status',\r\n                    editable: true,\r\n                },\r\n            ],\r\n            listDataSrc: [],\r\n            isEdit: false\r\n        }\r\n    }\r\n\r\n\r\n    addChildItem = (rec) => {\r\n        console.log(\"children \", rec)\r\n        this.setState({\r\n            modalVisible: true,\r\n            currentRecord: rec\r\n        })\r\n    }\r\n\r\n    deleteItem = (rec) => {\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        let chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\r\n        let getItems = chkItem == null ? [] : chkItem;\r\n        this.setState({\r\n            listDataSrc: getItems\r\n        })\r\n    }\r\n\r\n    EditableCell = ({\r\n        editing,\r\n        dataIndex,\r\n        title,\r\n        inputType,\r\n        record,\r\n        index,\r\n        children,\r\n        ...restProps\r\n    }) => {\r\n        // console.log(\"started 1\", children)\r\n        // console.log(\"started 2\", record)\r\n        // console.log(\"started 4\", dataIndex)\r\n        // console.log(\"started 5\", title)\r\n        let inputNode;\r\n\r\n\r\n        switch (dataIndex) {\r\n            case \"version\":\r\n                inputNode = <Input defaultValue={record.version} name=\"version\" onChange={this.handleVersion} />\r\n                break;\r\n            case \"startDate\":\r\n                inputNode = <DatePicker name=\"startDate\" defaultValue={moment(record.startDate, dateFormat)} onChange={this.handleStartDate} />\r\n                break;\r\n            case \"endDate\":\r\n                inputNode = <DatePicker name=\"endDate\" defaultValue={moment(record.endDate, dateFormat)} onChange={this.handleEndDate} />\r\n                break;\r\n            case \"description\":\r\n                inputNode = <Input defaultValue={record.description} onChange={this.handleDescription} />\r\n                break;\r\n            case \"status\":\r\n                inputNode =\r\n                    <Select style={{ width: 120 }} name=\"status\" onChange={this.handleChange}>\r\n                        <Option value=\"IN PROGRESS\">In Progress</Option>\r\n                        <Option value=\"UNRELEASED\">Unreleased</Option>\r\n                        <Option value=\"RELEASED\">Released</Option>\r\n                    </Select>\r\n                // onChange = { handleChange }\r\n                break;\r\n            case \"progress\":\r\n                inputNode = <Slider defaultValue={30} tooltipVisible name=\"progress\" onChange={this.handleSlider} />\r\n                break;\r\n            default:\r\n            // code block\r\n        }\r\n\r\n        // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\r\n        return (\r\n            <td {...restProps}>\r\n                {editing ?\r\n                    (\r\n                        <Form.Item\r\n                            name={dataIndex}\r\n                            style={{ margin: 0 }}\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: `Please Input ${title}!`,\r\n                                },\r\n                            ]}\r\n                        >\r\n                            {inputNode}\r\n                        </Form.Item>\r\n\r\n                    )\r\n\r\n                    : (\r\n                        children\r\n                    )}\r\n            </td>\r\n        );\r\n        // }\r\n    };\r\n\r\n    handleChange = (value) => {\r\n        console.log(\"Vlaue\", value)\r\n        this.setState({\r\n            editStatus: value\r\n        })\r\n    }\r\n\r\n\r\n\r\n    handleSlider = (value) => {\r\n        console.log(\"slider Vlaue\", value);\r\n        this.setState({\r\n            editProgress: value\r\n        })\r\n    }\r\n    handleStartDate = (date, str) => {\r\n        console.log(\"sliceer sd str\", str)\r\n        this.setState({\r\n            editstartDate: str\r\n        })\r\n    }\r\n    handleEndDate = (date, str) => {\r\n        console.log(\"sliceer ed\", str)\r\n        this.setState({\r\n            editEndDate: str\r\n        })\r\n    }\r\n    handleDescription = (e) => {\r\n        console.log(\"sliceer desc\", e.target.value)\r\n        this.setState({\r\n            editDescription: e.target.value\r\n        })\r\n    }\r\n    handleVersion = (e) => {\r\n        console.log(\"sliceer vers\", e.target.value)\r\n        this.setState({\r\n            editVersion: e.target.value\r\n        })\r\n    }\r\n\r\n    isEditing = record => record.key === this.state.editingKey;\r\n\r\n    cancel = () => {\r\n        this.setState({ editingKey: '' });\r\n    };\r\n\r\n    save(record) {\r\n        console.log(\"Form submit\", record)\r\n        let { editVersion, editstartDate, editEndDate, editDescription, editStatus, editProgress, listDataSrc } = this.state;\r\n\r\n        // let arr = this.state.localPRItems;\r\n        let prObj = {\r\n            key: record.key,\r\n            version: editVersion,\r\n            status: editStatus,\r\n            progress: editProgress,\r\n            startDate: editstartDate,\r\n            endDate: editEndDate,\r\n            description: editDescription\r\n        }\r\n\r\n        console.log(\"Presnet Obj\", prObj)\r\n        console.log(\"Presnet Obj list form before\", listDataSrc)\r\n\r\n\r\n        listDataSrc.map(item => {\r\n            if (item.key == record.key) {\r\n                item.key = record.key;\r\n                item.childRelease = [];\r\n                item.version = editVersion != \"\" ? editVersion : item.version;\r\n                item.status = editStatus != \"\" ? editStatus : item.status;\r\n                item.progress = editProgress != \"\" ? editProgress : item.progress;\r\n                item.startDate = editstartDate != \"\" ? editstartDate : item.startDate;\r\n                item.endDate = editEndDate != \"\" ? editEndDate : item.endDate;\r\n                item.description = editDescription != \"\" ? editDescription : item.description;\r\n            }\r\n        })\r\n        console.log(\"Presnet Obj list form after \", listDataSrc)\r\n        localStorage.setItem('parentReleaseData', JSON.stringify(listDataSrc))\r\n\r\n        // form.validateFields((error, row) => {\r\n        //     if (error) {\r\n        //         return;\r\n        //     }\r\n        //     console.log(\"Form submit\", key)\r\n        //     console.log(\"Form submit form\", form)\r\n        //     const newData = [...this.state.data];\r\n        //     const index = newData.findIndex(item => key === item.key);\r\n        //     if (index > -1) {\r\n        //         const item = newData[index];\r\n        //         newData.splice(index, 1, {\r\n        //             ...item,\r\n        //             ...row,\r\n        //         });\r\n        //         this.setState({ data: newData, editingKey: '' });\r\n        //     } else {\r\n        //         newData.push(row);\r\n        //         this.setState({ data: newData, editingKey: '' });\r\n        //     }\r\n        // });\r\n    }\r\n\r\n    edit(record) {\r\n        this.setState({ editingKey: record.key });\r\n    }\r\n\r\n    handleCancel = () => {\r\n        this.setState({\r\n            modalVisible: false\r\n        })\r\n    }\r\n\r\n    handleOk = () => {\r\n        this.setState({\r\n            modalVisible: false\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        let { listDataSrc } = this.state;\r\n\r\n        const components = {\r\n            body: {\r\n                cell: this.EditableCell,\r\n            },\r\n        };\r\n\r\n        const columns = this.state.columns.map(col => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n            return {\r\n                ...col,\r\n                onCell: record => ({\r\n                    record,\r\n                    inputType: col.dataIndex,\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    editing: this.isEditing(record),\r\n                }),\r\n            };\r\n        });\r\n\r\n        const expandedRowRender = {\r\n\r\n        };\r\n\r\n\r\n        return (\r\n            <>\r\n                <Form>\r\n                    <Table\r\n                        columns={columns}\r\n                        dataSource={listDataSrc}\r\n                        components={components}\r\n                        expandable={{\r\n                            expandedRowRender: record => {\r\n                                console.log(\"Recrod of main table\", record)\r\n                            }\r\n\r\n                        }}\r\n                        rowClassName=\"editable-row\"\r\n                        pagination={{\r\n                            onChange: this.cancel,\r\n                        }}\r\n                    />\r\n                </Form>\r\n                <AddParentRelease />\r\n                <Modal\r\n                    title=\"Basic Modal\"\r\n                    visible={this.state.modalVisible}\r\n                    onOk={this.handleOk}\r\n                    closable\r\n                    className=\"modal-Layout\"\r\n                    onCancel={this.handleCancel}\r\n                >\r\n                    <AddChildRelease thisData={this.state.currentRecord} closeModal={this.handleOk} dbData={listDataSrc} />\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}