{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\RandDChamber\\\\LogwardAssignment\\\\ProjectManagement\\\\PMA\\\\containers\\\\parentReleaseList.js\";\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Table, Input, InputNumber, Popconfirm, Form } from 'antd';\nvar originData = [];\n\nfor (var i = 0; i < 100; i++) {\n  originData.push({\n    key: i.toString(),\n    name: \"Edrward \".concat(i),\n    age: 32,\n    address: \"London Park no. \".concat(i)\n  });\n}\n\nvar EditableCell = function EditableCell(_ref) {\n  var editing = _ref.editing,\n      dataIndex = _ref.dataIndex,\n      title = _ref.title,\n      inputType = _ref.inputType,\n      record = _ref.record,\n      index = _ref.index,\n      children = _ref.children,\n      restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n  var inputNode = inputType === 'number' ? __jsx(InputNumber, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 48\n    }\n  }) : __jsx(Input, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 66\n    }\n  });\n  return __jsx(\"td\", _extends({}, restProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }), editing ? __jsx(Form.Item, {\n    name: dataIndex,\n    style: {\n      margin: 0\n    },\n    rules: [{\n      required: true,\n      message: \"Please Input \".concat(title, \"!\")\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }, inputNode) : children);\n};\n\nvar ReleaseList = function ReleaseList() {\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  var _useState = useState(originData),\n      data = _useState[0],\n      setData = _useState[1];\n\n  var _useState2 = useState(''),\n      editingKey = _useState2[0],\n      setEditingKey = _useState2[1];\n\n  var isEditing = function isEditing(record) {\n    return record.key === editingKey;\n  };\n\n  var edit = function edit(record) {\n    form.setFieldsValue(_objectSpread({}, record));\n    alert(record.key);\n    setEditingKey(record.key);\n  };\n\n  var cancel = function cancel() {\n    setEditingKey('');\n  };\n\n  var save = function save(key) {\n    var row, newData, index, item;\n    return _regeneratorRuntime.async(function save$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(form.validateFields());\n\n          case 3:\n            row = _context.sent;\n            newData = _toConsumableArray(data);\n            index = newData.findIndex(function (item) {\n              return key === item.key;\n            });\n\n            if (index > -1) {\n              item = newData[index];\n              newData.splice(index, 1, _objectSpread({}, item, {}, row));\n              setData(newData);\n              setEditingKey('');\n            } else {\n              newData.push(row);\n              setData(newData);\n              setEditingKey('');\n            }\n\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            console.log('Validate Failed:', _context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  var columns = [{\n    title: 'name',\n    dataIndex: 'name',\n    width: '25%',\n    editable: true\n  }, {\n    title: 'age',\n    dataIndex: 'age',\n    width: '15%'\n  }, {\n    title: 'address',\n    dataIndex: 'address',\n    width: '40%',\n    editable: true\n  }, {\n    title: 'operation',\n    dataIndex: 'operation',\n    render: function render(_, record) {\n      var editable = isEditing(record);\n      return editable ? __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }\n      }, __jsx(\"a\", {\n        href: \"javascript:;\",\n        onClick: function onClick() {\n          return save(record.key);\n        },\n        style: {\n          marginRight: 8\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }\n      }, \"Save\"), __jsx(Popconfirm, {\n        title: \"Sure to cancel?\",\n        onConfirm: cancel,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 25\n        }\n      }, __jsx(\"a\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 29\n        }\n      }, \"Cancel\"))) : __jsx(\"a\", {\n        disabled: editingKey !== '',\n        onClick: function onClick() {\n          return edit(record);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }\n      }, \"Edit\");\n    }\n  }];\n  var mergedColumns = columns.map(function (col) {\n    if (!col.editable) {\n      return col;\n    }\n\n    return _objectSpread({}, col, {\n      onCell: function onCell(record) {\n        return {\n          record: record,\n          inputType: col.dataIndex === 'age' ? 'number' : 'text',\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: isEditing(record)\n        };\n      }\n    });\n  });\n  return __jsx(React.Fragment, null, __jsx(Form, {\n    form: form,\n    component: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, __jsx(Table, {\n    components: {\n      body: {\n        cell: EditableCell\n      }\n    },\n    bordered: true,\n    dataSource: data,\n    columns: mergedColumns,\n    rowClassName: \"editable-row\",\n    pagination: {\n      onChange: cancel\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  })), __jsx(AddParentRelease, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }));\n};\n\nReactDOM.render(__jsx(ReleaseList, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 17\n  }\n}), document.getElementById('container'));\nexport default ReleaseList;","map":{"version":3,"sources":["D:/RandDChamber/LogwardAssignment/ProjectManagement/PMA/containers/parentReleaseList.js"],"names":["React","useState","ReactDOM","Table","Input","InputNumber","Popconfirm","Form","originData","i","push","key","toString","name","age","address","EditableCell","editing","dataIndex","title","inputType","record","index","children","restProps","inputNode","margin","required","message","ReleaseList","useForm","form","data","setData","editingKey","setEditingKey","isEditing","edit","setFieldsValue","alert","cancel","save","validateFields","row","newData","findIndex","item","splice","console","log","columns","width","editable","render","_","marginRight","mergedColumns","map","col","onCell","body","cell","onChange","document","getElementById"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,WAAvB,EAAoCC,UAApC,EAAgDC,IAAhD,QAA4D,MAA5D;AAEA,IAAMC,UAAU,GAAG,EAAnB;;AAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1BD,EAAAA,UAAU,CAACE,IAAX,CAAgB;AACZC,IAAAA,GAAG,EAAEF,CAAC,CAACG,QAAF,EADO;AAEZC,IAAAA,IAAI,oBAAaJ,CAAb,CAFQ;AAGZK,IAAAA,GAAG,EAAE,EAHO;AAIZC,IAAAA,OAAO,4BAAqBN,CAArB;AAJK,GAAhB;AAMH;;AAED,IAAMO,YAAY,GAAG,SAAfA,YAAe,OASf;AAAA,MARFC,OAQE,QARFA,OAQE;AAAA,MAPFC,SAOE,QAPFA,SAOE;AAAA,MANFC,KAME,QANFA,KAME;AAAA,MALFC,SAKE,QALFA,SAKE;AAAA,MAJFC,MAIE,QAJFA,MAIE;AAAA,MAHFC,KAGE,QAHFA,KAGE;AAAA,MAFFC,QAEE,QAFFA,QAEE;AAAA,MADCC,SACD;;AACF,MAAMC,SAAS,GAAGL,SAAS,KAAK,QAAd,GAAyB,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAzB,GAA2C,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA7D;AACA,SACI,yBAAQI,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACKP,OAAO,GACJ,MAAC,IAAD,CAAM,IAAN;AACI,IAAA,IAAI,EAAEC,SADV;AAEI,IAAA,KAAK,EAAE;AACHQ,MAAAA,MAAM,EAAE;AADL,KAFX;AAKI,IAAA,KAAK,EAAE,CACH;AACIC,MAAAA,QAAQ,EAAE,IADd;AAEIC,MAAAA,OAAO,yBAAkBT,KAAlB;AAFX,KADG,CALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYKM,SAZL,CADI,GAgBAF,QAjBZ,CADJ;AAsBH,CAjCD;;AAmCA,IAAMM,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA,sBACPtB,IAAI,CAACuB,OAAL,EADO;AAAA;AAAA,MACfC,IADe;;AAAA,kBAEE9B,QAAQ,CAACO,UAAD,CAFV;AAAA,MAEfwB,IAFe;AAAA,MAETC,OAFS;;AAAA,mBAGchC,QAAQ,CAAC,EAAD,CAHtB;AAAA,MAGfiC,UAHe;AAAA,MAGHC,aAHG;;AAMtB,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAf,MAAM;AAAA,WAAIA,MAAM,CAACV,GAAP,KAAeuB,UAAnB;AAAA,GAAxB;;AAEA,MAAMG,IAAI,GAAG,SAAPA,IAAO,CAAAhB,MAAM,EAAI;AACnBU,IAAAA,IAAI,CAACO,cAAL,mBAAyBjB,MAAzB;AACAkB,IAAAA,KAAK,CAAClB,MAAM,CAACV,GAAR,CAAL;AACAwB,IAAAA,aAAa,CAACd,MAAM,CAACV,GAAR,CAAb;AACH,GAJD;;AAMA,MAAM6B,MAAM,GAAG,SAATA,MAAS,GAAM;AACjBL,IAAAA,aAAa,CAAC,EAAD,CAAb;AACH,GAFD;;AAIA,MAAMM,IAAI,GAAG,SAAPA,IAAO,CAAM9B,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEaoB,IAAI,CAACW,cAAL,EAFb;;AAAA;AAECC,YAAAA,GAFD;AAGCC,YAAAA,OAHD,sBAGeZ,IAHf;AAICV,YAAAA,KAJD,GAISsB,OAAO,CAACC,SAAR,CAAkB,UAAAC,IAAI;AAAA,qBAAInC,GAAG,KAAKmC,IAAI,CAACnC,GAAjB;AAAA,aAAtB,CAJT;;AAML,gBAAIW,KAAK,GAAG,CAAC,CAAb,EAAgB;AACNwB,cAAAA,IADM,GACCF,OAAO,CAACtB,KAAD,CADR;AAEZsB,cAAAA,OAAO,CAACG,MAAR,CAAezB,KAAf,EAAsB,CAAtB,oBAA8BwB,IAA9B,MAAuCH,GAAvC;AACAV,cAAAA,OAAO,CAACW,OAAD,CAAP;AACAT,cAAAA,aAAa,CAAC,EAAD,CAAb;AACH,aALD,MAKO;AACHS,cAAAA,OAAO,CAAClC,IAAR,CAAaiC,GAAb;AACAV,cAAAA,OAAO,CAACW,OAAD,CAAP;AACAT,cAAAA,aAAa,CAAC,EAAD,CAAb;AACH;;AAfI;AAAA;;AAAA;AAAA;AAAA;AAiBLa,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;;AAjBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAb;;AAqBA,MAAMC,OAAO,GAAG,CACZ;AACI/B,IAAAA,KAAK,EAAE,MADX;AAEID,IAAAA,SAAS,EAAE,MAFf;AAGIiC,IAAAA,KAAK,EAAE,KAHX;AAIIC,IAAAA,QAAQ,EAAE;AAJd,GADY,EAOZ;AACIjC,IAAAA,KAAK,EAAE,KADX;AAEID,IAAAA,SAAS,EAAE,KAFf;AAGIiC,IAAAA,KAAK,EAAE;AAHX,GAPY,EAYZ;AACIhC,IAAAA,KAAK,EAAE,SADX;AAEID,IAAAA,SAAS,EAAE,SAFf;AAGIiC,IAAAA,KAAK,EAAE,KAHX;AAIIC,IAAAA,QAAQ,EAAE;AAJd,GAZY,EAkBZ;AACIjC,IAAAA,KAAK,EAAE,WADX;AAEID,IAAAA,SAAS,EAAE,WAFf;AAGImC,IAAAA,MAAM,EAAE,gBAACC,CAAD,EAAIjC,MAAJ,EAAe;AACnB,UAAM+B,QAAQ,GAAGhB,SAAS,CAACf,MAAD,CAA1B;AACA,aAAO+B,QAAQ,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AACI,QAAA,IAAI,EAAC,cADT;AAEI,QAAA,OAAO,EAAE;AAAA,iBAAMX,IAAI,CAACpB,MAAM,CAACV,GAAR,CAAV;AAAA,SAFb;AAGI,QAAA,KAAK,EAAE;AACH4C,UAAAA,WAAW,EAAE;AADV,SAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAUI,MAAC,UAAD;AAAY,QAAA,KAAK,EAAC,iBAAlB;AAAoC,QAAA,SAAS,EAAEf,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,CAVJ,CADW,GAgBP;AAAG,QAAA,QAAQ,EAAEN,UAAU,KAAK,EAA5B;AAAgC,QAAA,OAAO,EAAE;AAAA,iBAAMG,IAAI,CAAChB,MAAD,CAAV;AAAA,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBR;AAoBH;AAzBL,GAlBY,CAAhB;AA8CA,MAAMmC,aAAa,GAAGN,OAAO,CAACO,GAAR,CAAY,UAAAC,GAAG,EAAI;AACrC,QAAI,CAACA,GAAG,CAACN,QAAT,EAAmB;AACf,aAAOM,GAAP;AACH;;AAED,6BACOA,GADP;AAEIC,MAAAA,MAAM,EAAE,gBAAAtC,MAAM;AAAA,eAAK;AACfA,UAAAA,MAAM,EAANA,MADe;AAEfD,UAAAA,SAAS,EAAEsC,GAAG,CAACxC,SAAJ,KAAkB,KAAlB,GAA0B,QAA1B,GAAqC,MAFjC;AAGfA,UAAAA,SAAS,EAAEwC,GAAG,CAACxC,SAHA;AAIfC,UAAAA,KAAK,EAAEuC,GAAG,CAACvC,KAJI;AAKfF,UAAAA,OAAO,EAAEmB,SAAS,CAACf,MAAD;AALH,SAAL;AAAA;AAFlB;AAUH,GAfqB,CAAtB;AAgBA,SACI,4BACI,MAAC,IAAD;AAAM,IAAA,IAAI,EAAEU,IAAZ;AAAkB,IAAA,SAAS,EAAE,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,KAAD;AACI,IAAA,UAAU,EAAE;AACR6B,MAAAA,IAAI,EAAE;AACFC,QAAAA,IAAI,EAAE7C;AADJ;AADE,KADhB;AAMI,IAAA,QAAQ,MANZ;AAOI,IAAA,UAAU,EAAEgB,IAPhB;AAQI,IAAA,OAAO,EAAEwB,aARb;AASI,IAAA,YAAY,EAAC,cATjB;AAUI,IAAA,UAAU,EAAE;AACRM,MAAAA,QAAQ,EAAEtB;AADF,KAVhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAiBI,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBJ,CADJ;AAqBH,CA1HD;;AA4HAtC,QAAQ,CAACmD,MAAT,CAAgB,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAiCU,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAjC;AAEA,eAAenC,WAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Table, Input, InputNumber, Popconfirm, Form } from 'antd';\r\n\r\nconst originData = [];\r\n\r\nfor (let i = 0; i < 100; i++) {\r\n    originData.push({\r\n        key: i.toString(),\r\n        name: `Edrward ${i}`,\r\n        age: 32,\r\n        address: `London Park no. ${i}`,\r\n    });\r\n}\r\n\r\nconst EditableCell = ({\r\n    editing,\r\n    dataIndex,\r\n    title,\r\n    inputType,\r\n    record,\r\n    index,\r\n    children,\r\n    ...restProps\r\n}) => {\r\n    const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\r\n    return (\r\n        <td {...restProps}>\r\n            {editing ? (\r\n                <Form.Item\r\n                    name={dataIndex}\r\n                    style={{\r\n                        margin: 0,\r\n                    }}\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: `Please Input ${title}!`,\r\n                        },\r\n                    ]}\r\n                >\r\n                    {inputNode}\r\n                </Form.Item>\r\n            ) : (\r\n                    children\r\n                )}\r\n        </td>\r\n    );\r\n};\r\n\r\nconst ReleaseList = () => {\r\n    const [form] = Form.useForm();\r\n    const [data, setData] = useState(originData);\r\n    const [editingKey, setEditingKey] = useState('');\r\n\r\n\r\n    const isEditing = record => record.key === editingKey;\r\n\r\n    const edit = record => {\r\n        form.setFieldsValue({ ...record });\r\n        alert(record.key);\r\n        setEditingKey(record.key);\r\n    };\r\n\r\n    const cancel = () => {\r\n        setEditingKey('');\r\n    };\r\n\r\n    const save = async key => {\r\n        try {\r\n            const row = await form.validateFields();\r\n            const newData = [...data];\r\n            const index = newData.findIndex(item => key === item.key);\r\n\r\n            if (index > -1) {\r\n                const item = newData[index];\r\n                newData.splice(index, 1, { ...item, ...row });\r\n                setData(newData);\r\n                setEditingKey('');\r\n            } else {\r\n                newData.push(row);\r\n                setData(newData);\r\n                setEditingKey('');\r\n            }\r\n        } catch (errInfo) {\r\n            console.log('Validate Failed:', errInfo);\r\n        }\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            title: 'name',\r\n            dataIndex: 'name',\r\n            width: '25%',\r\n            editable: true,\r\n        },\r\n        {\r\n            title: 'age',\r\n            dataIndex: 'age',\r\n            width: '15%',\r\n        },\r\n        {\r\n            title: 'address',\r\n            dataIndex: 'address',\r\n            width: '40%',\r\n            editable: true,\r\n        },\r\n        {\r\n            title: 'operation',\r\n            dataIndex: 'operation',\r\n            render: (_, record) => {\r\n                const editable = isEditing(record);\r\n                return editable ? (\r\n                    <span>\r\n                        <a\r\n                            href=\"javascript:;\"\r\n                            onClick={() => save(record.key)}\r\n                            style={{\r\n                                marginRight: 8,\r\n                            }}\r\n                        >\r\n                            Save\r\n            </a>\r\n                        <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\r\n                            <a>Cancel</a>\r\n                        </Popconfirm>\r\n                    </span>\r\n                ) : (\r\n                        <a disabled={editingKey !== ''} onClick={() => edit(record)}>\r\n                            Edit\r\n                        </a>\r\n                    );\r\n            },\r\n        },\r\n    ];\r\n    const mergedColumns = columns.map(col => {\r\n        if (!col.editable) {\r\n            return col;\r\n        }\r\n\r\n        return {\r\n            ...col,\r\n            onCell: record => ({\r\n                record,\r\n                inputType: col.dataIndex === 'age' ? 'number' : 'text',\r\n                dataIndex: col.dataIndex,\r\n                title: col.title,\r\n                editing: isEditing(record),\r\n            }),\r\n        };\r\n    });\r\n    return (\r\n        <>\r\n            <Form form={form} component={false}>\r\n                <Table\r\n                    components={{\r\n                        body: {\r\n                            cell: EditableCell,\r\n                        },\r\n                    }}\r\n                    bordered\r\n                    dataSource={data}\r\n                    columns={mergedColumns}\r\n                    rowClassName=\"editable-row\"\r\n                    pagination={{\r\n                        onChange: cancel,\r\n                    }}\r\n                />\r\n            </Form>\r\n            <AddParentRelease />\r\n        </>\r\n    );\r\n};\r\n\r\nReactDOM.render(<ReleaseList />, document.getElementById('container'));\r\n\r\nexport default ReleaseList;"]},"metadata":{},"sourceType":"module"}