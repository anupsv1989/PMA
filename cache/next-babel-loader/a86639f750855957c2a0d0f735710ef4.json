{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\RandDChamber\\\\LogwardPlugin\\\\ProjectManagement\\\\PMA\\\\pages\\\\hooks.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Component } from \"react\";\nimport { Button } from \"antd\";\nimport HooksAsFunction from \"./hooksAsFunction\";\n\nvar MyHooks = /*#__PURE__*/function (_Component) {\n  _inherits(MyHooks, _Component);\n\n  var _super = _createSuper(MyHooks);\n\n  function MyHooks(props) {\n    var _this;\n\n    _classCallCheck(this, MyHooks);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"incrementCounter\", function () {\n      _this.setState(function (prevVal) {\n        return conterValue = prevVal.conterValue + 1;\n      });\n    });\n\n    _this.state = {\n      conterValue: 0\n    };\n    return _this;\n  } //we get a preval from states and which always holds the preveious val\n  //i.e passed as an argumet to get the prev val and count is increment from then.\n  //the same logic but different syntax can be seen in functional hooks component.\n\n\n  _createClass(MyHooks, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }\n      }, \"We cannot hooks here as this is a class component.\"), __jsx(Button, {\n        onClick: this.incrementCounter,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }\n      }, \" Counter + \"), __jsx(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 17\n        }\n      }, \"Counter Value = \", this.state.conterValue), __jsx(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 17\n        }\n      }), __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 17\n        }\n      }, \"How and where hooks work ?\"), __jsx(HooksAsFunction, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return MyHooks;\n}(Component);\n\nexport { MyHooks as default };","map":{"version":3,"sources":["D:/RandDChamber/LogwardPlugin/ProjectManagement/PMA/pages/hooks.js"],"names":["Component","Button","HooksAsFunction","MyHooks","props","setState","prevVal","conterValue","state","incrementCounter"],"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;IAGqBC,O;;;;;AAEjB,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AADe,uEAUA,YAAM;AACrB,YAAKC,QAAL,CAAc,UAAAC,OAAO,EAAI;AACrB,eAAOC,WAAW,GAAGD,OAAO,CAACC,WAAR,GAAsB,CAA3C;AACH,OAFD;AAGH,KAdkB;;AAEf,UAAKC,KAAL,GAAa;AACTD,MAAAA,WAAW,EAAE;AADJ,KAAb;AAFe;AAKlB,G,CAED;AACA;AACA;;;;;6BAOS;AACL,aACI,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DADJ,EAEI,MAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKE,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAqB,KAAKD,KAAL,CAAWD,WAAhC,CAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCALJ,EAMI,MAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,CADJ;AAYH;;;;EA/BgCP,S;;SAAhBG,O","sourcesContent":["import { Component } from \"react\";\r\nimport { Button } from \"antd\";\r\nimport HooksAsFunction from \"./hooksAsFunction\";\r\n\r\n\r\nexport default class MyHooks extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            conterValue: 0\r\n        }\r\n    }\r\n\r\n    //we get a preval from states and which always holds the preveious val\r\n    //i.e passed as an argumet to get the prev val and count is increment from then.\r\n    //the same logic but different syntax can be seen in functional hooks component.\r\n    incrementCounter = () => {\r\n        this.setState(prevVal => {\r\n            return conterValue = prevVal.conterValue + 1\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div>We cannot hooks here as this is a class component.</div>\r\n                <Button onClick={this.incrementCounter}> Counter + </Button>\r\n                <h4>Counter Value = {this.state.conterValue}</h4>\r\n                <hr />\r\n                <div>How and where hooks work ?</div>\r\n                <HooksAsFunction />\r\n\r\n\r\n            </>\r\n        )\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}