{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\RandDChamber\\\\LogwardAssignment\\\\ProjectManagement\\\\PMA\\\\containers\\\\parentReleaseList.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, useState, version } from \"react\";\nimport { Table, Tag, Form, Input, InputNumber, Popconfirm, Row, Col, Dropdown, Progress, DatePicker, Select, Slider, Popover, Button, Modal, Badge } from 'antd';\nimport AddParentRelease from './addParentRelease';\nimport moment from 'moment';\nimport AddChildRelease from \"./addChildRelease\";\nimport ChildReleaseList from \"./ChildReleaseList\";\nimport actions from \"../redux/action\";\nimport { connect } from \"react-redux\";\nimport { MenuOutlined } from '@ant-design/icons';\nimport { statusDisplay, progressDisplay, dateFormat } from \"../commons/helpers\";\nvar onFetchItem = actions.onFetchItem; // Main release listing page\n// Expects - redux for listing object\n// Caters other components and passes props such as data and redux methods\n\nvar ReleaseList = /*#__PURE__*/function (_Component) {\n  _inherits(ReleaseList, _Component);\n\n  var _super = _createSuper(ReleaseList);\n\n  function ReleaseList(props) {\n    var _this2;\n\n    _classCallCheck(this, ReleaseList);\n\n    _this2 = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this2), \"addChildItem\", function (rec) {\n      _this2.setState({\n        modalVisible: true,\n        currentRecord: rec\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"deleteItem\", function (rec) {\n      var arr = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\n      var index = arr.map(function (x) {\n        return x.key;\n      }).indexOf(rec.key);\n      arr.splice(index, 1);\n      localStorage.setItem('parentReleaseData', JSON.stringify(arr));\n\n      _this2.fetchItem();\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"EditableCell\", function (_ref) {\n      var editing = _ref.editing,\n          dataIndex = _ref.dataIndex,\n          title = _ref.title,\n          inputType = _ref.inputType,\n          record = _ref.record,\n          index = _ref.index,\n          children = _ref.children,\n          restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n      var inputNode;\n\n      switch (dataIndex) {\n        case \"version\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.version,\n            name: \"version\",\n            onChange: function onChange(e) {\n              return _this2.handleVersionDesc(e, \"editVersion\");\n            },\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"startDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"startDate\",\n            defaultValue: moment(record.startDate, dateFormat),\n            onChange: _this2.handleStartDate,\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"endDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"endDate\",\n            defaultValue: moment(record.endDate, dateFormat),\n            onChange: _this2.handleEndDate,\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"description\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.description,\n            onChange: function onChange(e) {\n              return _this2.handleVersionDesc(e, \"editDescription\");\n            },\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"status\":\n          inputNode = __jsx(Select, {\n            style: {\n              width: 120\n            },\n            name: \"status\",\n            defaultValue: _this2.state.editStatus,\n            onChange: function onChange(e) {\n              return _this2.handleSelectSlider(e, \"editStatus\");\n            },\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 21\n            }\n          }, __jsx(Option, {\n            value: \"IN PROGRESS\",\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 25\n            }\n          }, \"In Progress\"), __jsx(Option, {\n            value: \"UNRELEASED\",\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 25\n            }\n          }, \"Unreleased\"), __jsx(Option, {\n            value: \"RELEASED\",\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 25\n            }\n          }, \"Released\"));\n          break;\n\n        case \"progress\":\n          inputNode = __jsx(Slider, {\n            defaultValue: _this2.state.editProgress == \"\" ? 0 : _this2.state.editProgress,\n            tooltipVisible: true,\n            name: \"progress\",\n            onChange: function onChange(e) {\n              return _this2.handleSelectSlider(e, \"editProgress\");\n            },\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 29\n            }\n          });\n          break;\n      }\n\n      return __jsx(\"td\", _extends({}, restProps, {\n        __self: _assertThisInitialized(_this2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }\n      }), editing ? __jsx(Form.Item, {\n        name: record.key + \"_\" + dataIndex,\n        style: {\n          margin: 0\n        },\n        rules: [{\n          required: true,\n          message: \"Please Input \".concat(title, \"!\")\n        }],\n        __self: _assertThisInitialized(_this2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 25\n        }\n      }, inputNode) : children);\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"handleSelectSlider\", function (value, type) {\n      _this2.setState(_defineProperty({}, type, value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"handleVersionDesc\", function (e, type) {\n      _this2.setState(_defineProperty({}, type, e.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"handleStartDate\", function (date, str) {\n      _this2.setState({\n        editstartDate: str\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"handleEndDate\", function (date, str) {\n      _this2.setState({\n        editEndDate: str\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"isEditing\", function (record) {\n      return record.key === _this2.state.editingKey;\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"cancel\", function () {\n      _this2.setState({\n        editingKey: ''\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"handleCancel\", function () {\n      _this2.setState({\n        modalVisible: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"handleOk\", function () {\n      _this2.setState({\n        modalVisible: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"fetchItem\", function () {\n      console.log(\"on fetch item call back\");\n\n      _this2.props.onFetchItem();\n    });\n\n    var _this = _assertThisInitialized(_this2);\n\n    _this2.state = {\n      editingKey: '',\n      editVersion: \"\",\n      editStatus: \"\",\n      editProgress: 0,\n      editstartDate: \"\",\n      editEndDate: \"\",\n      editDescription: \"\",\n      modalVisible: false,\n      currentRecord: {},\n      columns: [{\n        title: 'Version No',\n        dataIndex: 'version',\n        key: 'version',\n        render: function render(text) {\n          return __jsx(\"a\", {\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 37\n            }\n          }, text);\n        },\n        editable: true\n      }, {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n        editable: true,\n        render: function render(rec) {\n          return statusDisplay(rec);\n        }\n      }, {\n        title: 'Progress',\n        dataIndex: 'progress',\n        key: 'progress',\n        editable: true,\n        render: function render(rec) {\n          return progressDisplay(rec);\n        }\n      }, {\n        title: 'Start Date',\n        dataIndex: 'startDate',\n        key: 'startDate',\n        editable: true\n      }, {\n        title: 'Release Date',\n        dataIndex: 'endDate',\n        key: 'endDate',\n        editable: true\n      }, {\n        title: 'Description',\n        dataIndex: 'description',\n        key: 'description',\n        editable: true\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: function render(text, record) {\n          var editable = _this2.isEditing(record);\n\n          var Content = __jsx(\"div\", {\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 29\n            }\n          }, __jsx(Row, {\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 33\n            }\n          }, __jsx(Col, {\n            span: 8,\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 37\n            }\n          }, __jsx(\"a\", {\n            disabled: _this2.state.editingKey !== '',\n            onClick: function onClick() {\n              return _this2.edit(record);\n            },\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 51\n            }\n          }, \"Edit\")), __jsx(Col, {\n            span: 8,\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 37\n            }\n          }, __jsx(\"a\", {\n            disabled: _this2.state.editingKey !== '',\n            onClick: function onClick() {\n              return _this2.addChildItem(record);\n            },\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 51\n            }\n          }, \"Add\")), __jsx(Col, {\n            span: 8,\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 37\n            }\n          }, __jsx(\"a\", {\n            disabled: _this2.state.editingKey !== '',\n            onClick: function onClick() {\n              return _this2.deleteItem(record);\n            },\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 51\n            }\n          }, \"Delete\"))));\n\n          return editable ? __jsx(\"span\", {\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 29\n            }\n          }, __jsx(\"a\", {\n            href: \"javascript:;\",\n            onClick: function onClick() {\n              return _this2.save(record);\n            },\n            style: {\n              marginRight: 8\n            },\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 33\n            }\n          }, \"Save\"), __jsx(Popconfirm, {\n            title: \"Sure to cancel?\",\n            onConfirm: _this2.cancel,\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 33\n            }\n          }, __jsx(\"a\", {\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 37\n            }\n          }, \"Cancel\"))) : __jsx(Popover, {\n            content: Content,\n            title: \"Actions\",\n            trigger: \"hover\",\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 33\n            }\n          }, __jsx(MenuOutlined, {\n            __self: _assertThisInitialized(_this2),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 37\n            }\n          }));\n        }\n      }],\n      listDataSrc: [],\n      isEdit: false\n    };\n    return _this2;\n  }\n\n  _createClass(ReleaseList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // let chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\n      // let getItems = chkItem == null ? [] : chkItem;\n      // this.setState({\n      //     listDataSrc: getItems\n      // })\n      this.fetchItem();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var dataFromLS = nextProps.dataFromLS;\n\n      if (dataFromLS) {\n        this.setState({\n          listDataSrc: dataFromLS,\n          editingKey: \"\"\n        });\n      }\n    }\n  }, {\n    key: \"save\",\n    value: function save(record) {\n      var _this$state = this.state,\n          editVersion = _this$state.editVersion,\n          editstartDate = _this$state.editstartDate,\n          editEndDate = _this$state.editEndDate,\n          editDescription = _this$state.editDescription,\n          editStatus = _this$state.editStatus,\n          editProgress = _this$state.editProgress,\n          listDataSrc = _this$state.listDataSrc;\n      listDataSrc.map(function (item) {\n        if (item.key == record.key) {\n          item.key = record.key;\n          item.childRelease = item.childRelease;\n          item.version = editVersion;\n          item.status = editStatus;\n          item.progress = editProgress;\n          item.startDate = editstartDate;\n          item.endDate = editEndDate;\n          item.description = editDescription;\n        }\n      });\n      localStorage.setItem('parentReleaseData', JSON.stringify(listDataSrc));\n      this.setState({\n        editStatus: \"\",\n        editProgress: \"\",\n        editstartDate: \"\",\n        editVersion: \"\",\n        editEndDate: \"\",\n        editDescription: \"\"\n      });\n      this.fetchItem();\n    }\n  }, {\n    key: \"edit\",\n    value: function edit(record) {\n      this.setState({\n        editingKey: record.key,\n        editStatus: record.status,\n        editProgress: record.progress,\n        editstartDate: record.startDate,\n        editVersion: record.version,\n        editEndDate: record.endDate,\n        editDescription: record.description\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var listDataSrc = this.state.listDataSrc;\n      var components = {\n        body: {\n          cell: this.EditableCell\n        }\n      };\n      var columns = this.state.columns.map(function (col) {\n        if (!col.editable) {\n          return col;\n        }\n\n        return _objectSpread({}, col, {\n          onCell: function onCell(record) {\n            return {\n              record: record,\n              inputType: col.dataIndex,\n              dataIndex: col.dataIndex,\n              title: col.title,\n              editing: _this3.isEditing(record)\n            };\n          }\n        });\n      });\n      return __jsx(React.Fragment, null, __jsx(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 17\n        }\n      }, __jsx(Table, {\n        columns: columns,\n        dataSource: this.props.dataFromLS,\n        components: components,\n        expandable: {\n          expandedRowRender: function expandedRowRender(record) {\n            return __jsx(ChildReleaseList, {\n              thisData: record,\n              refreshCallBack: _this3.fetchItem,\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 58\n              }\n            });\n          }\n        },\n        rowClassName: \"editable-row\",\n        pagination: {\n          onChange: this.cancel\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 21\n        }\n      })), __jsx(AddParentRelease, _extends({}, this.props, {\n        refreshCallBack: this.fetchItem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 17\n        }\n      })), __jsx(Modal, {\n        title: \"Add Batch Release\",\n        visible: this.state.modalVisible,\n        onOk: this.handleOk,\n        footer: null,\n        closable: true,\n        className: \"modal-Layout\",\n        onCancel: this.handleCancel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 17\n        }\n      }, __jsx(AddChildRelease, {\n        thisData: this.state.currentRecord,\n        closeModal: this.handleOk,\n        dbData: listDataSrc,\n        refreshCallBack: this.fetchItem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return ReleaseList;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    dataFromLS: state.dataFromLS\n  };\n};\n\nexport default connect(mapStateToProps, {\n  onFetchItem: onFetchItem\n})(ReleaseList);","map":{"version":3,"sources":["D:/RandDChamber/LogwardAssignment/ProjectManagement/PMA/containers/parentReleaseList.js"],"names":["React","Component","useState","version","Table","Tag","Form","Input","InputNumber","Popconfirm","Row","Col","Dropdown","Progress","DatePicker","Select","Slider","Popover","Button","Modal","Badge","AddParentRelease","moment","AddChildRelease","ChildReleaseList","actions","connect","MenuOutlined","statusDisplay","progressDisplay","dateFormat","onFetchItem","ReleaseList","props","rec","setState","modalVisible","currentRecord","arr","JSON","parse","localStorage","getItem","index","map","x","key","indexOf","splice","setItem","stringify","fetchItem","editing","dataIndex","title","inputType","record","children","restProps","inputNode","e","handleVersionDesc","startDate","handleStartDate","endDate","handleEndDate","description","width","state","editStatus","handleSelectSlider","editProgress","margin","required","message","value","type","target","date","str","editstartDate","editEndDate","editingKey","console","log","_this","editVersion","editDescription","columns","render","text","editable","isEditing","Content","edit","addChildItem","deleteItem","save","marginRight","cancel","listDataSrc","isEdit","nextProps","dataFromLS","item","childRelease","status","progress","components","body","cell","EditableCell","col","onCell","expandedRowRender","onChange","handleOk","handleCancel","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component, useState, version } from \"react\";\r\nimport {\r\n    Table, Tag, Form, Input, InputNumber, Popconfirm, Row, Col, Dropdown,\r\n    Progress, DatePicker, Select, Slider, Popover, Button, Modal, Badge\r\n} from 'antd';\r\nimport AddParentRelease from './addParentRelease';\r\nimport moment from 'moment';\r\nimport AddChildRelease from \"./addChildRelease\";\r\nimport ChildReleaseList from \"./ChildReleaseList\";\r\nimport actions from \"../redux/action\";\r\nimport { connect } from \"react-redux\";\r\nimport { MenuOutlined } from '@ant-design/icons';\r\nimport { statusDisplay, progressDisplay, dateFormat } from \"../commons/helpers\";\r\n\r\n\r\nconst { onFetchItem } = actions;\r\n\r\n// Main release listing page\r\n// Expects - redux for listing object\r\n// Caters other components and passes props such as data and redux methods\r\nclass ReleaseList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let _this = this;\r\n        this.state = {\r\n            editingKey: '',\r\n            editVersion: \"\",\r\n            editStatus: \"\",\r\n            editProgress: 0,\r\n            editstartDate: \"\",\r\n            editEndDate: \"\",\r\n            editDescription: \"\",\r\n            modalVisible: false,\r\n            currentRecord: {},\r\n            columns: [\r\n                {\r\n                    title: 'Version No',\r\n                    dataIndex: 'version',\r\n                    key: 'version',\r\n                    render: text => <a>{text}</a>,\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Status',\r\n                    dataIndex: 'status',\r\n                    key: 'status',\r\n                    editable: true,\r\n                    render: (rec) => statusDisplay(rec)\r\n                },\r\n                {\r\n                    title: 'Progress',\r\n                    dataIndex: 'progress',\r\n                    key: 'progress',\r\n                    editable: true,\r\n                    render: (rec) => progressDisplay(rec)\r\n                },\r\n                {\r\n                    title: 'Start Date',\r\n                    dataIndex: 'startDate',\r\n                    key: 'startDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Release Date',\r\n                    dataIndex: 'endDate',\r\n                    key: 'endDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Description',\r\n                    dataIndex: 'description',\r\n                    key: 'description',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Action',\r\n                    key: 'action',\r\n                    render: (text, record) => {\r\n                        const editable = this.isEditing(record);\r\n                        const Content = (\r\n                            <div>\r\n                                <Row>\r\n                                    <Col span={8}><a disabled={this.state.editingKey !== ''} onClick={() => this.edit(record)}>Edit</a></Col>\r\n                                    <Col span={8}><a disabled={this.state.editingKey !== ''} onClick={() => this.addChildItem(record)}>Add</a></Col>\r\n                                    <Col span={8}><a disabled={this.state.editingKey !== ''} onClick={() => this.deleteItem(record)}>Delete</a></Col>\r\n                                </Row>\r\n                            </div>\r\n                        );\r\n                        return editable ? (\r\n                            <span>\r\n                                <a\r\n                                    href=\"javascript:;\"\r\n                                    onClick={() => this.save(record)}\r\n                                    style={{\r\n                                        marginRight: 8,\r\n                                    }}\r\n                                >\r\n                                    Save\r\n                            </a>\r\n                                <Popconfirm title=\"Sure to cancel?\" onConfirm={this.cancel}>\r\n                                    <a>Cancel</a>\r\n                                </Popconfirm>\r\n                            </span>\r\n                        ) : (\r\n                                <Popover content={Content} title=\"Actions\" trigger=\"hover\">\r\n                                    <MenuOutlined />\r\n                                </Popover>\r\n                            );\r\n                    }\r\n                }\r\n            ],\r\n\r\n            listDataSrc: [],\r\n            isEdit: false\r\n        }\r\n    }\r\n\r\n\r\n    addChildItem = (rec) => {\r\n        this.setState({\r\n            modalVisible: true,\r\n            currentRecord: rec\r\n        })\r\n    }\r\n\r\n    deleteItem = (rec) => {\r\n\r\n        let arr = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\r\n\r\n        let index = arr.map(x => {\r\n            return x.key;\r\n        }).indexOf(rec.key);\r\n        arr.splice(index, 1);\r\n\r\n        localStorage.setItem('parentReleaseData', JSON.stringify(arr));\r\n        this.fetchItem();\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        // let chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\r\n        // let getItems = chkItem == null ? [] : chkItem;\r\n        // this.setState({\r\n        //     listDataSrc: getItems\r\n        // })\r\n        this.fetchItem();\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        let { dataFromLS } = nextProps\r\n\r\n        if (dataFromLS) {\r\n            this.setState({\r\n                listDataSrc: dataFromLS,\r\n                editingKey: \"\"\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    EditableCell = ({\r\n        editing,\r\n        dataIndex,\r\n        title,\r\n        inputType,\r\n        record,\r\n        index,\r\n        children,\r\n        ...restProps\r\n    }) => {\r\n        let inputNode;\r\n\r\n        switch (dataIndex) {\r\n            case \"version\":\r\n                inputNode = <Input defaultValue={record.version} name=\"version\" onChange={(e) => this.handleVersionDesc(e, \"editVersion\")} />\r\n                break;\r\n            case \"startDate\":\r\n                inputNode = <DatePicker name=\"startDate\" defaultValue={moment(record.startDate, dateFormat)} onChange={this.handleStartDate} />\r\n                break;\r\n            case \"endDate\":\r\n                inputNode = <DatePicker name=\"endDate\" defaultValue={moment(record.endDate, dateFormat)} onChange={this.handleEndDate} />\r\n                break;\r\n            case \"description\":\r\n\r\n                inputNode = <Input defaultValue={record.description} onChange={(e) => this.handleVersionDesc(e, \"editDescription\")} />\r\n                break;\r\n            case \"status\":\r\n                inputNode =\r\n                    <Select style={{ width: 120 }} name=\"status\" defaultValue={this.state.editStatus} onChange={(e) => this.handleSelectSlider(e, \"editStatus\")}>\r\n                        <Option value=\"IN PROGRESS\">In Progress</Option>\r\n                        <Option value=\"UNRELEASED\">Unreleased</Option>\r\n                        <Option value=\"RELEASED\">Released</Option>\r\n                    </Select>\r\n                break;\r\n            case \"progress\":\r\n                inputNode = <Slider defaultValue={this.state.editProgress == \"\" ? 0 : this.state.editProgress} tooltipVisible name=\"progress\"\r\n                    onChange={(e) => this.handleSelectSlider(e, \"editProgress\")} />\r\n                break;\r\n\r\n        }\r\n\r\n\r\n        return (\r\n            <td {...restProps}>\r\n                {editing ?\r\n                    (\r\n                        <Form.Item\r\n                            name={record.key + \"_\" + dataIndex}\r\n                            style={{ margin: 0 }}\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: `Please Input ${title}!`,\r\n                                },\r\n                            ]}\r\n                        >\r\n                            {inputNode}\r\n                        </Form.Item>\r\n\r\n                    )\r\n\r\n                    : (\r\n                        children\r\n                    )}\r\n            </td>\r\n        );\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n    handleSelectSlider = (value, type) => {\r\n        this.setState({\r\n            [type]: value\r\n        })\r\n    }\r\n\r\n    handleVersionDesc = (e, type) => {\r\n        this.setState({\r\n            [type]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleStartDate = (date, str) => {\r\n        this.setState({\r\n            editstartDate: str\r\n        })\r\n    }\r\n    handleEndDate = (date, str) => {\r\n        this.setState({\r\n            editEndDate: str\r\n        })\r\n    }\r\n\r\n\r\n    isEditing = record => record.key === this.state.editingKey;\r\n\r\n    cancel = () => {\r\n        this.setState({ editingKey: '' });\r\n    };\r\n\r\n    save(record) {\r\n        let { editVersion, editstartDate, editEndDate, editDescription, editStatus, editProgress, listDataSrc } = this.state;\r\n\r\n        listDataSrc.map(item => {\r\n            if (item.key == record.key) {\r\n                item.key = record.key;\r\n                item.childRelease = item.childRelease;\r\n                item.version = editVersion;\r\n                item.status = editStatus;\r\n                item.progress = editProgress;\r\n                item.startDate = editstartDate;\r\n                item.endDate = editEndDate;\r\n                item.description = editDescription;\r\n            }\r\n        })\r\n\r\n        localStorage.setItem('parentReleaseData', JSON.stringify(listDataSrc));\r\n        this.setState({\r\n            editStatus: \"\",\r\n            editProgress: \"\",\r\n            editstartDate: \"\",\r\n            editVersion: \"\",\r\n            editEndDate: \"\",\r\n            editDescription: \"\",\r\n        })\r\n        this.fetchItem();\r\n\r\n    }\r\n\r\n    edit(record) {\r\n\r\n        this.setState({\r\n            editingKey: record.key,\r\n            editStatus: record.status,\r\n            editProgress: record.progress,\r\n            editstartDate: record.startDate,\r\n            editVersion: record.version,\r\n            editEndDate: record.endDate,\r\n            editDescription: record.description,\r\n        });\r\n    }\r\n\r\n    handleCancel = () => {\r\n        this.setState({\r\n            modalVisible: false\r\n        })\r\n    }\r\n\r\n    handleOk = () => {\r\n        this.setState({\r\n            modalVisible: false\r\n        })\r\n    }\r\n\r\n    fetchItem = () => {\r\n\r\n        console.log(\"on fetch item call back\")\r\n        this.props.onFetchItem();\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n\r\n        let { listDataSrc } = this.state;\r\n\r\n        const components = {\r\n            body: {\r\n                cell: this.EditableCell,\r\n            },\r\n        };\r\n\r\n        const columns = this.state.columns.map(col => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n            return {\r\n                ...col,\r\n                onCell: record => ({\r\n                    record,\r\n                    inputType: col.dataIndex,\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    editing: this.isEditing(record),\r\n                }),\r\n            };\r\n        });\r\n\r\n\r\n\r\n        return (\r\n            <>\r\n                <Form>\r\n                    <Table\r\n                        columns={columns}\r\n                        dataSource={this.props.dataFromLS}\r\n                        components={components}\r\n                        expandable={{\r\n                            expandedRowRender: record => <ChildReleaseList thisData={record} refreshCallBack={this.fetchItem} />,\r\n                        }}\r\n                        rowClassName=\"editable-row\"\r\n                        pagination={{\r\n                            onChange: this.cancel,\r\n                        }}\r\n                    />\r\n                </Form>\r\n                <AddParentRelease {...this.props} refreshCallBack={this.fetchItem} />\r\n                <Modal\r\n                    title=\"Add Batch Release\"\r\n                    visible={this.state.modalVisible}\r\n                    onOk={this.handleOk}\r\n                    footer={null}\r\n                    closable\r\n                    className=\"modal-Layout\"\r\n                    onCancel={this.handleCancel}\r\n                >\r\n                    <AddChildRelease thisData={this.state.currentRecord} closeModal={this.handleOk} dbData={listDataSrc} refreshCallBack={this.fetchItem} />\r\n                </Modal>\r\n\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        dataFromLS: state.dataFromLS\r\n    };\r\n};\r\n\r\n\r\nexport default connect(\r\n    mapStateToProps, { onFetchItem }\r\n)(ReleaseList);\r\n"]},"metadata":{},"sourceType":"module"}