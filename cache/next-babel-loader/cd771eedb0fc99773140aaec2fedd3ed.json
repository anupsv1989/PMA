{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { Table, Popconfirm, Popover, Row, Col, Button, Tag, Input, Select, Slider, DatePicker, Form, Progress } from \"antd\";\nimport moment from 'moment';\nimport { EllipsisOutlined, EditOutlined } from '@ant-design/icons';\nimport { statusDisplay, progressDisplay, dateFormat } from \"../commons/helpers\";\n\nvar ChildReleaseList = /*#__PURE__*/function (_Component) {\n  _inherits(ChildReleaseList, _Component);\n\n  var _super = _createSuper(ChildReleaseList);\n\n  function ChildReleaseList(props) {\n    var _this;\n\n    _classCallCheck(this, ChildReleaseList);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"isEditing\", function (record) {\n      return record.key === _this.state.editingKey;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"EditableCell\", function (_ref) {\n      var editing = _ref.editing,\n          dataIndex = _ref.dataIndex,\n          title = _ref.title,\n          inputType = _ref.inputType,\n          record = _ref.record,\n          index = _ref.index,\n          children = _ref.children,\n          restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n      // console.log(\"started 1\", children)\n      // console.log(\"started 2\", record)\n      // console.log(\"started 4\", dataIndex)\n      // console.log(\"started 5\", title)\n      var inputNode;\n\n      switch (dataIndex) {\n        case \"version\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.version,\n            name: \"version\",\n            onChange: _this.handleVersion\n          });\n          break;\n\n        case \"startDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"startDate\",\n            defaultValue: moment(record.startDate, dateFormat),\n            onChange: _this.handleStartDate\n          });\n          break;\n\n        case \"endDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"endDate\",\n            defaultValue: moment(record.endDate, dateFormat),\n            onChange: _this.handleEndDate\n          });\n          break;\n\n        case \"description\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.description,\n            onChange: _this.handleDescription\n          });\n          break;\n\n        case \"status\":\n          inputNode = statusDisplay(_this.state.editStatus); // inputNode = this.fetchStatusDisp(record.status);\n\n          break;\n\n        case \"progress\":\n          inputNode = __jsx(Slider, {\n            defaultValue: record.progress ? record.progress : 0,\n            tooltipVisible: true,\n            name: \"progress\",\n            onChange: _this.handleSlider\n          });\n          break;\n      } // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n\n\n      return __jsx(\"td\", restProps, editing ? __jsx(Form.Item, {\n        name: dataIndex,\n        style: {\n          margin: 0\n        },\n        rules: [{\n          required: true,\n          message: \"Please Input \".concat(title, \"!\")\n        }]\n      }, inputNode) : children); // }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchStatusDisp\", function (rec) {});\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (value) {\n      console.log(\"Vlaue\", value);\n\n      _this.setState({\n        editStatus: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSlider\", function (value) {\n      var releaseType = \"IN PROGRESS\";\n\n      if (value == 0) {\n        releaseType = \"IN PROGRESS\";\n      } else if (value == 100) {\n        releaseType = \"RELEASED\";\n      } else {\n        releaseType = \"UNRELEASED\";\n      }\n\n      console.log(\"On hcnafe of progress\", value);\n\n      _this.setState({\n        editProgress: value,\n        editStatus: releaseType\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStartDate\", function (date, str) {\n      console.log(\"sliceer sd str\", str);\n\n      _this.setState({\n        editstartDate: str\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEndDate\", function (date, str) {\n      console.log(\"sliceer ed\", str);\n\n      _this.setState({\n        editEndDate: str\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDescription\", function (e) {\n      console.log(\"sliceer desc\", e.target.value);\n\n      _this.setState({\n        editDescription: e.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"cancel\", function () {\n      _this.setState({\n        editingKey: ''\n      });\n    });\n\n    _this.state = {\n      editStatus: \"IN PROGRESS\",\n      editingKey: '',\n      editProgress: \"\",\n      editstartDate: \"\",\n      editEndDate: \"\",\n      editDescription: \"\",\n      childColumns: [{\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n        editable: true,\n        render: function render(rec) {\n          return statusDisplay(rec);\n        }\n      }, {\n        title: 'Progess',\n        dataIndex: 'progress',\n        key: 'progress',\n        editable: true,\n        render: function render(rec) {\n          return progressDisplay(rec);\n        }\n      }, {\n        title: 'Start Date',\n        dataIndex: 'startDate',\n        key: 'startDate',\n        editable: true\n      }, {\n        title: 'End Date',\n        dataIndex: 'endDate',\n        key: 'endDate',\n        editable: true\n      }, {\n        title: 'Description',\n        dataIndex: 'description',\n        key: 'description',\n        editable: true\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: function render(text, record) {\n          var editable = _this.isEditing(record);\n\n          return editable ? __jsx(\"span\", null, __jsx(\"a\", {\n            href: \"javascript:;\",\n            onClick: function onClick() {\n              return _this.save(record);\n            },\n            style: {\n              marginRight: 8\n            }\n          }, \"Save\"), __jsx(Popconfirm, {\n            title: \"Sure to cancel?\",\n            onConfirm: _this.cancel\n          }, __jsx(\"a\", null, \"Cancel\"))) : __jsx(EditOutlined, {\n            disabled: _this.state.editingKey !== '',\n            onClick: function onClick() {\n              return _this.edit(record);\n            }\n          });\n        }\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(ChildReleaseList, [{\n    key: \"save\",\n    value: function save(record) {\n      console.log(\"Form submit\", record);\n      console.log(\"Form submit this data\", this.props.thisData);\n      var _this$state = this.state,\n          editstartDate = _this$state.editstartDate,\n          editEndDate = _this$state.editEndDate,\n          editDescription = _this$state.editDescription,\n          editStatus = _this$state.editStatus,\n          editProgress = _this$state.editProgress;\n      var temp = this.props.thisData;\n      console.log(\"while save >>>>>>>>>>>>>>\", this.state);\n      temp.childRelease.map(function (item) {\n        if (item.key == record.key) {\n          item.key = record.key;\n          item.status = editStatus;\n          item.progress = editProgress;\n          item.startDate = editstartDate;\n          item.endDate = editEndDate;\n          item.description = editDescription;\n        }\n      });\n      var arr = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\n      var index = arr.map(function (x) {\n        return x.key;\n      }).indexOf(temp.key);\n      arr.splice(index, 1);\n      var addData = temp;\n      arr.unshift(addData); // debugger;\n\n      console.log(\"Presnet Obj list form after \", arr);\n      localStorage.setItem('parentReleaseData', JSON.stringify(arr));\n      this.setState({\n        editingKey: \"\",\n        editStatus: \"\",\n        editProgress: \"\",\n        editstartDate: \"\",\n        editEndDate: \"\",\n        editDescription: \"\"\n      });\n      this.props.refreshCallBack();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      console.log(\"NExgt Props\", nextProps);\n      var dataFromLS = nextProps.dataFromLS;\n      console.log(\"data from lcoal\", dataFromLS);\n\n      if (dataFromLS) {\n        this.setState({\n          listDataSrc: dataFromLS,\n          editingKey: \"\"\n        }, function () {\n          console.log(\"After setting state :\", _this2.state.listDataSrc);\n        });\n      }\n    }\n  }, {\n    key: \"edit\",\n    value: function edit(record) {\n      this.setState({\n        editingKey: record.key,\n        editStatus: record.status,\n        editProgress: record.progress,\n        editstartDate: record.startDate,\n        editEndDate: record.endDate,\n        editDescription: record.description\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var components = {\n        body: {\n          cell: this.EditableCell\n        }\n      };\n      var columns = this.state.childColumns.map(function (col) {\n        if (!col.editable) {\n          return col;\n        }\n\n        return _objectSpread({}, col, {\n          onCell: function onCell(record) {\n            return {\n              record: record,\n              inputType: col.dataIndex,\n              dataIndex: col.dataIndex,\n              title: col.title,\n              editing: _this3.isEditing(record)\n            };\n          }\n        });\n      });\n      return __jsx(Table, {\n        columns: columns,\n        dataSource: this.props.thisData.childRelease,\n        pagination: false,\n        components: components\n      });\n    }\n  }]);\n\n  return ChildReleaseList;\n}(Component);\n\nexport { ChildReleaseList as default };","map":null,"metadata":{},"sourceType":"module"}