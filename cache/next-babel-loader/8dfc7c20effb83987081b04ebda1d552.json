{"ast":null,"code":"var _jsxFileName = \"D:\\\\RandDChamber\\\\LogwardPlugin\\\\ProjectManagement\\\\PMA\\\\pages\\\\hooksAsFunction.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport { render } from \"react-dom\";\n\nfunction hooksAsFunction() {\n  const initialVal = 0;\n  const {\n    0: counterValue,\n    1: incrementCounter\n  } = useState(initialVal);\n\n  const incrementBy5 = () => {\n    console.log(\"Preval\", prevVal);\n\n    for (var i = 0; i < 5; i++) {\n      incrementCounter(prevVal => prevVal + 1);\n    }\n\n    console.log(\"Preval after\", prevVal);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }, \" Only here since this is a functional component - we can use hooks \"), \">\", __jsx(\"button\", {\n    onClick: () => incrementCounter(counterValue + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, \"Counter +\"), __jsx(\"button\", {\n    onClick: () => incrementCounter(counterValue - 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, \"Counter -\"), __jsx(\"button\", {\n    onClick: () => incrementCounter(initialVal),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, \"Counter 0\"), __jsx(\"button\", {\n    onClick: incrementBy5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, \"Counter +5\"), __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, \" \", counterValue, \" \"));\n}\n\nexport default hooksAsFunction;","map":{"version":3,"sources":["D:/RandDChamber/LogwardPlugin/ProjectManagement/PMA/pages/hooksAsFunction.js"],"names":["useState","render","hooksAsFunction","initialVal","counterValue","incrementCounter","incrementBy5","console","log","prevVal","i"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,WAAvB;;AAIA,SAASC,eAAT,GAA2B;AAEvB,QAAMC,UAAU,GAAG,CAAnB;AACA,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAmCL,QAAQ,CAACG,UAAD,CAAjD;;AAEA,QAAMG,YAAY,GAAG,MAAM;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBC,OAAtB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBL,MAAAA,gBAAgB,CAACI,OAAO,IAAIA,OAAO,GAAG,CAAtB,CAAhB;AACH;;AACDF,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BC,OAA5B;AACH,GAPD;;AAUA,SACI,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EADJ,OAGI;AAAQ,IAAA,OAAO,EAAE,MAAMJ,gBAAgB,CAACD,YAAY,GAAG,CAAhB,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHJ,EAII;AAAQ,IAAA,OAAO,EAAE,MAAMC,gBAAgB,CAACD,YAAY,GAAG,CAAhB,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJJ,EAKI;AAAQ,IAAA,OAAO,EAAE,MAAMC,gBAAgB,CAACF,UAAD,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALJ,EAOI;AAAQ,IAAA,OAAO,EAAEG,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPJ,EASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAMF,YAAN,MATJ,CADJ;AAeH;;AAED,eAAeF,eAAf","sourcesContent":["import { useState } from \"react\";\r\nimport { render } from \"react-dom\";\r\n\r\n\r\n\r\nfunction hooksAsFunction() {\r\n\r\n    const initialVal = 0;\r\n    const [counterValue, incrementCounter] = useState(initialVal)\r\n\r\n    const incrementBy5 = () => {\r\n        console.log(\"Preval\", prevVal)\r\n\r\n        for (var i = 0; i < 5; i++) {\r\n            incrementCounter(prevVal => prevVal + 1)\r\n        }\r\n        console.log(\"Preval after\", prevVal)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div> Only here since this is a functional component - we can use hooks </div>>\r\n\r\n            <button onClick={() => incrementCounter(counterValue + 1)}>Counter +</button>\r\n            <button onClick={() => incrementCounter(counterValue - 1)}>Counter -</button>\r\n            <button onClick={() => incrementCounter(initialVal)}>Counter 0</button>\r\n\r\n            <button onClick={incrementBy5}>Counter +5</button>\r\n\r\n            <h4> {counterValue} </h4>\r\n        </>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default hooksAsFunction;"]},"metadata":{},"sourceType":"module"}