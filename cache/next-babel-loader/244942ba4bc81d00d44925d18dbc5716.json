{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\RandDChamber\\\\LogwardAssignment\\\\ProjectManagement\\\\PMA\\\\containers\\\\parentReleaseList.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, useState, version } from \"react\";\nimport { Table, Tag, Form, Input, InputNumber, Popconfirm, Progress, DatePicker, Select, Slider, Popover, Button } from 'antd';\nimport AddParentRelease from './addParentRelease';\nimport moment from 'moment';\nvar dateFormat = \"DD-MM-YYYY\";\n\nvar ReleaseList = /*#__PURE__*/function (_Component) {\n  _inherits(ReleaseList, _Component);\n\n  var _super = _createSuper(ReleaseList);\n\n  function ReleaseList(props) {\n    var _this;\n\n    _classCallCheck(this, ReleaseList);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"content\", function () {\n      return __jsx(\"div\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }\n      }, __jsx(\"p\", {\n        disabled: _this.state.editingKey !== '',\n        onClick: function onClick() {\n          return _this.edit(record);\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 17\n        }\n      }, \"Edit\"), __jsx(\"p\", {\n        disabled: _this.state.editingKey !== '',\n        onClick: function onClick() {\n          return _this.Add(record);\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }, \"Add\"));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"EditableCell\", function (_ref) {\n      var editing = _ref.editing,\n          dataIndex = _ref.dataIndex,\n          title = _ref.title,\n          inputType = _ref.inputType,\n          record = _ref.record,\n          index = _ref.index,\n          children = _ref.children,\n          restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n      // console.log(\"started 1\", children)\n      console.log(\"started 2\", record); // console.log(\"started 4\", dataIndex)\n      // console.log(\"started 5\", title)\n\n      var inputNode;\n\n      switch (dataIndex) {\n        case \"version\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.version,\n            name: \"version\",\n            onChange: _this.handleVersion,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"startDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"startDate\",\n            defaultValue: moment(record.startDate, dateFormat),\n            onChange: _this.handleStartDate,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"endDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"endDate\",\n            defaultValue: moment(record.endDate, dateFormat),\n            onChange: _this.handleEndDate,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"description\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.description,\n            onChange: _this.handleDescription,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"status\":\n          inputNode = __jsx(Select, {\n            style: {\n              width: 120\n            },\n            name: \"status\",\n            onChange: _this.handleChange,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 21\n            }\n          }, __jsx(Option, {\n            value: \"IN PROGRESS\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 25\n            }\n          }, \"In Progress\"), __jsx(Option, {\n            value: \"UNRELEASED\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 25\n            }\n          }, \"Unreleased\"), __jsx(Option, {\n            value: \"RELEASED\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 25\n            }\n          }, \"Released\")); // onChange = { handleChange }\n\n          break;\n\n        case \"progress\":\n          inputNode = __jsx(Slider, {\n            defaultValue: 30,\n            tooltipVisible: true,\n            name: \"progress\",\n            onChange: _this.handleSlider,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        default: // code block\n\n      } // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n\n\n      return __jsx(\"td\", _extends({}, restProps, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }\n      }), editing ? __jsx(Form.Item, {\n        name: dataIndex,\n        style: {\n          margin: 0\n        },\n        rules: [{\n          required: true,\n          message: \"Please Input \".concat(title, \"!\")\n        }],\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }\n      }, inputNode) : children); // }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (value) {\n      console.log(\"Vlaue\", value);\n\n      _this.setState({\n        editStatus: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSlider\", function (value) {\n      console.log(\"slider Vlaue\", value);\n\n      _this.setState({\n        editProgress: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStartDate\", function (date, str) {\n      console.log(\"sliceer sd str\", str);\n\n      _this.setState({\n        editstartDate: str\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEndDate\", function (date, str) {\n      console.log(\"sliceer ed\", str);\n\n      _this.setState({\n        editEndDate: str\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDescription\", function (e) {\n      console.log(\"sliceer desc\", e.target.value);\n\n      _this.setState({\n        editDescription: e.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleVersion\", function (e) {\n      console.log(\"sliceer vers\", e.target.value);\n\n      _this.setState({\n        editVersion: e.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isEditing\", function (record) {\n      return record.key === _this.state.editingKey;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"cancel\", function () {\n      _this.setState({\n        editingKey: ''\n      });\n    });\n\n    _this.state = {\n      editingKey: '',\n      editVersion: \"\",\n      editStatus: \"\",\n      editProgress: \"\",\n      editstartDate: \"\",\n      editEndDate: \"\",\n      editDescription: \"\",\n      columns: [{\n        title: 'Version No',\n        dataIndex: 'version',\n        key: 'version',\n        render: function render(text) {\n          return __jsx(\"a\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 37\n            }\n          }, text);\n        },\n        editable: true\n      }, {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n        editable: true\n      }, {\n        title: 'Progress',\n        dataIndex: 'progress',\n        key: 'progress',\n        editable: true,\n        render: function render(rec) {\n          return __jsx(Progress, {\n            strokeColor: {\n              '0%': '#108ee9',\n              '100%': '#87d068'\n            },\n            percent: rec,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 25\n            }\n          });\n        }\n      }, {\n        title: 'Start Date',\n        dataIndex: 'startDate',\n        key: 'startDate',\n        editable: true\n      }, {\n        title: 'Release Date',\n        dataIndex: 'endDate',\n        key: 'endDate',\n        editable: true\n      }, {\n        title: 'Description',\n        dataIndex: 'description',\n        key: 'description',\n        editable: true\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: function render(text, record) {\n          var editable = _this.isEditing(record);\n\n          return editable ? __jsx(\"span\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 29\n            }\n          }, __jsx(\"a\", {\n            href: \"javascript:;\",\n            onClick: function onClick() {\n              return _this.save(record);\n            },\n            style: {\n              marginRight: 8\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 33\n            }\n          }, \"Save\"), __jsx(Popconfirm, {\n            title: \"Sure to cancel?\",\n            onConfirm: _this.cancel,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 33\n            }\n          }, __jsx(\"a\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 37\n            }\n          }, \"Cancel\"))) : // <a disabled={this.state.editingKey !== ''} onClick={() => this.edit(record)}>\n          //     Edit\n          // </a>\n          __jsx(Popover, {\n            content: _this.content,\n            title: \"Title\",\n            trigger: \"hover\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 33\n            }\n          }, __jsx(Button, {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 37\n            }\n          }, \"Hover me\"));\n        }\n      }],\n      listDataSrc: [],\n      isEdit: false\n    };\n    return _this;\n  }\n\n  _createClass(ReleaseList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\n      var getItems = chkItem == null ? [] : chkItem;\n      this.setState({\n        listDataSrc: getItems\n      });\n    }\n  }, {\n    key: \"save\",\n    value: function save(record) {\n      console.log(\"Form submit\", record);\n      var _this$state = this.state,\n          editVersion = _this$state.editVersion,\n          editstartDate = _this$state.editstartDate,\n          editEndDate = _this$state.editEndDate,\n          editDescription = _this$state.editDescription,\n          editStatus = _this$state.editStatus,\n          editProgress = _this$state.editProgress,\n          listDataSrc = _this$state.listDataSrc; // let arr = this.state.localPRItems;\n\n      var prObj = {\n        key: record.key,\n        version: editVersion,\n        status: editStatus,\n        progress: editProgress,\n        startDate: editstartDate,\n        endDate: editEndDate,\n        description: editDescription\n      };\n      console.log(\"Presnet Obj\", prObj);\n      console.log(\"Presnet Obj list form before\", listDataSrc);\n      listDataSrc.map(function (item) {\n        if (item.key == record.key) {\n          item.key = record.key;\n          item.version = editVersion != \"\" ? editVersion : item.version;\n          item.status = editStatus != \"\" ? editStatus : item.status;\n          item.progress = editProgress != \"\" ? editProgress : item.progress;\n          item.startDate = editstartDate != \"\" ? editstartDate : item.startDate;\n          item.endDate = editEndDate != \"\" ? editEndDate : item.endDate;\n          item.description = editDescription != \"\" ? editDescription : item.description;\n        }\n      });\n      console.log(\"Presnet Obj list form after \", listDataSrc);\n      localStorage.setItem('parentReleaseData', JSON.stringify(listDataSrc)); // form.validateFields((error, row) => {\n      //     if (error) {\n      //         return;\n      //     }\n      //     console.log(\"Form submit\", key)\n      //     console.log(\"Form submit form\", form)\n      //     const newData = [...this.state.data];\n      //     const index = newData.findIndex(item => key === item.key);\n      //     if (index > -1) {\n      //         const item = newData[index];\n      //         newData.splice(index, 1, {\n      //             ...item,\n      //             ...row,\n      //         });\n      //         this.setState({ data: newData, editingKey: '' });\n      //     } else {\n      //         newData.push(row);\n      //         this.setState({ data: newData, editingKey: '' });\n      //     }\n      // });\n    }\n  }, {\n    key: \"edit\",\n    value: function edit(record) {\n      this.setState({\n        editingKey: record.key\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var listDataSrc = this.state.listDataSrc;\n      var components = {\n        body: {\n          cell: this.EditableCell\n        }\n      };\n      var columns = this.state.columns.map(function (col) {\n        if (!col.editable) {\n          return col;\n        }\n\n        return _objectSpread({}, col, {\n          onCell: function onCell(record) {\n            return {\n              record: record,\n              inputType: col.dataIndex,\n              dataIndex: col.dataIndex,\n              title: col.title,\n              editing: _this2.isEditing(record)\n            };\n          }\n        });\n      });\n      return __jsx(React.Fragment, null, __jsx(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 17\n        }\n      }, __jsx(Table, {\n        columns: columns,\n        dataSource: listDataSrc,\n        components: components,\n        rowClassName: \"editable-row\",\n        pagination: {\n          onChange: this.cancel\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 21\n        }\n      })), __jsx(AddParentRelease, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return ReleaseList;\n}(Component);\n\nexport { ReleaseList as default };","map":{"version":3,"sources":["D:/RandDChamber/LogwardAssignment/ProjectManagement/PMA/containers/parentReleaseList.js"],"names":["React","Component","useState","version","Table","Tag","Form","Input","InputNumber","Popconfirm","Progress","DatePicker","Select","Slider","Popover","Button","AddParentRelease","moment","dateFormat","ReleaseList","props","state","editingKey","edit","record","Add","editing","dataIndex","title","inputType","index","children","restProps","console","log","inputNode","handleVersion","startDate","handleStartDate","endDate","handleEndDate","description","handleDescription","width","handleChange","handleSlider","margin","required","message","value","setState","editStatus","editProgress","date","str","editstartDate","editEndDate","e","target","editDescription","editVersion","key","columns","render","text","editable","rec","isEditing","save","marginRight","cancel","content","listDataSrc","isEdit","chkItem","JSON","parse","localStorage","getItem","getItems","prObj","status","progress","map","item","setItem","stringify","components","body","cell","EditableCell","col","onCell","onChange"],"mappings":"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","sourcesContent":["import React, { Component, useState, version } from \"react\";\r\nimport {\r\n    Table, Tag, Form, Input, InputNumber, Popconfirm,\r\n    Progress, DatePicker, Select, Slider, Popover, Button\r\n} from 'antd';\r\nimport AddParentRelease from './addParentRelease';\r\nimport moment from 'moment';\r\n\r\nconst dateFormat = \"DD-MM-YYYY\";\r\n\r\n\r\n\r\n\r\nexport default class ReleaseList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            editingKey: '',\r\n            editVersion: \"\",\r\n            editStatus: \"\",\r\n            editProgress: \"\",\r\n            editstartDate: \"\",\r\n            editEndDate: \"\",\r\n            editDescription: \"\",\r\n            columns: [\r\n                {\r\n                    title: 'Version No',\r\n                    dataIndex: 'version',\r\n                    key: 'version',\r\n                    render: text => <a>{text}</a>,\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Status',\r\n                    dataIndex: 'status',\r\n                    key: 'status',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Progress',\r\n                    dataIndex: 'progress',\r\n                    key: 'progress',\r\n                    editable: true,\r\n                    render: (rec) => (\r\n                        <Progress\r\n                            strokeColor={{\r\n                                '0%': '#108ee9',\r\n                                '100%': '#87d068',\r\n                            }}\r\n                            percent={rec}\r\n                        />\r\n                    ),\r\n                },\r\n                {\r\n                    title: 'Start Date',\r\n                    dataIndex: 'startDate',\r\n                    key: 'startDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Release Date',\r\n                    dataIndex: 'endDate',\r\n                    key: 'endDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Description',\r\n                    dataIndex: 'description',\r\n                    key: 'description',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Action',\r\n                    key: 'action',\r\n                    render: (text, record) => {\r\n                        const editable = this.isEditing(record);\r\n                        return editable ? (\r\n                            <span>\r\n                                <a\r\n                                    href=\"javascript:;\"\r\n                                    onClick={() => this.save(record)}\r\n                                    style={{\r\n                                        marginRight: 8,\r\n                                    }}\r\n                                >\r\n                                    Save\r\n                            </a>\r\n                                <Popconfirm title=\"Sure to cancel?\" onConfirm={this.cancel}>\r\n                                    <a>Cancel</a>\r\n                                </Popconfirm>\r\n                            </span>\r\n                        ) : (\r\n                                // <a disabled={this.state.editingKey !== ''} onClick={() => this.edit(record)}>\r\n                                //     Edit\r\n                                // </a>\r\n                                <Popover content={this.content} title=\"Title\" trigger=\"hover\">\r\n                                    <Button>Hover me</Button>\r\n                                </Popover>\r\n                            );\r\n                    }\r\n                }\r\n            ],\r\n            listDataSrc: [],\r\n            isEdit: false\r\n        }\r\n    }\r\n\r\n    content = () => {\r\n        return (\r\n            < div >\r\n                <p disabled={this.state.editingKey !== ''} onClick={() => this.edit(record)}>Edit</p>\r\n                <p disabled={this.state.editingKey !== ''} onClick={() => this.Add(record)}>Add</p>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        let chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\r\n        let getItems = chkItem == null ? [] : chkItem;\r\n        this.setState({\r\n            listDataSrc: getItems\r\n        })\r\n    }\r\n\r\n    EditableCell = ({\r\n        editing,\r\n        dataIndex,\r\n        title,\r\n        inputType,\r\n        record,\r\n        index,\r\n        children,\r\n        ...restProps\r\n    }) => {\r\n        // console.log(\"started 1\", children)\r\n        console.log(\"started 2\", record)\r\n        // console.log(\"started 4\", dataIndex)\r\n        // console.log(\"started 5\", title)\r\n        let inputNode;\r\n\r\n\r\n        switch (dataIndex) {\r\n            case \"version\":\r\n                inputNode = <Input defaultValue={record.version} name=\"version\" onChange={this.handleVersion} />\r\n                break;\r\n            case \"startDate\":\r\n                inputNode = <DatePicker name=\"startDate\" defaultValue={moment(record.startDate, dateFormat)} onChange={this.handleStartDate} />\r\n                break;\r\n            case \"endDate\":\r\n                inputNode = <DatePicker name=\"endDate\" defaultValue={moment(record.endDate, dateFormat)} onChange={this.handleEndDate} />\r\n                break;\r\n            case \"description\":\r\n                inputNode = <Input defaultValue={record.description} onChange={this.handleDescription} />\r\n                break;\r\n            case \"status\":\r\n                inputNode =\r\n                    <Select style={{ width: 120 }} name=\"status\" onChange={this.handleChange}>\r\n                        <Option value=\"IN PROGRESS\">In Progress</Option>\r\n                        <Option value=\"UNRELEASED\">Unreleased</Option>\r\n                        <Option value=\"RELEASED\">Released</Option>\r\n                    </Select>\r\n                // onChange = { handleChange }\r\n                break;\r\n            case \"progress\":\r\n                inputNode = <Slider defaultValue={30} tooltipVisible name=\"progress\" onChange={this.handleSlider} />\r\n                break;\r\n            default:\r\n            // code block\r\n        }\r\n\r\n        // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\r\n        return (\r\n            <td {...restProps}>\r\n                {editing ?\r\n                    (\r\n                        <Form.Item\r\n                            name={dataIndex}\r\n                            style={{ margin: 0 }}\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: `Please Input ${title}!`,\r\n                                },\r\n                            ]}\r\n                        >\r\n                            {inputNode}\r\n                        </Form.Item>\r\n\r\n                    )\r\n\r\n                    : (\r\n                        children\r\n                    )}\r\n            </td>\r\n        );\r\n        // }\r\n    };\r\n\r\n    handleChange = (value) => {\r\n        console.log(\"Vlaue\", value)\r\n        this.setState({\r\n            editStatus: value\r\n        })\r\n    }\r\n\r\n    handleSlider = (value) => {\r\n        console.log(\"slider Vlaue\", value);\r\n        this.setState({\r\n            editProgress: value\r\n        })\r\n    }\r\n    handleStartDate = (date, str) => {\r\n        console.log(\"sliceer sd str\", str)\r\n        this.setState({\r\n            editstartDate: str\r\n        })\r\n    }\r\n    handleEndDate = (date, str) => {\r\n        console.log(\"sliceer ed\", str)\r\n        this.setState({\r\n            editEndDate: str\r\n        })\r\n    }\r\n    handleDescription = (e) => {\r\n        console.log(\"sliceer desc\", e.target.value)\r\n        this.setState({\r\n            editDescription: e.target.value\r\n        })\r\n    }\r\n    handleVersion = (e) => {\r\n        console.log(\"sliceer vers\", e.target.value)\r\n        this.setState({\r\n            editVersion: e.target.value\r\n        })\r\n    }\r\n\r\n    isEditing = record => record.key === this.state.editingKey;\r\n\r\n    cancel = () => {\r\n        this.setState({ editingKey: '' });\r\n    };\r\n\r\n    save(record) {\r\n        console.log(\"Form submit\", record)\r\n        let { editVersion, editstartDate, editEndDate, editDescription, editStatus, editProgress, listDataSrc } = this.state;\r\n\r\n        // let arr = this.state.localPRItems;\r\n        let prObj = {\r\n            key: record.key,\r\n            version: editVersion,\r\n            status: editStatus,\r\n            progress: editProgress,\r\n            startDate: editstartDate,\r\n            endDate: editEndDate,\r\n            description: editDescription\r\n        }\r\n\r\n        console.log(\"Presnet Obj\", prObj)\r\n        console.log(\"Presnet Obj list form before\", listDataSrc)\r\n\r\n\r\n        listDataSrc.map(item => {\r\n            if (item.key == record.key) {\r\n                item.key = record.key;\r\n                item.version = editVersion != \"\" ? editVersion : item.version;\r\n                item.status = editStatus != \"\" ? editStatus : item.status;\r\n                item.progress = editProgress != \"\" ? editProgress : item.progress;\r\n                item.startDate = editstartDate != \"\" ? editstartDate : item.startDate;\r\n                item.endDate = editEndDate != \"\" ? editEndDate : item.endDate;\r\n                item.description = editDescription != \"\" ? editDescription : item.description;\r\n            }\r\n        })\r\n        console.log(\"Presnet Obj list form after \", listDataSrc)\r\n        localStorage.setItem('parentReleaseData', JSON.stringify(listDataSrc))\r\n\r\n        // form.validateFields((error, row) => {\r\n        //     if (error) {\r\n        //         return;\r\n        //     }\r\n        //     console.log(\"Form submit\", key)\r\n        //     console.log(\"Form submit form\", form)\r\n        //     const newData = [...this.state.data];\r\n        //     const index = newData.findIndex(item => key === item.key);\r\n        //     if (index > -1) {\r\n        //         const item = newData[index];\r\n        //         newData.splice(index, 1, {\r\n        //             ...item,\r\n        //             ...row,\r\n        //         });\r\n        //         this.setState({ data: newData, editingKey: '' });\r\n        //     } else {\r\n        //         newData.push(row);\r\n        //         this.setState({ data: newData, editingKey: '' });\r\n        //     }\r\n        // });\r\n    }\r\n\r\n    edit(record) {\r\n        this.setState({ editingKey: record.key });\r\n    }\r\n\r\n    render() {\r\n        let { listDataSrc } = this.state;\r\n\r\n        const components = {\r\n            body: {\r\n                cell: this.EditableCell,\r\n            },\r\n        };\r\n\r\n        const columns = this.state.columns.map(col => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n            return {\r\n                ...col,\r\n                onCell: record => ({\r\n                    record,\r\n                    inputType: col.dataIndex,\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    editing: this.isEditing(record),\r\n                }),\r\n            };\r\n        });\r\n\r\n\r\n        return (\r\n            <>\r\n                <Form>\r\n                    <Table\r\n                        columns={columns}\r\n                        dataSource={listDataSrc}\r\n                        components={components}\r\n                        rowClassName=\"editable-row\"\r\n                        pagination={{\r\n                            onChange: this.cancel,\r\n                        }}\r\n                    />\r\n                </Form>\r\n\r\n\r\n                <AddParentRelease />\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}