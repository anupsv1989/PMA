{"ast":null,"code":"var _jsxFileName = \"D:\\\\RandDChamber\\\\LogwardAssignment\\\\ProjectManagement\\\\PMA\\\\containers\\\\parentReleaseList.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, useState, version } from \"react\";\nimport { Table, Tag, Form, Input, InputNumber, Popconfirm, Row, Col, Dropdown, Progress, DatePicker, Select, Slider, Popover, Button, Modal, Badge } from 'antd';\nimport AddParentRelease from './addParentRelease';\nimport moment from 'moment';\nimport AddChildRelease from \"./addChildRelease\";\nconst dateFormat = \"DD-MM-YYYY\";\n\nconst expandedRowRender = () => {\n  const columns = [{\n    title: 'Date',\n    dataIndex: 'date',\n    key: 'date'\n  }, {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name'\n  }, {\n    title: 'Status',\n    key: 'state',\n    render: () => __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }\n    }, __jsx(Badge, {\n      status: \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 21\n      }\n    }), \"Finished\")\n  }, {\n    title: 'Upgrade Status',\n    dataIndex: 'upgradeNum',\n    key: 'upgradeNum'\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    key: 'operation',\n    render: () => __jsx(\"span\", {\n      className: \"table-operation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }\n    }, \"More\"))\n  }];\n  const data = [];\n\n  for (let i = 0; i < 3; ++i) {\n    data.push({\n      key: i,\n      date: '2014-12-24 23:12:00',\n      name: 'This is production name',\n      upgradeNum: 'Upgraded: 56'\n    });\n  }\n\n  return __jsx(Table, {\n    columns: columns,\n    dataSource: data,\n    pagination: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }\n  });\n};\n\nexport default class ReleaseList extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"addChildItem\", rec => {\n      console.log(\"children \", rec);\n      this.setState({\n        modalVisible: true,\n        currentRecord: rec\n      });\n    });\n\n    _defineProperty(this, \"deleteItem\", rec => {});\n\n    _defineProperty(this, \"EditableCell\", (_ref) => {\n      let {\n        editing,\n        dataIndex,\n        title,\n        inputType,\n        record,\n        index,\n        children\n      } = _ref,\n          restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n      // console.log(\"started 1\", children)\n      // console.log(\"started 2\", record)\n      // console.log(\"started 4\", dataIndex)\n      // console.log(\"started 5\", title)\n      let inputNode;\n\n      switch (dataIndex) {\n        case \"version\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.version,\n            name: \"version\",\n            onChange: this.handleVersion,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"startDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"startDate\",\n            defaultValue: moment(record.startDate, dateFormat),\n            onChange: this.handleStartDate,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"endDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"endDate\",\n            defaultValue: moment(record.endDate, dateFormat),\n            onChange: this.handleEndDate,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"description\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.description,\n            onChange: this.handleDescription,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"status\":\n          inputNode = __jsx(Select, {\n            style: {\n              width: 120\n            },\n            name: \"status\",\n            onChange: this.handleChange,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 21\n            }\n          }, __jsx(Option, {\n            value: \"IN PROGRESS\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 25\n            }\n          }, \"In Progress\"), __jsx(Option, {\n            value: \"UNRELEASED\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 25\n            }\n          }, \"Unreleased\"), __jsx(Option, {\n            value: \"RELEASED\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 25\n            }\n          }, \"Released\")); // onChange = { handleChange }\n\n          break;\n\n        case \"progress\":\n          inputNode = __jsx(Slider, {\n            defaultValue: 30,\n            tooltipVisible: true,\n            name: \"progress\",\n            onChange: this.handleSlider,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        default: // code block\n\n      } // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n\n\n      return __jsx(\"td\", _extends({}, restProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }\n      }), editing ? __jsx(Form.Item, {\n        name: dataIndex,\n        style: {\n          margin: 0\n        },\n        rules: [{\n          required: true,\n          message: `Please Input ${title}!`\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 25\n        }\n      }, inputNode) : children); // }\n    });\n\n    _defineProperty(this, \"handleChange\", value => {\n      console.log(\"Vlaue\", value);\n      this.setState({\n        editStatus: value\n      });\n    });\n\n    _defineProperty(this, \"handleSlider\", value => {\n      console.log(\"slider Vlaue\", value);\n      this.setState({\n        editProgress: value\n      });\n    });\n\n    _defineProperty(this, \"handleStartDate\", (date, str) => {\n      console.log(\"sliceer sd str\", str);\n      this.setState({\n        editstartDate: str\n      });\n    });\n\n    _defineProperty(this, \"handleEndDate\", (date, str) => {\n      console.log(\"sliceer ed\", str);\n      this.setState({\n        editEndDate: str\n      });\n    });\n\n    _defineProperty(this, \"handleDescription\", e => {\n      console.log(\"sliceer desc\", e.target.value);\n      this.setState({\n        editDescription: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleVersion\", e => {\n      console.log(\"sliceer vers\", e.target.value);\n      this.setState({\n        editVersion: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"isEditing\", record => record.key === this.state.editingKey);\n\n    _defineProperty(this, \"cancel\", () => {\n      this.setState({\n        editingKey: ''\n      });\n    });\n\n    _defineProperty(this, \"handleCancel\", () => {\n      this.setState({\n        modalVisible: false\n      });\n    });\n\n    _defineProperty(this, \"handleOk\", () => {\n      this.setState({\n        modalVisible: false\n      });\n    });\n\n    let _this = this;\n\n    this.state = {\n      editingKey: '',\n      editVersion: \"\",\n      editStatus: \"\",\n      editProgress: \"\",\n      editstartDate: \"\",\n      editEndDate: \"\",\n      editDescription: \"\",\n      modalVisible: false,\n      currentRecord: {},\n      columns: [{\n        title: 'Version No',\n        dataIndex: 'version',\n        key: 'version',\n        render: text => __jsx(\"a\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 37\n          }\n        }, text),\n        editable: true\n      }, {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n        editable: true\n      }, {\n        title: 'Progress',\n        dataIndex: 'progress',\n        key: 'progress',\n        editable: true,\n        render: rec => __jsx(Progress, {\n          strokeColor: {\n            '0%': '#108ee9',\n            '100%': '#87d068'\n          },\n          percent: rec,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }\n        })\n      }, {\n        title: 'Start Date',\n        dataIndex: 'startDate',\n        key: 'startDate',\n        editable: true\n      }, {\n        title: 'Release Date',\n        dataIndex: 'endDate',\n        key: 'endDate',\n        editable: true\n      }, {\n        title: 'Description',\n        dataIndex: 'description',\n        key: 'description',\n        editable: true\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: (text, record) => {\n          const editable = this.isEditing(record);\n\n          const Content = __jsx(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 29\n            }\n          }, __jsx(Row, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 33\n            }\n          }, __jsx(Col, {\n            span: 8,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 37\n            }\n          }, __jsx(\"a\", {\n            disabled: this.state.editingKey !== '',\n            onClick: () => this.edit(record),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 51\n            }\n          }, \"Edit\")), __jsx(Col, {\n            span: 8,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 37\n            }\n          }, __jsx(\"a\", {\n            disabled: this.state.editingKey !== '',\n            onClick: () => this.addChildItem(record),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 51\n            }\n          }, \"Add\")), __jsx(Col, {\n            span: 8,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 37\n            }\n          }, __jsx(\"a\", {\n            disabled: this.state.editingKey !== '',\n            onClick: () => this.deleteItem(record),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 51\n            }\n          }, \"Delete\"))));\n\n          return editable ? __jsx(\"span\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 29\n            }\n          }, __jsx(\"a\", {\n            href: \"javascript:;\",\n            onClick: () => this.save(record),\n            style: {\n              marginRight: 8\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 33\n            }\n          }, \"Save\"), __jsx(Popconfirm, {\n            title: \"Sure to cancel?\",\n            onConfirm: this.cancel,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 33\n            }\n          }, __jsx(\"a\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 37\n            }\n          }, \"Cancel\"))) : __jsx(Popover, {\n            content: Content,\n            title: \"Title\",\n            trigger: \"hover\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 33\n            }\n          }, __jsx(Button, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 37\n            }\n          }, \"Hover me\"));\n        }\n      }],\n      listDataSrc: [],\n      isEdit: false\n    };\n  }\n\n  componentDidMount() {\n    let chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\n    let getItems = chkItem == null ? [] : chkItem;\n    this.setState({\n      listDataSrc: getItems\n    });\n  }\n\n  save(record) {\n    console.log(\"Form submit\", record);\n    let {\n      editVersion,\n      editstartDate,\n      editEndDate,\n      editDescription,\n      editStatus,\n      editProgress,\n      listDataSrc\n    } = this.state; // let arr = this.state.localPRItems;\n\n    let prObj = {\n      key: record.key,\n      version: editVersion,\n      status: editStatus,\n      progress: editProgress,\n      startDate: editstartDate,\n      endDate: editEndDate,\n      description: editDescription\n    };\n    console.log(\"Presnet Obj\", prObj);\n    console.log(\"Presnet Obj list form before\", listDataSrc);\n    listDataSrc.map(item => {\n      if (item.key == record.key) {\n        item.key = record.key;\n        item.childRelease = [];\n        item.version = editVersion != \"\" ? editVersion : item.version;\n        item.status = editStatus != \"\" ? editStatus : item.status;\n        item.progress = editProgress != \"\" ? editProgress : item.progress;\n        item.startDate = editstartDate != \"\" ? editstartDate : item.startDate;\n        item.endDate = editEndDate != \"\" ? editEndDate : item.endDate;\n        item.description = editDescription != \"\" ? editDescription : item.description;\n      }\n    });\n    console.log(\"Presnet Obj list form after \", listDataSrc);\n    localStorage.setItem('parentReleaseData', JSON.stringify(listDataSrc)); // form.validateFields((error, row) => {\n    //     if (error) {\n    //         return;\n    //     }\n    //     console.log(\"Form submit\", key)\n    //     console.log(\"Form submit form\", form)\n    //     const newData = [...this.state.data];\n    //     const index = newData.findIndex(item => key === item.key);\n    //     if (index > -1) {\n    //         const item = newData[index];\n    //         newData.splice(index, 1, {\n    //             ...item,\n    //             ...row,\n    //         });\n    //         this.setState({ data: newData, editingKey: '' });\n    //     } else {\n    //         newData.push(row);\n    //         this.setState({ data: newData, editingKey: '' });\n    //     }\n    // });\n  }\n\n  edit(record) {\n    this.setState({\n      editingKey: record.key\n    });\n  }\n\n  render() {\n    let {\n      listDataSrc\n    } = this.state;\n    const components = {\n      body: {\n        cell: this.EditableCell\n      }\n    };\n    const columns = this.state.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return _objectSpread({}, col, {\n        onCell: record => ({\n          record,\n          inputType: col.dataIndex,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record)\n        })\n      });\n    });\n    return __jsx(React.Fragment, null, __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 17\n      }\n    }, __jsx(Table, {\n      columns: columns,\n      dataSource: listDataSrc,\n      components: components,\n      expandable: {\n        expandedRowRender\n      },\n      rowClassName: \"editable-row\",\n      pagination: {\n        onChange: this.cancel\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 21\n      }\n    })), __jsx(AddParentRelease, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 17\n      }\n    }), __jsx(Modal, {\n      title: \"Basic Modal\",\n      visible: this.state.modalVisible,\n      onOk: this.handleOk,\n      closable: true,\n      className: \"modal-Layout\",\n      onCancel: this.handleCancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 17\n      }\n    }, __jsx(AddChildRelease, {\n      thisData: this.state.currentRecord,\n      closeModal: this.handleOk,\n      dbData: listDataSrc,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["D:/RandDChamber/LogwardAssignment/ProjectManagement/PMA/containers/parentReleaseList.js"],"names":["React","Component","useState","version","Table","Tag","Form","Input","InputNumber","Popconfirm","Row","Col","Dropdown","Progress","DatePicker","Select","Slider","Popover","Button","Modal","Badge","AddParentRelease","moment","AddChildRelease","dateFormat","expandedRowRender","columns","title","dataIndex","key","render","data","i","push","date","name","upgradeNum","ReleaseList","constructor","props","rec","console","log","setState","modalVisible","currentRecord","editing","inputType","record","index","children","restProps","inputNode","handleVersion","startDate","handleStartDate","endDate","handleEndDate","description","handleDescription","width","handleChange","handleSlider","margin","required","message","value","editStatus","editProgress","str","editstartDate","editEndDate","e","target","editDescription","editVersion","state","editingKey","_this","text","editable","isEditing","Content","edit","addChildItem","deleteItem","save","marginRight","cancel","listDataSrc","isEdit","componentDidMount","chkItem","JSON","parse","localStorage","getItem","getItems","prObj","status","progress","map","item","childRelease","setItem","stringify","components","body","cell","EditableCell","col","onCell","onChange","handleOk","handleCancel"],"mappings":"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","sourcesContent":["import React, { Component, useState, version } from \"react\";\r\nimport {\r\n    Table, Tag, Form, Input, InputNumber, Popconfirm, Row, Col, Dropdown,\r\n    Progress, DatePicker, Select, Slider, Popover, Button, Modal, Badge\r\n} from 'antd';\r\nimport AddParentRelease from './addParentRelease';\r\nimport moment from 'moment';\r\nimport AddChildRelease from \"./addChildRelease\";\r\n\r\nconst dateFormat = \"DD-MM-YYYY\";\r\n\r\nconst expandedRowRender = () => {\r\n    const columns = [\r\n        { title: 'Date', dataIndex: 'date', key: 'date' },\r\n        { title: 'Name', dataIndex: 'name', key: 'name' },\r\n        {\r\n            title: 'Status',\r\n            key: 'state',\r\n            render: () => (\r\n                <span>\r\n                    <Badge status=\"success\" />\r\n            Finished\r\n                </span>\r\n            ),\r\n        },\r\n        { title: 'Upgrade Status', dataIndex: 'upgradeNum', key: 'upgradeNum' },\r\n        {\r\n            title: 'Action',\r\n            dataIndex: 'operation',\r\n            key: 'operation',\r\n            render: () => (\r\n                <span className=\"table-operation\">\r\n                    {/* <Dropdown overlay={menu}> */}\r\n                    <a>\r\n                        More\r\n                        </a>\r\n                    {/* </Dropdown> */}\r\n                </span>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const data = [];\r\n    for (let i = 0; i < 3; ++i) {\r\n        data.push({\r\n            key: i,\r\n            date: '2014-12-24 23:12:00',\r\n            name: 'This is production name',\r\n            upgradeNum: 'Upgraded: 56',\r\n        });\r\n    }\r\n    return <Table columns={columns} dataSource={data} pagination={false} />;\r\n};\r\n\r\n\r\nexport default class ReleaseList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let _this = this;\r\n        this.state = {\r\n            editingKey: '',\r\n            editVersion: \"\",\r\n            editStatus: \"\",\r\n            editProgress: \"\",\r\n            editstartDate: \"\",\r\n            editEndDate: \"\",\r\n            editDescription: \"\",\r\n            modalVisible: false,\r\n            currentRecord: {},\r\n            columns: [\r\n                {\r\n                    title: 'Version No',\r\n                    dataIndex: 'version',\r\n                    key: 'version',\r\n                    render: text => <a>{text}</a>,\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Status',\r\n                    dataIndex: 'status',\r\n                    key: 'status',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Progress',\r\n                    dataIndex: 'progress',\r\n                    key: 'progress',\r\n                    editable: true,\r\n                    render: (rec) => (\r\n                        <Progress\r\n                            strokeColor={{\r\n                                '0%': '#108ee9',\r\n                                '100%': '#87d068',\r\n                            }}\r\n                            percent={rec}\r\n                        />\r\n                    ),\r\n                },\r\n                {\r\n                    title: 'Start Date',\r\n                    dataIndex: 'startDate',\r\n                    key: 'startDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Release Date',\r\n                    dataIndex: 'endDate',\r\n                    key: 'endDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Description',\r\n                    dataIndex: 'description',\r\n                    key: 'description',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Action',\r\n                    key: 'action',\r\n                    render: (text, record) => {\r\n                        const editable = this.isEditing(record);\r\n                        const Content = (\r\n                            <div>\r\n                                <Row>\r\n                                    <Col span={8}><a disabled={this.state.editingKey !== ''} onClick={() => this.edit(record)}>Edit</a></Col>\r\n                                    <Col span={8}><a disabled={this.state.editingKey !== ''} onClick={() => this.addChildItem(record)}>Add</a></Col>\r\n                                    <Col span={8}><a disabled={this.state.editingKey !== ''} onClick={() => this.deleteItem(record)}>Delete</a></Col>\r\n                                </Row>\r\n                            </div>\r\n                        );\r\n                        return editable ? (\r\n                            <span>\r\n                                <a\r\n                                    href=\"javascript:;\"\r\n                                    onClick={() => this.save(record)}\r\n                                    style={{\r\n                                        marginRight: 8,\r\n                                    }}\r\n                                >\r\n                                    Save\r\n                            </a>\r\n                                <Popconfirm title=\"Sure to cancel?\" onConfirm={this.cancel}>\r\n                                    <a>Cancel</a>\r\n                                </Popconfirm>\r\n                            </span>\r\n                        ) : (\r\n                                <Popover content={Content} title=\"Title\" trigger=\"hover\">\r\n                                    <Button>Hover me</Button>\r\n                                </Popover>\r\n                            );\r\n                    }\r\n                }\r\n            ],\r\n            listDataSrc: [],\r\n            isEdit: false\r\n        }\r\n    }\r\n\r\n\r\n    addChildItem = (rec) => {\r\n        console.log(\"children \", rec)\r\n        this.setState({\r\n            modalVisible: true,\r\n            currentRecord: rec\r\n        })\r\n    }\r\n\r\n    deleteItem = (rec) => {\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        let chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\r\n        let getItems = chkItem == null ? [] : chkItem;\r\n        this.setState({\r\n            listDataSrc: getItems\r\n        })\r\n    }\r\n\r\n    EditableCell = ({\r\n        editing,\r\n        dataIndex,\r\n        title,\r\n        inputType,\r\n        record,\r\n        index,\r\n        children,\r\n        ...restProps\r\n    }) => {\r\n        // console.log(\"started 1\", children)\r\n        // console.log(\"started 2\", record)\r\n        // console.log(\"started 4\", dataIndex)\r\n        // console.log(\"started 5\", title)\r\n        let inputNode;\r\n\r\n\r\n        switch (dataIndex) {\r\n            case \"version\":\r\n                inputNode = <Input defaultValue={record.version} name=\"version\" onChange={this.handleVersion} />\r\n                break;\r\n            case \"startDate\":\r\n                inputNode = <DatePicker name=\"startDate\" defaultValue={moment(record.startDate, dateFormat)} onChange={this.handleStartDate} />\r\n                break;\r\n            case \"endDate\":\r\n                inputNode = <DatePicker name=\"endDate\" defaultValue={moment(record.endDate, dateFormat)} onChange={this.handleEndDate} />\r\n                break;\r\n            case \"description\":\r\n                inputNode = <Input defaultValue={record.description} onChange={this.handleDescription} />\r\n                break;\r\n            case \"status\":\r\n                inputNode =\r\n                    <Select style={{ width: 120 }} name=\"status\" onChange={this.handleChange}>\r\n                        <Option value=\"IN PROGRESS\">In Progress</Option>\r\n                        <Option value=\"UNRELEASED\">Unreleased</Option>\r\n                        <Option value=\"RELEASED\">Released</Option>\r\n                    </Select>\r\n                // onChange = { handleChange }\r\n                break;\r\n            case \"progress\":\r\n                inputNode = <Slider defaultValue={30} tooltipVisible name=\"progress\" onChange={this.handleSlider} />\r\n                break;\r\n            default:\r\n            // code block\r\n        }\r\n\r\n        // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\r\n        return (\r\n            <td {...restProps}>\r\n                {editing ?\r\n                    (\r\n                        <Form.Item\r\n                            name={dataIndex}\r\n                            style={{ margin: 0 }}\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: `Please Input ${title}!`,\r\n                                },\r\n                            ]}\r\n                        >\r\n                            {inputNode}\r\n                        </Form.Item>\r\n\r\n                    )\r\n\r\n                    : (\r\n                        children\r\n                    )}\r\n            </td>\r\n        );\r\n        // }\r\n    };\r\n\r\n    handleChange = (value) => {\r\n        console.log(\"Vlaue\", value)\r\n        this.setState({\r\n            editStatus: value\r\n        })\r\n    }\r\n\r\n\r\n\r\n    handleSlider = (value) => {\r\n        console.log(\"slider Vlaue\", value);\r\n        this.setState({\r\n            editProgress: value\r\n        })\r\n    }\r\n    handleStartDate = (date, str) => {\r\n        console.log(\"sliceer sd str\", str)\r\n        this.setState({\r\n            editstartDate: str\r\n        })\r\n    }\r\n    handleEndDate = (date, str) => {\r\n        console.log(\"sliceer ed\", str)\r\n        this.setState({\r\n            editEndDate: str\r\n        })\r\n    }\r\n    handleDescription = (e) => {\r\n        console.log(\"sliceer desc\", e.target.value)\r\n        this.setState({\r\n            editDescription: e.target.value\r\n        })\r\n    }\r\n    handleVersion = (e) => {\r\n        console.log(\"sliceer vers\", e.target.value)\r\n        this.setState({\r\n            editVersion: e.target.value\r\n        })\r\n    }\r\n\r\n    isEditing = record => record.key === this.state.editingKey;\r\n\r\n    cancel = () => {\r\n        this.setState({ editingKey: '' });\r\n    };\r\n\r\n    save(record) {\r\n        console.log(\"Form submit\", record)\r\n        let { editVersion, editstartDate, editEndDate, editDescription, editStatus, editProgress, listDataSrc } = this.state;\r\n\r\n        // let arr = this.state.localPRItems;\r\n        let prObj = {\r\n            key: record.key,\r\n            version: editVersion,\r\n            status: editStatus,\r\n            progress: editProgress,\r\n            startDate: editstartDate,\r\n            endDate: editEndDate,\r\n            description: editDescription\r\n        }\r\n\r\n        console.log(\"Presnet Obj\", prObj)\r\n        console.log(\"Presnet Obj list form before\", listDataSrc)\r\n\r\n\r\n        listDataSrc.map(item => {\r\n            if (item.key == record.key) {\r\n                item.key = record.key;\r\n                item.childRelease = [];\r\n                item.version = editVersion != \"\" ? editVersion : item.version;\r\n                item.status = editStatus != \"\" ? editStatus : item.status;\r\n                item.progress = editProgress != \"\" ? editProgress : item.progress;\r\n                item.startDate = editstartDate != \"\" ? editstartDate : item.startDate;\r\n                item.endDate = editEndDate != \"\" ? editEndDate : item.endDate;\r\n                item.description = editDescription != \"\" ? editDescription : item.description;\r\n            }\r\n        })\r\n        console.log(\"Presnet Obj list form after \", listDataSrc)\r\n        localStorage.setItem('parentReleaseData', JSON.stringify(listDataSrc))\r\n\r\n        // form.validateFields((error, row) => {\r\n        //     if (error) {\r\n        //         return;\r\n        //     }\r\n        //     console.log(\"Form submit\", key)\r\n        //     console.log(\"Form submit form\", form)\r\n        //     const newData = [...this.state.data];\r\n        //     const index = newData.findIndex(item => key === item.key);\r\n        //     if (index > -1) {\r\n        //         const item = newData[index];\r\n        //         newData.splice(index, 1, {\r\n        //             ...item,\r\n        //             ...row,\r\n        //         });\r\n        //         this.setState({ data: newData, editingKey: '' });\r\n        //     } else {\r\n        //         newData.push(row);\r\n        //         this.setState({ data: newData, editingKey: '' });\r\n        //     }\r\n        // });\r\n    }\r\n\r\n    edit(record) {\r\n        this.setState({ editingKey: record.key });\r\n    }\r\n\r\n    handleCancel = () => {\r\n        this.setState({\r\n            modalVisible: false\r\n        })\r\n    }\r\n\r\n    handleOk = () => {\r\n        this.setState({\r\n            modalVisible: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { listDataSrc } = this.state;\r\n\r\n        const components = {\r\n            body: {\r\n                cell: this.EditableCell,\r\n            },\r\n        };\r\n\r\n        const columns = this.state.columns.map(col => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n            return {\r\n                ...col,\r\n                onCell: record => ({\r\n                    record,\r\n                    inputType: col.dataIndex,\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    editing: this.isEditing(record),\r\n                }),\r\n            };\r\n        });\r\n\r\n\r\n        return (\r\n            <>\r\n                <Form>\r\n                    <Table\r\n                        columns={columns}\r\n                        dataSource={listDataSrc}\r\n                        components={components}\r\n                        expandable={{ expandedRowRender }}\r\n                        rowClassName=\"editable-row\"\r\n                        pagination={{\r\n                            onChange: this.cancel,\r\n                        }}\r\n                    />\r\n                </Form>\r\n                <AddParentRelease />\r\n                <Modal\r\n                    title=\"Basic Modal\"\r\n                    visible={this.state.modalVisible}\r\n                    onOk={this.handleOk}\r\n                    closable\r\n                    className=\"modal-Layout\"\r\n                    onCancel={this.handleCancel}\r\n                >\r\n                    <AddChildRelease thisData={this.state.currentRecord} closeModal={this.handleOk} dbData={listDataSrc} />\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}