{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, useState, version } from \"react\";\nimport { Table, Tag, Form, Input, InputNumber, Popconfirm, Row, Col, Dropdown, Progress, DatePicker, Select, Slider, Popover, Button, Modal, Badge } from 'antd';\nimport AddParentRelease from './addParentRelease';\nimport moment from 'moment';\nimport AddChildRelease from \"./addChildRelease\";\nimport ChildReleaseList from \"./ChildReleaseList\";\nimport actions from \"../redux/action\";\nimport { connect } from \"react-redux\";\nimport { MenuOutlined } from '@ant-design/icons';\nimport { statusDisplay, progressDisplay, dateFormat } from \"../commons/helpers\";\nvar onFetchItem = actions.onFetchItem; // Main release listing page\n// Expects - redux for listing object\n// Caters other components and passes props such as data and redux methods\n\nvar ReleaseList = /*#__PURE__*/function (_Component) {\n  _inherits(ReleaseList, _Component);\n\n  var _super = _createSuper(ReleaseList);\n\n  function ReleaseList(props) {\n    var _this2;\n\n    _classCallCheck(this, ReleaseList);\n\n    _this2 = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this2), \"addChildItem\", function (rec) {\n      _this2.setState({\n        modalVisible: true,\n        currentRecord: rec\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"deleteItem\", function (rec) {\n      var arr = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\n      var index = arr.map(function (x) {\n        return x.key;\n      }).indexOf(rec.key);\n      arr.splice(index, 1);\n      localStorage.setItem('parentReleaseData', JSON.stringify(arr));\n\n      _this2.fetchItem();\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"EditableCell\", function (_ref) {\n      var editing = _ref.editing,\n          dataIndex = _ref.dataIndex,\n          title = _ref.title,\n          inputType = _ref.inputType,\n          record = _ref.record,\n          index = _ref.index,\n          children = _ref.children,\n          restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n      var inputNode;\n\n      switch (dataIndex) {\n        case \"version\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.version,\n            name: \"version\",\n            onChange: function onChange(e) {\n              return _this2.handleVersionDesc(e, \"editVersion\");\n            }\n          });\n          break;\n\n        case \"startDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"startDate\",\n            defaultValue: moment(record.startDate, dateFormat),\n            onChange: _this2.handleStartDate\n          });\n          break;\n\n        case \"endDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"endDate\",\n            defaultValue: moment(record.endDate, dateFormat),\n            onChange: _this2.handleEndDate\n          });\n          break;\n\n        case \"description\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.description,\n            onChange: function onChange(e) {\n              return _this2.handleVersionDesc(e, \"editDescription\");\n            }\n          });\n          break;\n\n        case \"status\":\n          inputNode = __jsx(Select, {\n            style: {\n              width: 120\n            },\n            name: \"status\",\n            defaultValue: _this2.state.editStatus,\n            onChange: function onChange(e) {\n              return _this2.handleSelectSlider(e, \"editStatus\");\n            }\n          }, __jsx(Option, {\n            value: \"IN PROGRESS\"\n          }, \"In Progress\"), __jsx(Option, {\n            value: \"UNRELEASED\"\n          }, \"Unreleased\"), __jsx(Option, {\n            value: \"RELEASED\"\n          }, \"Released\"));\n          break;\n\n        case \"progress\":\n          inputNode = __jsx(Slider, {\n            defaultValue: _this2.state.editProgress == \"\" ? 0 : _this2.state.editProgress,\n            tooltipVisible: true,\n            name: \"progress\",\n            onChange: function onChange(e) {\n              return _this2.handleSelectSlider(e, \"editProgress\");\n            }\n          });\n          break;\n      }\n\n      return __jsx(\"td\", restProps, editing ? __jsx(Form.Item, {\n        name: record.key + \"_\" + dataIndex,\n        style: {\n          margin: 0\n        },\n        rules: [{\n          required: true,\n          message: \"Please Input \".concat(title, \"!\")\n        }]\n      }, inputNode) : children);\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"handleSelectSlider\", function (value, type) {\n      _this2.setState(_defineProperty({}, type, value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"handleVersionDesc\", function (e, type) {\n      _this2.setState(_defineProperty({}, type, e.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"handleStartDate\", function (date, str) {\n      _this2.setState({\n        editstartDate: str\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"handleEndDate\", function (date, str) {\n      _this2.setState({\n        editEndDate: str\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"isEditing\", function (record) {\n      return record.key === _this2.state.editingKey;\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"cancel\", function () {\n      _this2.setState({\n        editingKey: ''\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"handleCancel\", function () {\n      _this2.setState({\n        modalVisible: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"handleOk\", function () {\n      _this2.setState({\n        modalVisible: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"fetchItem\", function () {\n      console.log(\"on fetch item call back\");\n\n      _this2.props.onFetchItem();\n    });\n\n    var _this = _assertThisInitialized(_this2);\n\n    _this2.state = {\n      editingKey: '',\n      editVersion: \"\",\n      editStatus: \"\",\n      editProgress: 0,\n      editstartDate: \"\",\n      editEndDate: \"\",\n      editDescription: \"\",\n      modalVisible: false,\n      currentRecord: {},\n      columns: [{\n        title: 'Version No',\n        dataIndex: 'version',\n        key: 'version',\n        render: function render(text) {\n          return __jsx(\"a\", null, text);\n        },\n        editable: true\n      }, {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n        editable: true,\n        render: function render(rec) {\n          return statusDisplay(rec);\n        }\n      }, {\n        title: 'Progress',\n        dataIndex: 'progress',\n        key: 'progress',\n        editable: true,\n        render: function render(rec) {\n          return progressDisplay(rec);\n        }\n      }, {\n        title: 'Start Date',\n        dataIndex: 'startDate',\n        key: 'startDate',\n        editable: true\n      }, {\n        title: 'Release Date',\n        dataIndex: 'endDate',\n        key: 'endDate',\n        editable: true\n      }, {\n        title: 'Description',\n        dataIndex: 'description',\n        key: 'description',\n        editable: true\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: function render(text, record) {\n          var editable = _this2.isEditing(record);\n\n          var Content = __jsx(\"div\", null, __jsx(Row, null, __jsx(Col, {\n            span: 8\n          }, __jsx(\"a\", {\n            disabled: _this2.state.editingKey !== '',\n            onClick: function onClick() {\n              return _this2.edit(record);\n            }\n          }, \"Edit\")), __jsx(Col, {\n            span: 8\n          }, __jsx(\"a\", {\n            disabled: _this2.state.editingKey !== '',\n            onClick: function onClick() {\n              return _this2.addChildItem(record);\n            }\n          }, \"Add\")), __jsx(Col, {\n            span: 8\n          }, __jsx(\"a\", {\n            disabled: _this2.state.editingKey !== '',\n            onClick: function onClick() {\n              return _this2.deleteItem(record);\n            }\n          }, \"Delete\"))));\n\n          return editable ? __jsx(\"span\", null, __jsx(\"a\", {\n            href: \"javascript:;\",\n            onClick: function onClick() {\n              return _this2.save(record);\n            },\n            style: {\n              marginRight: 8\n            }\n          }, \"Save\"), __jsx(Popconfirm, {\n            title: \"Sure to cancel?\",\n            onConfirm: _this2.cancel\n          }, __jsx(\"a\", null, \"Cancel\"))) : __jsx(Popover, {\n            content: Content,\n            title: \"Actions\",\n            trigger: \"hover\"\n          }, __jsx(MenuOutlined, null));\n        }\n      }],\n      listDataSrc: [],\n      isEdit: false\n    };\n    return _this2;\n  }\n\n  _createClass(ReleaseList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // let chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\n      // let getItems = chkItem == null ? [] : chkItem;\n      // this.setState({\n      //     listDataSrc: getItems\n      // })\n      this.fetchItem();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var dataFromLS = nextProps.dataFromLS;\n\n      if (dataFromLS) {\n        this.setState({\n          listDataSrc: dataFromLS,\n          editingKey: \"\"\n        });\n      }\n    }\n  }, {\n    key: \"save\",\n    value: function save(record) {\n      var _this$state = this.state,\n          editVersion = _this$state.editVersion,\n          editstartDate = _this$state.editstartDate,\n          editEndDate = _this$state.editEndDate,\n          editDescription = _this$state.editDescription,\n          editStatus = _this$state.editStatus,\n          editProgress = _this$state.editProgress,\n          listDataSrc = _this$state.listDataSrc;\n      listDataSrc.map(function (item) {\n        if (item.key == record.key) {\n          item.key = record.key;\n          item.childRelease = item.childRelease;\n          item.version = editVersion;\n          item.status = editStatus;\n          item.progress = editProgress;\n          item.startDate = editstartDate;\n          item.endDate = editEndDate;\n          item.description = editDescription;\n        }\n      });\n      localStorage.setItem('parentReleaseData', JSON.stringify(listDataSrc));\n      this.setState({\n        editStatus: \"\",\n        editProgress: \"\",\n        editstartDate: \"\",\n        editVersion: \"\",\n        editEndDate: \"\",\n        editDescription: \"\"\n      });\n      this.fetchItem();\n    }\n  }, {\n    key: \"edit\",\n    value: function edit(record) {\n      this.setState({\n        editingKey: record.key,\n        editStatus: record.status,\n        editProgress: record.progress,\n        editstartDate: record.startDate,\n        editVersion: record.version,\n        editEndDate: record.endDate,\n        editDescription: record.description\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var listDataSrc = this.state.listDataSrc;\n      var components = {\n        body: {\n          cell: this.EditableCell\n        }\n      };\n      var columns = this.state.columns.map(function (col) {\n        if (!col.editable) {\n          return col;\n        }\n\n        return _objectSpread({}, col, {\n          onCell: function onCell(record) {\n            return {\n              record: record,\n              inputType: col.dataIndex,\n              dataIndex: col.dataIndex,\n              title: col.title,\n              editing: _this3.isEditing(record)\n            };\n          }\n        });\n      });\n      return __jsx(React.Fragment, null, __jsx(Form, null, __jsx(Table, {\n        columns: columns,\n        dataSource: this.props.dataFromLS,\n        components: components,\n        expandable: {\n          expandedRowRender: function expandedRowRender(record) {\n            return __jsx(ChildReleaseList, {\n              thisData: record,\n              refreshCallBack: _this3.fetchItem\n            });\n          }\n        },\n        rowClassName: \"editable-row\",\n        pagination: {\n          onChange: this.cancel\n        }\n      })), __jsx(AddParentRelease, _extends({}, this.props, {\n        refreshCallBack: this.fetchItem\n      })), __jsx(Modal, {\n        title: \"Add Batch Release\",\n        visible: this.state.modalVisible,\n        onOk: this.handleOk,\n        footer: null,\n        closable: true,\n        className: \"modal-Layout\",\n        onCancel: this.handleCancel\n      }, __jsx(AddChildRelease, {\n        thisData: this.state.currentRecord,\n        closeModal: this.handleOk,\n        dbData: listDataSrc,\n        refreshCallBack: this.fetchItem\n      })));\n    }\n  }]);\n\n  return ReleaseList;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    dataFromLS: state.dataFromLS\n  };\n};\n\nexport default connect(mapStateToProps, {\n  onFetchItem: onFetchItem\n})(ReleaseList);","map":null,"metadata":{},"sourceType":"module"}