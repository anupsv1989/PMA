{"ast":null,"code":"var _jsxFileName = \"D:\\\\RandDChamber\\\\LogwardAssignment\\\\ProjectManagement\\\\PMA\\\\containers\\\\parentReleaseList.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, useState, version } from \"react\";\nimport { Table, Tag, Form, Input, InputNumber, Popconfirm, Progress, DatePicker, Select, Slider, Popover, Button } from 'antd';\nimport AddParentRelease from './addParentRelease';\nimport moment from 'moment';\nconst dateFormat = \"DD-MM-YYYY\";\nexport default class ReleaseList extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"EditableCell\", (_ref) => {\n      let {\n        editing,\n        dataIndex,\n        title,\n        inputType,\n        record,\n        index,\n        children\n      } = _ref,\n          restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n      // console.log(\"started 1\", children)\n      console.log(\"started 2\", record); // console.log(\"started 4\", dataIndex)\n      // console.log(\"started 5\", title)\n\n      let inputNode;\n\n      switch (dataIndex) {\n        case \"version\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.version,\n            name: \"version\",\n            onChange: this.handleVersion,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"startDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"startDate\",\n            defaultValue: moment(record.startDate, dateFormat),\n            onChange: this.handleStartDate,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"endDate\":\n          inputNode = __jsx(DatePicker, {\n            name: \"endDate\",\n            defaultValue: moment(record.endDate, dateFormat),\n            onChange: this.handleEndDate,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"description\":\n          inputNode = __jsx(Input, {\n            defaultValue: record.description,\n            onChange: this.handleDescription,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        case \"status\":\n          inputNode = __jsx(Select, {\n            style: {\n              width: 120\n            },\n            name: \"status\",\n            onChange: this.handleChange,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 21\n            }\n          }, __jsx(Option, {\n            value: \"IN PROGRESS\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 25\n            }\n          }, \"In Progress\"), __jsx(Option, {\n            value: \"UNRELEASED\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 25\n            }\n          }, \"Unreleased\"), __jsx(Option, {\n            value: \"RELEASED\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 25\n            }\n          }, \"Released\")); // onChange = { handleChange }\n\n          break;\n\n        case \"progress\":\n          inputNode = __jsx(Slider, {\n            defaultValue: 30,\n            tooltipVisible: true,\n            name: \"progress\",\n            onChange: this.handleSlider,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 29\n            }\n          });\n          break;\n\n        default: // code block\n\n      } // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n\n\n      return __jsx(\"td\", _extends({}, restProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }\n      }), editing ? __jsx(Form.Item, {\n        name: dataIndex,\n        style: {\n          margin: 0\n        },\n        rules: [{\n          required: true,\n          message: `Please Input ${title}!`\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }\n      }, inputNode) : children); // }\n    });\n\n    _defineProperty(this, \"handleChange\", value => {\n      console.log(\"Vlaue\", value);\n      this.setState({\n        editStatus: value\n      });\n    });\n\n    _defineProperty(this, \"handleSlider\", value => {\n      console.log(\"slider Vlaue\", value);\n      this.setState({\n        editProgress: value\n      });\n    });\n\n    _defineProperty(this, \"handleStartDate\", (date, str) => {\n      console.log(\"sliceer sd str\", str);\n      this.setState({\n        editstartDate: str\n      });\n    });\n\n    _defineProperty(this, \"handleEndDate\", (date, str) => {\n      console.log(\"sliceer ed\", str);\n      this.setState({\n        editEndDate: str\n      });\n    });\n\n    _defineProperty(this, \"handleDescription\", e => {\n      console.log(\"sliceer desc\", e.target.value);\n      this.setState({\n        editDescription: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleVersion\", e => {\n      console.log(\"sliceer vers\", e.target.value);\n      this.setState({\n        editVersion: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"isEditing\", record => record.key === this.state.editingKey);\n\n    _defineProperty(this, \"cancel\", () => {\n      this.setState({\n        editingKey: ''\n      });\n    });\n\n    this.state = {\n      editingKey: '',\n      editVersion: \"\",\n      editStatus: \"\",\n      editProgress: \"\",\n      editstartDate: \"\",\n      editEndDate: \"\",\n      editDescription: \"\",\n      columns: [{\n        title: 'Version No',\n        dataIndex: 'version',\n        key: 'version',\n        render: text => __jsx(\"a\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 37\n          }\n        }, text),\n        editable: true\n      }, {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n        editable: true\n      }, {\n        title: 'Progress',\n        dataIndex: 'progress',\n        key: 'progress',\n        editable: true,\n        render: rec => __jsx(Progress, {\n          strokeColor: {\n            '0%': '#108ee9',\n            '100%': '#87d068'\n          },\n          percent: rec,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }\n        })\n      }, {\n        title: 'Start Date',\n        dataIndex: 'startDate',\n        key: 'startDate',\n        editable: true\n      }, {\n        title: 'Release Date',\n        dataIndex: 'endDate',\n        key: 'endDate',\n        editable: true\n      }, {\n        title: 'Description',\n        dataIndex: 'description',\n        key: 'description',\n        editable: true\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: (text, record) => {\n          const editable = this.isEditing(record);\n          return editable ? __jsx(\"span\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 29\n            }\n          }, __jsx(\"a\", {\n            href: \"javascript:;\",\n            onClick: () => this.save(record),\n            style: {\n              marginRight: 8\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 33\n            }\n          }, \"Save\"), __jsx(Popconfirm, {\n            title: \"Sure to cancel?\",\n            onConfirm: this.cancel,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 33\n            }\n          }, __jsx(\"a\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 37\n            }\n          }, \"Cancel\"))) : __jsx(\"a\", {\n            disabled: this.state.editingKey !== '',\n            onClick: () => this.edit(record),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 33\n            }\n          }, \"Edit\");\n        }\n      }],\n      listDataSrc: [],\n      isEdit: false\n    };\n  }\n\n  componentDidMount() {\n    let chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\n    let getItems = chkItem == null ? [] : chkItem;\n    this.setState({\n      listDataSrc: getItems\n    });\n  }\n\n  save(record) {\n    console.log(\"Form submit\", record);\n    let {\n      editVersion,\n      editstartDate,\n      editEndDate,\n      editDescription,\n      editStatus,\n      editProgress,\n      listDataSrc\n    } = this.state; // let arr = this.state.localPRItems;\n\n    let prObj = {\n      key: record.key,\n      version: editVersion,\n      status: editStatus,\n      progress: editProgress,\n      startDate: editstartDate,\n      endDate: editEndDate,\n      description: editDescription\n    };\n    console.log(\"Presnet Obj\", prObj);\n    console.log(\"Presnet Obj list form before\", listDataSrc);\n    listDataSrc.map(item => {\n      if (item.key == record.key) {\n        item.key = record.key;\n        item.version = editVersion != \"\" ? editVersion : item.version;\n        item.status = editStatus != \"\" ? editStatus : item.status;\n        item.progress = editProgress != \"\" ? editProgress : item.progress;\n        item.startDate = editstartDate != \"\" ? editstartDate : item.startDate;\n        item.endDate = editEndDate != \"\" ? editEndDate : item.endDate;\n        item.description = editDescription != \"\" ? editDescription : item.description;\n      }\n    });\n    console.log(\"Presnet Obj list form after \", listDataSrc);\n    localStorage.setItem('parentReleaseData', JSON.stringify(listDataSrc)); // form.validateFields((error, row) => {\n    //     if (error) {\n    //         return;\n    //     }\n    //     console.log(\"Form submit\", key)\n    //     console.log(\"Form submit form\", form)\n    //     const newData = [...this.state.data];\n    //     const index = newData.findIndex(item => key === item.key);\n    //     if (index > -1) {\n    //         const item = newData[index];\n    //         newData.splice(index, 1, {\n    //             ...item,\n    //             ...row,\n    //         });\n    //         this.setState({ data: newData, editingKey: '' });\n    //     } else {\n    //         newData.push(row);\n    //         this.setState({ data: newData, editingKey: '' });\n    //     }\n    // });\n  }\n\n  edit(record) {\n    this.setState({\n      editingKey: record.key\n    });\n  }\n\n  render() {\n    let {\n      listDataSrc\n    } = this.state;\n    const components = {\n      body: {\n        cell: this.EditableCell\n      }\n    };\n    const columns = this.state.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return _objectSpread({}, col, {\n        onCell: record => ({\n          record,\n          inputType: col.dataIndex,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record)\n        })\n      });\n    });\n    return __jsx(React.Fragment, null, __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 17\n      }\n    }, __jsx(Table, {\n      columns: columns,\n      dataSource: listDataSrc,\n      components: components,\n      rowClassName: \"editable-row\",\n      pagination: {\n        onChange: this.cancel\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 21\n      }\n    })), __jsx(AddParentRelease, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["D:/RandDChamber/LogwardAssignment/ProjectManagement/PMA/containers/parentReleaseList.js"],"names":["React","Component","useState","version","Table","Tag","Form","Input","InputNumber","Popconfirm","Progress","DatePicker","Select","Slider","Popover","Button","AddParentRelease","moment","dateFormat","ReleaseList","constructor","props","editing","dataIndex","title","inputType","record","index","children","restProps","console","log","inputNode","handleVersion","startDate","handleStartDate","endDate","handleEndDate","description","handleDescription","width","handleChange","handleSlider","margin","required","message","value","setState","editStatus","editProgress","date","str","editstartDate","editEndDate","e","target","editDescription","editVersion","key","state","editingKey","columns","render","text","editable","rec","isEditing","save","marginRight","cancel","edit","listDataSrc","isEdit","componentDidMount","chkItem","JSON","parse","localStorage","getItem","getItems","prObj","status","progress","map","item","setItem","stringify","components","body","cell","EditableCell","col","onCell","onChange"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,OAArC,QAAoD,OAApD;AACA,SACIC,KADJ,EACWC,GADX,EACgBC,IADhB,EACsBC,KADtB,EAC6BC,WAD7B,EAC0CC,UAD1C,EAEIC,QAFJ,EAEcC,UAFd,EAE0BC,MAF1B,EAEkCC,MAFlC,EAE0CC,OAF1C,EAEmDC,MAFnD,QAGO,MAHP;AAIA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,MAAMC,UAAU,GAAG,YAAnB;AAKA,eAAe,MAAMC,WAAN,SAA0BlB,SAA1B,CAAoC;AAE/CmB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,0CAkGJ,UAST;AAAA,UATU;AACZC,QAAAA,OADY;AAEZC,QAAAA,SAFY;AAGZC,QAAAA,KAHY;AAIZC,QAAAA,SAJY;AAKZC,QAAAA,MALY;AAMZC,QAAAA,KANY;AAOZC,QAAAA;AAPY,OASV;AAAA,UADCC,SACD;;AACF;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBL,MAAzB,EAFE,CAGF;AACA;;AACA,UAAIM,SAAJ;;AAGA,cAAQT,SAAR;AACI,aAAK,SAAL;AACIS,UAAAA,SAAS,GAAG,MAAC,KAAD;AAAO,YAAA,YAAY,EAAEN,MAAM,CAACvB,OAA5B;AAAqC,YAAA,IAAI,EAAC,SAA1C;AAAoD,YAAA,QAAQ,EAAE,KAAK8B,aAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAZ;AACA;;AACJ,aAAK,WAAL;AACID,UAAAA,SAAS,GAAG,MAAC,UAAD;AAAY,YAAA,IAAI,EAAC,WAAjB;AAA6B,YAAA,YAAY,EAAEf,MAAM,CAACS,MAAM,CAACQ,SAAR,EAAmBhB,UAAnB,CAAjD;AAAiF,YAAA,QAAQ,EAAE,KAAKiB,eAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAZ;AACA;;AACJ,aAAK,SAAL;AACIH,UAAAA,SAAS,GAAG,MAAC,UAAD;AAAY,YAAA,IAAI,EAAC,SAAjB;AAA2B,YAAA,YAAY,EAAEf,MAAM,CAACS,MAAM,CAACU,OAAR,EAAiBlB,UAAjB,CAA/C;AAA6E,YAAA,QAAQ,EAAE,KAAKmB,aAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAZ;AACA;;AACJ,aAAK,aAAL;AACIL,UAAAA,SAAS,GAAG,MAAC,KAAD;AAAO,YAAA,YAAY,EAAEN,MAAM,CAACY,WAA5B;AAAyC,YAAA,QAAQ,EAAE,KAAKC,iBAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAZ;AACA;;AACJ,aAAK,QAAL;AACIP,UAAAA,SAAS,GACL,MAAC,MAAD;AAAQ,YAAA,KAAK,EAAE;AAAEQ,cAAAA,KAAK,EAAE;AAAT,aAAf;AAA+B,YAAA,IAAI,EAAC,QAApC;AAA6C,YAAA,QAAQ,EAAE,KAAKC,YAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,MAAC,MAAD;AAAQ,YAAA,KAAK,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ,EAEI,MAAC,MAAD;AAAQ,YAAA,KAAK,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFJ,EAGI,MAAC,MAAD;AAAQ,YAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHJ,CADJ,CADJ,CAOI;;AACA;;AACJ,aAAK,UAAL;AACIT,UAAAA,SAAS,GAAG,MAAC,MAAD;AAAQ,YAAA,YAAY,EAAE,EAAtB;AAA0B,YAAA,cAAc,MAAxC;AAAyC,YAAA,IAAI,EAAC,UAA9C;AAAyD,YAAA,QAAQ,EAAE,KAAKU,YAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAZ;AACA;;AACJ,gBAzBJ,CA0BI;;AA1BJ,OARE,CAqCF;;;AACA,aACI,yBAAQb,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACKP,OAAO,GAEA,MAAC,IAAD,CAAM,IAAN;AACI,QAAA,IAAI,EAAEC,SADV;AAEI,QAAA,KAAK,EAAE;AAAEoB,UAAAA,MAAM,EAAE;AAAV,SAFX;AAGI,QAAA,KAAK,EAAE,CACH;AACIC,UAAAA,QAAQ,EAAE,IADd;AAEIC,UAAAA,OAAO,EAAG,gBAAerB,KAAM;AAFnC,SADG,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAUKQ,SAVL,CAFA,GAkBAJ,QAnBZ,CADJ,CAtCE,CA8DF;AACH,KA1KkB;;AAAA,0CA4KHkB,KAAD,IAAW;AACtBhB,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBe,KAArB;AACA,WAAKC,QAAL,CAAc;AACVC,QAAAA,UAAU,EAAEF;AADF,OAAd;AAGH,KAjLkB;;AAAA,0CAmLHA,KAAD,IAAW;AACtBhB,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4Be,KAA5B;AACA,WAAKC,QAAL,CAAc;AACVE,QAAAA,YAAY,EAAEH;AADJ,OAAd;AAGH,KAxLkB;;AAAA,6CAyLD,CAACI,IAAD,EAAOC,GAAP,KAAe;AAC7BrB,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BoB,GAA9B;AACA,WAAKJ,QAAL,CAAc;AACVK,QAAAA,aAAa,EAAED;AADL,OAAd;AAGH,KA9LkB;;AAAA,2CA+LH,CAACD,IAAD,EAAOC,GAAP,KAAe;AAC3BrB,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BoB,GAA1B;AACA,WAAKJ,QAAL,CAAc;AACVM,QAAAA,WAAW,EAAEF;AADH,OAAd;AAGH,KApMkB;;AAAA,+CAqMEG,CAAD,IAAO;AACvBxB,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BuB,CAAC,CAACC,MAAF,CAAST,KAArC;AACA,WAAKC,QAAL,CAAc;AACVS,QAAAA,eAAe,EAAEF,CAAC,CAACC,MAAF,CAAST;AADhB,OAAd;AAGH,KA1MkB;;AAAA,2CA2MFQ,CAAD,IAAO;AACnBxB,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BuB,CAAC,CAACC,MAAF,CAAST,KAArC;AACA,WAAKC,QAAL,CAAc;AACVU,QAAAA,WAAW,EAAEH,CAAC,CAACC,MAAF,CAAST;AADZ,OAAd;AAGH,KAhNkB;;AAAA,uCAkNPpB,MAAM,IAAIA,MAAM,CAACgC,GAAP,KAAe,KAAKC,KAAL,CAAWC,UAlN7B;;AAAA,oCAoNV,MAAM;AACX,WAAKb,QAAL,CAAc;AAAEa,QAAAA,UAAU,EAAE;AAAd,OAAd;AACH,KAtNkB;;AAEf,SAAKD,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE,EADH;AAETH,MAAAA,WAAW,EAAE,EAFJ;AAGTT,MAAAA,UAAU,EAAE,EAHH;AAITC,MAAAA,YAAY,EAAE,EAJL;AAKTG,MAAAA,aAAa,EAAE,EALN;AAMTC,MAAAA,WAAW,EAAE,EANJ;AAOTG,MAAAA,eAAe,EAAE,EAPR;AAQTK,MAAAA,OAAO,EAAE,CACL;AACIrC,QAAAA,KAAK,EAAE,YADX;AAEID,QAAAA,SAAS,EAAE,SAFf;AAGImC,QAAAA,GAAG,EAAE,SAHT;AAIII,QAAAA,MAAM,EAAEC,IAAI,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIA,IAAJ,CAJpB;AAKIC,QAAAA,QAAQ,EAAE;AALd,OADK,EAQL;AACIxC,QAAAA,KAAK,EAAE,QADX;AAEID,QAAAA,SAAS,EAAE,QAFf;AAGImC,QAAAA,GAAG,EAAE,QAHT;AAIIM,QAAAA,QAAQ,EAAE;AAJd,OARK,EAcL;AACIxC,QAAAA,KAAK,EAAE,UADX;AAEID,QAAAA,SAAS,EAAE,UAFf;AAGImC,QAAAA,GAAG,EAAE,UAHT;AAIIM,QAAAA,QAAQ,EAAE,IAJd;AAKIF,QAAAA,MAAM,EAAGG,GAAD,IACJ,MAAC,QAAD;AACI,UAAA,WAAW,EAAE;AACT,kBAAM,SADG;AAET,oBAAQ;AAFC,WADjB;AAKI,UAAA,OAAO,EAAEA,GALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANR,OAdK,EA6BL;AACIzC,QAAAA,KAAK,EAAE,YADX;AAEID,QAAAA,SAAS,EAAE,WAFf;AAGImC,QAAAA,GAAG,EAAE,WAHT;AAIIM,QAAAA,QAAQ,EAAE;AAJd,OA7BK,EAmCL;AACIxC,QAAAA,KAAK,EAAE,cADX;AAEID,QAAAA,SAAS,EAAE,SAFf;AAGImC,QAAAA,GAAG,EAAE,SAHT;AAIIM,QAAAA,QAAQ,EAAE;AAJd,OAnCK,EAyCL;AACIxC,QAAAA,KAAK,EAAE,aADX;AAEID,QAAAA,SAAS,EAAE,aAFf;AAGImC,QAAAA,GAAG,EAAE,aAHT;AAIIM,QAAAA,QAAQ,EAAE;AAJd,OAzCK,EA+CL;AACIxC,QAAAA,KAAK,EAAE,QADX;AAEIkC,QAAAA,GAAG,EAAE,QAFT;AAGII,QAAAA,MAAM,EAAE,CAACC,IAAD,EAAOrC,MAAP,KAAkB;AACtB,gBAAMsC,QAAQ,GAAG,KAAKE,SAAL,CAAexC,MAAf,CAAjB;AACA,iBAAOsC,QAAQ,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AACI,YAAA,IAAI,EAAC,cADT;AAEI,YAAA,OAAO,EAAE,MAAM,KAAKG,IAAL,CAAUzC,MAAV,CAFnB;AAGI,YAAA,KAAK,EAAE;AACH0C,cAAAA,WAAW,EAAE;AADV,aAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAUI,MAAC,UAAD;AAAY,YAAA,KAAK,EAAC,iBAAlB;AAAoC,YAAA,SAAS,EAAE,KAAKC,MAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,CAVJ,CADW,GAgBP;AAAG,YAAA,QAAQ,EAAE,KAAKV,KAAL,CAAWC,UAAX,KAA0B,EAAvC;AAA2C,YAAA,OAAO,EAAE,MAAM,KAAKU,IAAL,CAAU5C,MAAV,CAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAhBR;AAoBH;AAzBL,OA/CK,CARA;AAmFT6C,MAAAA,WAAW,EAAE,EAnFJ;AAoFTC,MAAAA,MAAM,EAAE;AApFC,KAAb;AAsFH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAAX,CAAd;AACA,QAAIC,QAAQ,GAAGL,OAAO,IAAI,IAAX,GAAkB,EAAlB,GAAuBA,OAAtC;AACA,SAAK3B,QAAL,CAAc;AACVwB,MAAAA,WAAW,EAAEQ;AADH,KAAd;AAGH;;AAwHDZ,EAAAA,IAAI,CAACzC,MAAD,EAAS;AACTI,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BL,MAA3B;AACA,QAAI;AAAE+B,MAAAA,WAAF;AAAeL,MAAAA,aAAf;AAA8BC,MAAAA,WAA9B;AAA2CG,MAAAA,eAA3C;AAA4DR,MAAAA,UAA5D;AAAwEC,MAAAA,YAAxE;AAAsFsB,MAAAA;AAAtF,QAAsG,KAAKZ,KAA/G,CAFS,CAIT;;AACA,QAAIqB,KAAK,GAAG;AACRtB,MAAAA,GAAG,EAAEhC,MAAM,CAACgC,GADJ;AAERvD,MAAAA,OAAO,EAAEsD,WAFD;AAGRwB,MAAAA,MAAM,EAAEjC,UAHA;AAIRkC,MAAAA,QAAQ,EAAEjC,YAJF;AAKRf,MAAAA,SAAS,EAAEkB,aALH;AAMRhB,MAAAA,OAAO,EAAEiB,WAND;AAORf,MAAAA,WAAW,EAAEkB;AAPL,KAAZ;AAUA1B,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BiD,KAA3B;AACAlD,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CwC,WAA5C;AAGAA,IAAAA,WAAW,CAACY,GAAZ,CAAgBC,IAAI,IAAI;AACpB,UAAIA,IAAI,CAAC1B,GAAL,IAAYhC,MAAM,CAACgC,GAAvB,EAA4B;AACxB0B,QAAAA,IAAI,CAAC1B,GAAL,GAAWhC,MAAM,CAACgC,GAAlB;AACA0B,QAAAA,IAAI,CAACjF,OAAL,GAAesD,WAAW,IAAI,EAAf,GAAoBA,WAApB,GAAkC2B,IAAI,CAACjF,OAAtD;AACAiF,QAAAA,IAAI,CAACH,MAAL,GAAcjC,UAAU,IAAI,EAAd,GAAmBA,UAAnB,GAAgCoC,IAAI,CAACH,MAAnD;AACAG,QAAAA,IAAI,CAACF,QAAL,GAAgBjC,YAAY,IAAI,EAAhB,GAAqBA,YAArB,GAAoCmC,IAAI,CAACF,QAAzD;AACAE,QAAAA,IAAI,CAAClD,SAAL,GAAiBkB,aAAa,IAAI,EAAjB,GAAsBA,aAAtB,GAAsCgC,IAAI,CAAClD,SAA5D;AACAkD,QAAAA,IAAI,CAAChD,OAAL,GAAeiB,WAAW,IAAI,EAAf,GAAoBA,WAApB,GAAkC+B,IAAI,CAAChD,OAAtD;AACAgD,QAAAA,IAAI,CAAC9C,WAAL,GAAmBkB,eAAe,IAAI,EAAnB,GAAwBA,eAAxB,GAA0C4B,IAAI,CAAC9C,WAAlE;AACH;AACJ,KAVD;AAWAR,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CwC,WAA5C;AACAM,IAAAA,YAAY,CAACQ,OAAb,CAAqB,mBAArB,EAA0CV,IAAI,CAACW,SAAL,CAAef,WAAf,CAA1C,EA/BS,CAiCT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDD,EAAAA,IAAI,CAAC5C,MAAD,EAAS;AACT,SAAKqB,QAAL,CAAc;AAAEa,MAAAA,UAAU,EAAElC,MAAM,CAACgC;AAArB,KAAd;AACH;;AAEDI,EAAAA,MAAM,GAAG;AACL,QAAI;AAAES,MAAAA;AAAF,QAAkB,KAAKZ,KAA3B;AAEA,UAAM4B,UAAU,GAAG;AACfC,MAAAA,IAAI,EAAE;AACFC,QAAAA,IAAI,EAAE,KAAKC;AADT;AADS,KAAnB;AAMA,UAAM7B,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAAX,CAAmBsB,GAAnB,CAAuBQ,GAAG,IAAI;AAC1C,UAAI,CAACA,GAAG,CAAC3B,QAAT,EAAmB;AACf,eAAO2B,GAAP;AACH;;AACD,+BACOA,GADP;AAEIC,QAAAA,MAAM,EAAElE,MAAM,KAAK;AACfA,UAAAA,MADe;AAEfD,UAAAA,SAAS,EAAEkE,GAAG,CAACpE,SAFA;AAGfA,UAAAA,SAAS,EAAEoE,GAAG,CAACpE,SAHA;AAIfC,UAAAA,KAAK,EAAEmE,GAAG,CAACnE,KAJI;AAKfF,UAAAA,OAAO,EAAE,KAAK4C,SAAL,CAAexC,MAAf;AALM,SAAL;AAFlB;AAUH,KAde,CAAhB;AAiBA,WACI,4BACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,KAAD;AACI,MAAA,OAAO,EAAEmC,OADb;AAEI,MAAA,UAAU,EAAEU,WAFhB;AAGI,MAAA,UAAU,EAAEgB,UAHhB;AAII,MAAA,YAAY,EAAC,cAJjB;AAKI,MAAA,UAAU,EAAE;AACRM,QAAAA,QAAQ,EAAE,KAAKxB;AADP,OALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,EAcI,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdJ,CADJ;AAkBH;;AAjU8C","sourcesContent":["import React, { Component, useState, version } from \"react\";\r\nimport {\r\n    Table, Tag, Form, Input, InputNumber, Popconfirm,\r\n    Progress, DatePicker, Select, Slider, Popover, Button\r\n} from 'antd';\r\nimport AddParentRelease from './addParentRelease';\r\nimport moment from 'moment';\r\n\r\nconst dateFormat = \"DD-MM-YYYY\";\r\n\r\n\r\n\r\n\r\nexport default class ReleaseList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            editingKey: '',\r\n            editVersion: \"\",\r\n            editStatus: \"\",\r\n            editProgress: \"\",\r\n            editstartDate: \"\",\r\n            editEndDate: \"\",\r\n            editDescription: \"\",\r\n            columns: [\r\n                {\r\n                    title: 'Version No',\r\n                    dataIndex: 'version',\r\n                    key: 'version',\r\n                    render: text => <a>{text}</a>,\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Status',\r\n                    dataIndex: 'status',\r\n                    key: 'status',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Progress',\r\n                    dataIndex: 'progress',\r\n                    key: 'progress',\r\n                    editable: true,\r\n                    render: (rec) => (\r\n                        <Progress\r\n                            strokeColor={{\r\n                                '0%': '#108ee9',\r\n                                '100%': '#87d068',\r\n                            }}\r\n                            percent={rec}\r\n                        />\r\n                    ),\r\n                },\r\n                {\r\n                    title: 'Start Date',\r\n                    dataIndex: 'startDate',\r\n                    key: 'startDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Release Date',\r\n                    dataIndex: 'endDate',\r\n                    key: 'endDate',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Description',\r\n                    dataIndex: 'description',\r\n                    key: 'description',\r\n                    editable: true,\r\n                },\r\n                {\r\n                    title: 'Action',\r\n                    key: 'action',\r\n                    render: (text, record) => {\r\n                        const editable = this.isEditing(record);\r\n                        return editable ? (\r\n                            <span>\r\n                                <a\r\n                                    href=\"javascript:;\"\r\n                                    onClick={() => this.save(record)}\r\n                                    style={{\r\n                                        marginRight: 8,\r\n                                    }}\r\n                                >\r\n                                    Save\r\n                            </a>\r\n                                <Popconfirm title=\"Sure to cancel?\" onConfirm={this.cancel}>\r\n                                    <a>Cancel</a>\r\n                                </Popconfirm>\r\n                            </span>\r\n                        ) : (\r\n                                <a disabled={this.state.editingKey !== ''} onClick={() => this.edit(record)}>\r\n                                    Edit\r\n                                </a>\r\n                            );\r\n                    }\r\n                }\r\n            ],\r\n            listDataSrc: [],\r\n            isEdit: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let chkItem = JSON.parse(localStorage.getItem(\"parentReleaseData\"));\r\n        let getItems = chkItem == null ? [] : chkItem;\r\n        this.setState({\r\n            listDataSrc: getItems\r\n        })\r\n    }\r\n\r\n    EditableCell = ({\r\n        editing,\r\n        dataIndex,\r\n        title,\r\n        inputType,\r\n        record,\r\n        index,\r\n        children,\r\n        ...restProps\r\n    }) => {\r\n        // console.log(\"started 1\", children)\r\n        console.log(\"started 2\", record)\r\n        // console.log(\"started 4\", dataIndex)\r\n        // console.log(\"started 5\", title)\r\n        let inputNode;\r\n\r\n\r\n        switch (dataIndex) {\r\n            case \"version\":\r\n                inputNode = <Input defaultValue={record.version} name=\"version\" onChange={this.handleVersion} />\r\n                break;\r\n            case \"startDate\":\r\n                inputNode = <DatePicker name=\"startDate\" defaultValue={moment(record.startDate, dateFormat)} onChange={this.handleStartDate} />\r\n                break;\r\n            case \"endDate\":\r\n                inputNode = <DatePicker name=\"endDate\" defaultValue={moment(record.endDate, dateFormat)} onChange={this.handleEndDate} />\r\n                break;\r\n            case \"description\":\r\n                inputNode = <Input defaultValue={record.description} onChange={this.handleDescription} />\r\n                break;\r\n            case \"status\":\r\n                inputNode =\r\n                    <Select style={{ width: 120 }} name=\"status\" onChange={this.handleChange}>\r\n                        <Option value=\"IN PROGRESS\">In Progress</Option>\r\n                        <Option value=\"UNRELEASED\">Unreleased</Option>\r\n                        <Option value=\"RELEASED\">Released</Option>\r\n                    </Select>\r\n                // onChange = { handleChange }\r\n                break;\r\n            case \"progress\":\r\n                inputNode = <Slider defaultValue={30} tooltipVisible name=\"progress\" onChange={this.handleSlider} />\r\n                break;\r\n            default:\r\n            // code block\r\n        }\r\n\r\n        // const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\r\n        return (\r\n            <td {...restProps}>\r\n                {editing ?\r\n                    (\r\n                        <Form.Item\r\n                            name={dataIndex}\r\n                            style={{ margin: 0 }}\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: `Please Input ${title}!`,\r\n                                },\r\n                            ]}\r\n                        >\r\n                            {inputNode}\r\n                        </Form.Item>\r\n\r\n                    )\r\n\r\n                    : (\r\n                        children\r\n                    )}\r\n            </td>\r\n        );\r\n        // }\r\n    };\r\n\r\n    handleChange = (value) => {\r\n        console.log(\"Vlaue\", value)\r\n        this.setState({\r\n            editStatus: value\r\n        })\r\n    }\r\n\r\n    handleSlider = (value) => {\r\n        console.log(\"slider Vlaue\", value);\r\n        this.setState({\r\n            editProgress: value\r\n        })\r\n    }\r\n    handleStartDate = (date, str) => {\r\n        console.log(\"sliceer sd str\", str)\r\n        this.setState({\r\n            editstartDate: str\r\n        })\r\n    }\r\n    handleEndDate = (date, str) => {\r\n        console.log(\"sliceer ed\", str)\r\n        this.setState({\r\n            editEndDate: str\r\n        })\r\n    }\r\n    handleDescription = (e) => {\r\n        console.log(\"sliceer desc\", e.target.value)\r\n        this.setState({\r\n            editDescription: e.target.value\r\n        })\r\n    }\r\n    handleVersion = (e) => {\r\n        console.log(\"sliceer vers\", e.target.value)\r\n        this.setState({\r\n            editVersion: e.target.value\r\n        })\r\n    }\r\n\r\n    isEditing = record => record.key === this.state.editingKey;\r\n\r\n    cancel = () => {\r\n        this.setState({ editingKey: '' });\r\n    };\r\n\r\n    save(record) {\r\n        console.log(\"Form submit\", record)\r\n        let { editVersion, editstartDate, editEndDate, editDescription, editStatus, editProgress, listDataSrc } = this.state;\r\n\r\n        // let arr = this.state.localPRItems;\r\n        let prObj = {\r\n            key: record.key,\r\n            version: editVersion,\r\n            status: editStatus,\r\n            progress: editProgress,\r\n            startDate: editstartDate,\r\n            endDate: editEndDate,\r\n            description: editDescription\r\n        }\r\n\r\n        console.log(\"Presnet Obj\", prObj)\r\n        console.log(\"Presnet Obj list form before\", listDataSrc)\r\n\r\n\r\n        listDataSrc.map(item => {\r\n            if (item.key == record.key) {\r\n                item.key = record.key;\r\n                item.version = editVersion != \"\" ? editVersion : item.version;\r\n                item.status = editStatus != \"\" ? editStatus : item.status;\r\n                item.progress = editProgress != \"\" ? editProgress : item.progress;\r\n                item.startDate = editstartDate != \"\" ? editstartDate : item.startDate;\r\n                item.endDate = editEndDate != \"\" ? editEndDate : item.endDate;\r\n                item.description = editDescription != \"\" ? editDescription : item.description;\r\n            }\r\n        })\r\n        console.log(\"Presnet Obj list form after \", listDataSrc)\r\n        localStorage.setItem('parentReleaseData', JSON.stringify(listDataSrc))\r\n\r\n        // form.validateFields((error, row) => {\r\n        //     if (error) {\r\n        //         return;\r\n        //     }\r\n        //     console.log(\"Form submit\", key)\r\n        //     console.log(\"Form submit form\", form)\r\n        //     const newData = [...this.state.data];\r\n        //     const index = newData.findIndex(item => key === item.key);\r\n        //     if (index > -1) {\r\n        //         const item = newData[index];\r\n        //         newData.splice(index, 1, {\r\n        //             ...item,\r\n        //             ...row,\r\n        //         });\r\n        //         this.setState({ data: newData, editingKey: '' });\r\n        //     } else {\r\n        //         newData.push(row);\r\n        //         this.setState({ data: newData, editingKey: '' });\r\n        //     }\r\n        // });\r\n    }\r\n\r\n    edit(record) {\r\n        this.setState({ editingKey: record.key });\r\n    }\r\n\r\n    render() {\r\n        let { listDataSrc } = this.state;\r\n\r\n        const components = {\r\n            body: {\r\n                cell: this.EditableCell,\r\n            },\r\n        };\r\n\r\n        const columns = this.state.columns.map(col => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n            return {\r\n                ...col,\r\n                onCell: record => ({\r\n                    record,\r\n                    inputType: col.dataIndex,\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    editing: this.isEditing(record),\r\n                }),\r\n            };\r\n        });\r\n\r\n\r\n        return (\r\n            <>\r\n                <Form>\r\n                    <Table\r\n                        columns={columns}\r\n                        dataSource={listDataSrc}\r\n                        components={components}\r\n                        rowClassName=\"editable-row\"\r\n                        pagination={{\r\n                            onChange: this.cancel,\r\n                        }}\r\n                    />\r\n                </Form>\r\n\r\n\r\n                <AddParentRelease />\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}